var mongoose = require('mongoose'),
    express = require('express'),
    router = express.Router(),
    config = require('../../../../config'),
    businessFunctions = require('../../businessFunctions'),
    bcrypt = require('bcrypt-nodejs'),
    assert = require('assert'),
    jwt = require('jsonwebtoken'),
    aws = require('aws-sdk'),
    multerS3 = require('multer-s3'),
    uuidv1 = require('uuid/v1'),
    Validator = require('validatorjs'),
    multer = require('multer'),
    moment = require('moment-timezone'),
    redis = require('redis'),
    FCM = require('fcm-node'),
    q = require('q'),
    xlsxtojson = require("xlsx-to-json-lc"), //Abhinav
    xlstojson = require("xls-to-json-lc"), //Abhinav
    // bodyParser = require('body-parser'),       //Abhinav
    request = require('request');

// app.use(bodyParser.json());
//webpush = require('web-push');

var s3 = new aws.S3({
    accessKeyId: config.IAM_USER_KEY,
    secretAccessKey: config.IAM_USER_SECRET,
    Bucket: config.BUCKET_NAME
});


var client = redis.createClient({ host: 'localhost', port: 6379 });

const xAccessToken = require('../../../../middlewares/xAccessTokenBusiness');
const fun = require('../../../function');
const event = require('../../../event');
const whatsAppEvent = require('../../../whatsapp/whatsappEvent')
var paytm_config = require('../../../../paytm/paytm_config').paytm_config;
var paytm_checksum = require('../../../../paytm/checksum');

var salt = bcrypt.genSaltSync(10);
const User = require('../../../../models/user');
const BusinessTiming = require('../../../../models/businessTiming');
const BusinessConvenience = require('../../../../models/businessConvenience');
const BookingTiming = require('../../../../models/bookingTiming');
// const Type = require('../../../../models/type');
// const BusinessType = require('../../../../models/businessType');
const Category = require('../../../../models/category');
const Automaker = require('../../../../models/automaker');
const Model = require('../../../../models/model');
const QuotationOrders = require('../../../../models/quotationOrders')
const OrderLogs = require('../../../../models/orderLogs')
const State = require('../../../../models/state');
const BookingCategory = require('../../../../models/bookingCategory');
const ProductImage = require('../../../../models/productImage');
const Country = require('../../../../models/country');
const BusinessOffer = require('../../../../models/businessOffer');
const BusinessUser = require('../../../../models/businessUser');
const ProductOffer = require('../../../../models/productOffer');
const Order = require('../../../../models/order');
const BusinessOrder = require('../../../../models/businessOrder');
const OrderLine = require('../../../../models/orderLine');
const OrderConvenience = require('../../../../models/orderConvenience');
const OrderInvoice = require('../../../../models/orderInvoice');
const BookmarkProduct = require('../../../../models/bookmarkProduct');
const BookmarkOffer = require('../../../../models/bookmarkOffer');
const Car = require('../../../../models/car');
const CarSell = require('../../../../models/carSell');
const Asset = require('../../../../models/asset');
const CarImage = require('../../../../models/carImage');
const CarDocument = require('../../../../models/carDocument');
const BookmarkCar = require('../../../../models/bookmarkCar');
const BodyStyle = require('../../../../models/bodyStyle');
const FuelType = require('../../../../models/fuelType');
const Transmission = require('../../../../models/transmission');
const Color = require('../../../../models/color');
const Owner = require('../../../../models/owner');
const ServiceGallery = require('../../../../models/serviceGallery'); //abhinav
const BusinessGallery = require('../../../../models/businessGallery');
const Variant = require('../../../../models/variant');
const ClaimBusiness = require('../../../../models/claimBusiness');
const Review = require('../../../../models/review');
const Battery = require('../../../../models/battery');
const BatteryBrand = require('../../../../models/batteryBrand');
const TyreSize = require('../../../../models/tyreSize');
const Booking = require('../../../../models/booking');
const Lead = require('../../../../models/lead');
const Service = require('../../../../models/service');
const Customization = require('../../../../models/customization');
const Collision = require('../../../../models/collision');
const Washing = require('../../../../models/washing');
const ProductCategory = require('../../../../models/productCategory');
const Product = require('../../../../models/product');
const ProductBrand = require('../../../../models/productBrand');
const ProductModel = require('../../../../models/productModel');
const BusinessProduct = require('../../../../models/businessProduct');
const LeadRemark = require('../../../../models/leadRemark');
const LeadGenRemark = require('../../../../models/leadGenRemark');
const LeadStatus = require('../../../../models/leadStatus');
const Package = require('../../../../models/package');
const UserPackage = require('../../../../models/userPackage');
const PackageUsed = require('../../../../models/packageUsed');
const Management = require('../../../../models/management');
const LeadManagement = require('../../../../models/leadManagement');
const Address = require('../../../../models/address');
const Gallery = require('../../../../models/gallery');
const Coupon = require('../../../../models/coupon');
const Detailing = require('../../../../models/detailing');
const CouponUsed = require('../../../../models/couponUsed');
const Purchase = require('../../../../models/purchase');
const PurchaseReturn = require('../../../../models/purchaseReturn');
const PurchaseOrder = require('../../../../models/purchaseOrder');
const Tax = require('../../../../models/tax');
const BusinessVendor = require('../../../../models/businessVendor');
const JobInspection = require('../../../../models/jobInspection');
const ClubMember = require('../../../../models/clubMember');
const InsuranceCompany = require('../../../../models/insuranceCompany');
const LabourRate = require('../../../../models/labourRate');
const Point = require('../../../../models/point');
const QualityCheck = require('../../../../models/qualityCheck');
const Invoice = require('../../../../models/invoice');
const Expense = require('../../../../models/expense');
const Estimate = require('../../../../models/estimate');
const StockLogs = require('../../../../models/stockLogs');
// Vinay Model added
const VendorOrders = require('../../../../models/vendorOrders');

const TransactionLog = require('../../../../models/transactionLog');
const Statements = require('../../../../models/statements');
const RFQ = require('../../../../models/rfq');
const Quotation = require('../../../../models/quotation');
const BusinessPlan = require('../../../../models/businessPlan');
const Referral = require('../../../../models/referral');
const ManagementRole = require('../../../../models/managementRole');
const Location = require('../../../../models/location');
const BusinessSetting = require('../../../../models/businessSetting');
const ExpenseCategory = require('../../../../models/expenseCategory');
const ReviewPoint = require('../../../../models/reviewPoint');
const LeadGen = require('../../../../models/leadGen');
const SuitePlan = require('../../../../models/suitePlan');
const { updateMany } = require('../../../../models/user');
const { filter, rangeRight } = require('lodash');
const Sales = require('../../../../models/sales');
const OutBoundLead = require('../../../../models/outBoundLead');
const Parchi = require('../../../../models/parchi');
const { clear } = require('console');



var secret = config.secret;
var Log_Level = config.Log_Level

// Function 


//
router.get('/bookings/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var bookings = [];
    var filters = [];
    var totalResult = 0;

    var role = await Management.findOne({ user: user, business: business }).exec();



    var date = new Date();
    var to = moment(date, "YYYY-MM-DD").subtract(1, 'days');

    var thumbnail = [];

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "user",
        foreignField: "_id",
        as: "user",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$user",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);

    var specification = {};
    specification['$lookup'] = {
        from: "Car",
        localField: "car",
        foreignField: "_id",
        as: "car",
    };
    filters.push(specification);

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "advisor",
        foreignField: "_id",
        as: "advisor",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$advisor",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);


    var page = 0;

    if (req.query.page == undefined) {
        page = 0;
    }
    else {
        page = req.query.page;
    }

    var page = Math.max(0, parseInt(page));

    // if (role.role == "Service Advisor") {
    //     var specification = {};
    //     // specification['advisor._id'] = mongoose.Types.ObjectId(role.user);
    //     specification['$match'] = {
    //         "advisor": mongoose.Types.ObjectId(role.user),

    //     }
    //     filters.push(specification);
    // }

    var queries = new Object();
    var sortBy = new Object();


    if (req.query.query) {
        var filters = [];
        var specification = {};
        specification['$lookup'] = {
            from: "User",
            localField: "user",
            foreignField: "_id",
            as: "user",
        };
        filters.push(specification);

        var specification = {};
        specification['$unwind'] = {
            path: "$user",
            preserveNullAndEmptyArrays: false
        };
        filters.push(specification);

        var specification = {};
        specification['$lookup'] = {
            from: "Car",
            localField: "car",
            foreignField: "_id",
            as: "car",
        };
        filters.push(specification);

        var specification = {};
        specification['$lookup'] = {
            from: "User",
            localField: "advisor",
            foreignField: "_id",
            as: "advisor",
        };
        filters.push(specification);

        var specification = {};
        specification['$unwind'] = {
            path: "$advisor",
            preserveNullAndEmptyArrays: false
        };
        filters.push(specification);


        var page = 0;

        if (req.query.page == undefined) {
            page = 0;
        }
        else {
            page = req.query.page;
        }

        var page = Math.max(0, parseInt(page));

        if (role.role == "Service Advisor") {
            var specification = {};
            specification['$match'] = {
                "advisor._id": mongoose.Types.ObjectId(role.user),

            }
            filters.push(specification);
        }
        //Abhinav New Role
        else if (role.role == "cr_assignee") {
            var specification = {};
            specification['$match'] = {
                "cr_assignee._id": mongoose.Types.ObjectId(role.user),

            }
            filters.push(specification);
        }
        //END
        req.query.query = req.query.query.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        var specification = {};
        specification['$match'] = {
            business: mongoose.Types.ObjectId(business),
            $or: [
                { 'status': { $regex: req.query.query, $options: 'i' } },
                { 'booking_no': { $eq: req.query.query } },
                { 'user.name': { $regex: req.query.query, $options: 'i' } },
                { 'user.contact_no': { $regex: req.query.query, $options: 'i' } },
                { 'car.title': { $regex: req.query.query, $options: 'i' } },
                { 'car.registration_no': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.name': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.contact_no': { $regex: req.query.query, $options: 'i' } },
                { 'insurance_info.insurance_company': { $regex: req.query.query, $options: 'i' } },
                {
                    "logs": {
                        $elemMatch: {
                            "status": { $regex: req.query.query, $options: 'i' }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "service": { $regex: req.query.query, $options: 'i' }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "parts": {
                                $elemMatch: {
                                    "item": { $regex: req.query.query, $options: 'i' },
                                }
                            }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "parts": {
                                $elemMatch: {
                                    "part_no": { $regex: req.query.query, $options: 'i' },
                                }
                            }
                        }
                    }
                },
            ]
        };
        filters.push(specification);

        var specification = {};
        specification['$sort'] = {
            updated_at: -1,
        };
        filters.push(specification);

        totalResult = await Booking.aggregate(filters);

        var specification = {};
        specification['$skip'] = config.perPage * page;
        filters.push(specification);

        var specification = {};
        specification['$limit'] = config.perPage;
        filters.push(specification);

        await Booking.aggregate(filters)
            .allowDiskUse(true)
            .cursor({ batchSize: 10 })
            .exec()
            .eachAsync(async function (booking) {
                if (booking.car.length > 0) {
                    var car = {
                        title: booking.car[0]._automaker + " " + booking.car[0]._model,
                        _id: booking.car[0]._id,
                        id: booking.car[0].id,
                        rc_address: booking.car[0].rc_address,
                        ic_address: booking.car[0].ic_address,
                        ic: booking.car[0].ic,
                        rc: booking.car[0].rc,
                        registration_no: booking.car[0].registration_no,
                    }
                }
                else {
                    var car = {
                        title: "",
                        _id: null,
                        id: null,
                        rc_address: "",
                        ic_address: "",
                        ic: "",
                        rc: "",
                        registration_no: "",
                    }
                }

                var serverTime = moment.tz(new Date(), req.headers['tz']);

                var startDate = moment(serverTime, "DD.MM.YYYY");
                var endDate = moment(booking.delivery_date, "DD.MM.YYYY");

                var days_left = endDate.diff(startDate, 'days');

                bookings.push({
                    _id: booking._id,
                    id: booking._id,
                    car: car,
                    user: {
                        name: booking.user.name,
                        _id: booking.user._id,
                        id: booking.user.id,
                        contact_no: booking.user.contact_no,
                        email: booking.user.email,
                    },
                    manager: null,
                    time_left: moment(booking.delivery_date).tz(req.headers['tz']).endOf('day').fromNow(),
                    days_left: days_left,
                    delivery_date: moment(booking.delivery_date).tz(req.headers['tz']).format('ll'),
                    delivery_time: booking.delivery_time,
                    status: _.startCase(booking.status),
                    _status: booking.status,
                    sub_status: booking.sub_status,
                    job_no: booking.job_no,
                    booking_no: booking.booking_no,
                    created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                    updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                });
            });

        res.status(200).json({
            responseCode: 200,
            responseMessage: to,
            responseInfo: {
                //role: role.role,
                //filters: filters,
                totalResult: totalResult.length
            },
            responseData: bookings,
        });
    }
    else if (req.query.by == "filter") {
        filters = [];
        if (role.role == "Service Advisor") {
            var specification = {};
            specification['advisor'] = mongoose.Types.ObjectId(role.user);
            // specification['$match'] = {
            //     "advisor._id": mongoose.Types.ObjectId(role.user),

            // }
            filters.push(specification);
        }
        if (req.query.status != "#") {
            if (req.query.status == "All") {
                var date = new Date();
                if (req.query.date) {
                    date = new Date(req.query.date);
                }
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["JobInitiated", "JobOpen", "Cancelled"] };
                // specification['status'] = "Confirmed";
                specification['is_services'] = true;
                // specification['is_services'] = true;
                specification['created_at'] = { $lte: to }
                // specification['created_at'] = { $lte: date };
                filters.push(specification);
            }
            else if (req.query.status == "Missed") {


                var misDate = new Date()

                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);

                specification['status'] = { $in: ["JobInitiated", "JobOpen"] };
                specification['status'] = "Confirmed";
                specification['is_services'] = true;
                // specification['date'] = { $lte: to }
                specification['date'] = { $lte: to }
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }


                // };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);


                // var specification = {};
                // specification['$match'] = {
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["JobInitiated", "JobOpen"] },
                //     status: "Confirmed",
                //     is_services: true,
                //     date: { "$lte": to },
                //     // updated_at: { "$gt": date, "$lte": end }

                // };
                // filters.push(specification);
            }

            else if (req.query.status == "Approval") {

                // if (req.query.date && req.query.end_date) {
                //     date = new Date(req.query.date)
                //     to = new Date(req.query.end_date)
                // console.log("Date .... ", date, to)
                // }

                // var specification = {};
                // specification['$match'] = {
                //     business: mongoose.Types.ObjectId(business)
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }


                // };
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] };
                //     specification['status'] = { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] };
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }


                // };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // console.log("Query By Filters", filters)
            }
            else if (req.query.status == "Cancelled") {
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Cancelled"] };
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }


                // };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['created_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // var specification = {};
                // specification['$match'] = {
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Cancelled"] },
                //     // updated_at: { "$gt": date, "$lte": end }

                // };
                // filters.push(specification);
            }
            else {
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Confirmed"] };
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }
                // };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // var specification = {};
                // specification['$match'] = {

                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Confirmed"] },
                //     // updated_at: { "$gt": date, "$lte": end }
                // };
                // filters.push(specification);
            }

            // var specification = {};
            // specification['$sort'] = {
            //     date: -1,
            //     // updated_at: -1,
            // };
            // filters.push(specification);


        }
        var query = {
            "$match": {
                "$and": filters
            }
        }

        // return res.json(query)


        totalResult = await Booking.aggregate([query]);
        // console.log("Totallllll Result  ", totalResult.length)

        // var specification = {};
        // specification['$skip'] = config.perPage * page;
        // filters.push(specification);

        // var specification = {};
        // specification['$limit'] = config.perPage;
        // filters.push(specification);
        var sortQuery = { $sort: { 'created_at': -1 } };
        await Booking.aggregate([
            query,
            sortQuery,
            { $skip: 10 * page },
            { $limit: 10 }
        ])
            .allowDiskUse(true)
            .cursor({ batchSize: 10 })

            .exec()
            .eachAsync(async function (booking) {
                // console.log(booking.car)
                // var car1 = await Car.findById(booking.car).exec();
                // var user = await User.findById(booking.user).exec();

                // console.log(car1.title)

                // console.log(user.name)
                // if (user) {
                //     var user1 = {
                //         name: user.name,
                //         _id: user._id,
                //         id: user.id,
                //         contact_no: user.contact_no,
                //         email: user.email,
                //     }

                // } else {
                //     var user1 = {
                //         name: "",
                //         _id: "",
                //         id: "",
                //         contact_no: "",
                //         email: "",
                //     }
                // }
                // var advisor = await User.findById(booking.advisor).exec();
                // if (advisor) {
                //     var advisor1 = {
                //         name: advisor.name,
                //         _id: advisor._id,
                //         id: advisor.id,
                //         contact_no: advisor.contact_no,
                //         email: advisor.email,
                //     }

                // } else {
                //     var advisor1 = {
                //         name: "",
                //         _id: "",
                //         id: "",
                //         contact_no: "",
                //         email: "",
                //     }
                // }
                // returnconsole.log("Crraaaaaaa ", booking.user.name)
                // console.log(booking._id)
                // console.log("cars length ...", car1)

                // if (car1) {
                //     var car = {
                //         title: car1._automaker + " " + car1._model,
                //         _id: car1._id,
                //         id: car1.id,
                //         rc_address: car1.rc_address,
                //         ic_address: car1.ic_address,
                //         ic: car1.ic,
                //         rc: car1.rc,
                //         registration_no: car1.registration_no,
                //     }
                // console.log("Car,,,,,,,,,,,,,,,,,,,,,,,,,", car)
                // }
                // else {
                //     var car = {
                //         title: "",
                //         _id: null,
                //         id: null,
                //         rc_address: "",
                //         ic_address: "",
                //         ic: "",
                //         rc: "",
                //         registration_no: "",
                //     }
                // }

                var car = null;
                var user = null;
                var manager = null;
                var advisor = null;
                var driver = null;
                var technician = null;
                var surveyor = null;


                ///////////////////////
                var AllBookings = await Booking.findById(booking._id)
                    .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'advisor', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email account_info business_info" } })
                    .populate({ path: 'business', populate: { path: 'user', select: "_id id name contact_no email business_info address bank_details" } })
                    .populate({ path: 'driver', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'technician', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'surveyor', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'car', select: '_id id title variant registration_no ic rc vin engine_no insurance_info manufacture_year purchased_year' })
                    .exec();
                if (AllBookings) {

                    if (AllBookings.car) {
                        car = {
                            title: AllBookings.car.title,
                            _id: AllBookings.car._id,
                            id: AllBookings.car.id,
                            vin: AllBookings.car.vin,
                            engine_no: AllBookings.car.engine_no,
                            registration_no: AllBookings.car.registration_no,
                            ic_address: AllBookings.car.ic_address,
                            rc_address: AllBookings.car.rc_address,
                            variant: AllBookings.car.variant,
                            manufacture_year: AllBookings.car.manufacture_year,
                            purchased_year: AllBookings.car.purchased_year,
                        }
                    }

                    if (AllBookings.manager) {
                        var email = "";
                        if (AllBookings.manager.email) {
                            email = AllBookings.manager.email;
                        }

                        manager = {
                            name: AllBookings.manager.name,
                            _id: AllBookings.manager._id,
                            id: AllBookings.manager.id,
                            contact_no: AllBookings.manager.contact_no,
                            email: email
                        }
                    }
                    if (AllBookings.user) {
                        var email = "";
                        if (AllBookings.user.email) {
                            email = AllBookings.user.email;
                        }

                        user = {
                            name: AllBookings.user.name,
                            _id: AllBookings.user._id,
                            id: AllBookings.user.id,
                            contact_no: AllBookings.user.contact_no,
                            email: email
                        }
                    }

                    if (AllBookings.advisor) {
                        var email = "";
                        if (AllBookings.advisor.email) {
                            email = AllBookings.advisor.email;
                        }
                        advisor = {
                            name: AllBookings.advisor.name,
                            _id: AllBookings.advisor._id,
                            id: AllBookings.advisor.id,
                            contact_no: AllBookings.advisor.contact_no,
                            email: email
                        }
                    }

                    if (AllBookings.driver) {
                        var email = "";
                        if (AllBookings.driver.email) {
                            email = AllBookings.driver.email;
                        }
                        driver = {
                            name: AllBookings.driver.name,
                            _id: AllBookings.driver._id,
                            id: AllBookings.driver.id,
                            contact_no: AllBookings.driver.contact_no,
                            email: email
                        }
                    }

                    if (AllBookings.technician) {
                        var email = "";
                        if (AllBookings.technician.email) {
                            email = AllBookings.technician.email;
                        }

                        technician = {
                            name: AllBookings.technician.name,
                            _id: AllBookings.technician._id,
                            id: AllBookings.technician.id,
                            contact_no: AllBookings.technician.contact_no,
                            email: email
                        }
                    }

                    if (AllBookings.surveyor) {
                        var email = "";
                        if (AllBookings.surveyor.email) {
                            email = AllBookings.surveyor.email;
                        }

                        surveyor = {
                            name: AllBookings.surveyor.name,
                            _id: AllBookings.surveyor._id,
                            id: AllBookings.surveyor.id,
                            contact_no: AllBookings.surveyor.contact_no,
                            email: email
                        }
                    }
                }
                /////////////////////// 
                var serverTime = moment.tz(new Date(), req.headers['tz']);

                var startDate = moment(serverTime, "DD.MM.YYYY");
                var endDate = moment(booking.delivery_date, "DD.MM.YYYY");

                var days_left = endDate.diff(startDate, 'days');

                bookings.push({
                    _id: booking._id,
                    id: booking._id,
                    car: car,
                    // user: user1,
                    // advisor: advisor1,
                    advisor: advisor,
                    manager: manager,
                    manager: manager,
                    driver: driver,
                    technician: technician,
                    surveyor: surveyor,
                    manager: null,
                    time_left: moment(booking.delivery_date).tz(req.headers['tz']).endOf('day').fromNow(),
                    days_left: days_left,
                    delivery_date: moment(booking.delivery_date).tz(req.headers['tz']).format('ll'),
                    delivery_time: booking.delivery_time,
                    status: _.startCase(booking.status),
                    _status: booking.status,
                    sub_status: booking.sub_status,
                    job_no: booking.job_no,
                    booking_no: booking.booking_no,
                    created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                    updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                });
            });

        res.status(200).json({
            responseCode: 200,
            responseMessage: to,
            responseInfo: {
                //role: role.role,
                //filters: filters,
                totalResult: totalResult.length
            },
            responseData: bookings,
        });
    }
    else {
        filters = [];
        if (role.role == "Service Advisor") {
            var specification = {};
            specification['advisor'] = mongoose.Types.ObjectId(role.user);
            // specification['$match'] = {
            //     "advisor._id": mongoose.Types.ObjectId(role.user),

            // }
            filters.push(specification);
        }
        if (req.query.status != "#") {
            if (req.query.status == "Missed") {
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);

                specification['status'] = { $in: ["Confirmed"] };
                // specification['status'] = "Confirmed";
                specification['is_services'] = true;
                // specification['date'] = { $lte: to }
                // console.log("  TO Date Mixed  =  " + to)
                var date_missed = new Date()
                var todayTo = new Date(date_missed.getFullYear(), date.getMonth(), date.getDate() + 1);
                var todayfrom = new Date(date_missed.getFullYear(), date.getMonth(), date.getDate() - 1);
                // { $lt: todayTo, $gt: todayfrom }
                // console.log("Missed date is less than to " + to)
                // console.log("todayTo = = " + todayTo)
                // console.log("todayfrom = = " + todayfrom)

                to = new Date();
                //console.log("tO NEW date = " + date_missed)
                // specification['date'] = { $lt: todayTo, $gt: todayfrom }
                specification['date'] = { $lt: date_missed }
                // specification['date'] = { $lt: to }
                // console.log
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["Approval", "EstimateRequested", "Approved", "Rework", "Pending"] },
                //     updated_at: { "$gt": date, "$lte": to }


                // };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);


                // var specification = {};
                // specification['$match'] = {
                //     business: mongoose.Types.ObjectId(business),
                //     status: { $in: ["JobInitiated", "JobOpen"] },
                //     status: "Confirmed",
                //     is_services: true,
                //     date: { "$lte": to },
                //     // updated_at: { "$gt": date, "$lte": end }

                // };
                // filters.push(specification);
            } else if (req.query.status == "Approval") {
                // console.log("Approval")

                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Approval", "Approved", "Rework"] };

                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // console.log("Query By Filters", filters)
            } else if (req.query.status == "Estimated") {
                // console.log("Approval")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["EstimateRequested"] };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // console.log("Query By Filters", filters)
            } else if (req.query.status == "Pending") {
                // console.log("Pending ")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Pending"] };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // console.log("Query By Filters", filters)
            } else if (req.query.status == "Confirmed") {
                // console.log("Confirmed ")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Confirmed"] };
                var newDate = new Date()
                var todayfrom = new Date(newDate.getFullYear(), date.getMonth(), date.getDate() - 1);
                var todayTo = new Date(newDate.getFullYear(), date.getMonth(), date.getDate() + 1);
                // specification['date'] = { $gt: todayfrom }
                specification['date'] = { $gt: newDate }

                // new Date(date_missed.getFullYear(), date.getMonth(), date.getDate() + 1);
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }
                filters.push(specification);
                // console.log("Query By Filters", filters)
            } else if (req.query.status == "Upcoming") {
                // console.log("upcoming ")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Confirmed"] };
                specification['date'] = { "$gt": new Date() }
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // console.log("Query By Filters", filters)
            } else if (req.query.status == "Cancelled") {

                // console.log("Cancelled")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Cancelled"] };

                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['created_at'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
            } else if (req.query.status == "Converted") {
                // console.log("Converted ")


                var jobsStatus = ["JobOpen", "In-Process", "CompleteWork", "QC", "StoreApproval", "Ready", "Completed", "Closed"]
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: jobsStatus };
                // specification['status'] = { $nin: ["Rejected", "Cancelled", "Inactive", "EstimateRequested", "Lost"] }
                // specification['status'] = { $nin: ["Rejected", "Cancelled", "Inactive"] }
                specification['converted'] = true;
                // specification['date'] = { "$gt": new Date() }
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log(date + "   = Date .... ", date, to)
                    // specification['updated_at'] = { "$gt": date, "$lte": to };
                    specification['date'] = { "$gt": date, "$lte": to };
                }

                filters.push(specification);
                // var query = {
                //     "$match": {
                //         "$and": filters
                //     }
                // }

                // // return res.json(query)
                // var count = 0
                // var Totalcount = 0

                // totalResult = await Booking.aggregate([query]);
                // console.log("Total Converted = " + totalResult.length)
                // var sortQuery = { $sort: { 'created_at': -1 } };
                // await Booking.aggregate([
                //     query,
                //     sortQuery,
                //     { $skip: 2000 * page },
                //     { $limit: 2000 }
                // ])
                //     .allowDiskUse(true)
                //     .cursor({ batchSize: 2000 })
                //     .exec()
                //     .eachAsync(async function (booking) {
                //         Totalcount = Totalcount + 1
                // console.log(Totalcount + "  ,Booking Id = " + booking._id)
                //         var car = null;
                //         var user = null;
                //         var manager = null;
                //         var advisor = null;
                //         var driver = null;
                //         var technician = null;
                //         var surveyor = null;
                //         var lead = null;

                //         var AllBookings = await Booking.findById(booking._id)
                //             .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                //             .populate({ path: 'advisor', populate: { path: 'user', select: "_id id name contact_no email" } })
                //             .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email account_info business_info" } })
                //             .populate({ path: 'business', populate: { path: 'user', select: "_id id name contact_no email business_info address bank_details" } })
                //             .populate({ path: 'driver', populate: { path: 'user', select: "_id id name contact_no email" } })
                //             .populate({ path: 'technician', populate: { path: 'user', select: "_id id name contact_no email" } })
                //             .populate({ path: 'surveyor', populate: { path: 'user', select: "_id id name contact_no email" } })
                //             .populate({ path: 'lead', select: "_id id name contact_no email source category" })
                //             .populate({ path: 'car', select: '_id id title variant registration_no ic rc vin engine_no insurance_info manufacture_year purchased_year' })
                //             .exec();


                //         if (AllBookings) {
                //             // if(AllBookings.lead.source){
                //             // if (AllBookings.lead.source != 'Booking') { }
                //             if (AllBookings.car) {
                //                 car = {
                //                     title: AllBookings.car.title,
                //                     _id: AllBookings.car._id,
                //                     id: AllBookings.car.id,
                //                     vin: AllBookings.car.vin,
                //                     engine_no: AllBookings.car.engine_no,
                //                     registration_no: AllBookings.car.registration_no,
                //                     ic_address: AllBookings.car.ic_address,
                //                     rc_address: AllBookings.car.rc_address,
                //                     variant: AllBookings.car.variant,
                //                     manufacture_year: AllBookings.car.manufacture_year,
                //                     purchased_year: AllBookings.car.purchased_year,
                //                 }
                //             }

                //             if (AllBookings.manager) {
                //                 var email = "";
                //                 if (AllBookings.manager.email) {
                //                     email = AllBookings.manager.email;
                //                 }

                //                 manager = {
                //                     name: AllBookings.manager.name,
                //                     _id: AllBookings.manager._id,
                //                     id: AllBookings.manager.id,
                //                     contact_no: AllBookings.manager.contact_no,
                //                     email: email
                //                 }
                //             }
                //             if (AllBookings.user) {
                //                 var email = "";
                //                 if (AllBookings.user.email) {
                //                     email = AllBookings.user.email;
                //                 }

                //                 user = {
                //                     name: AllBookings.user.name,
                //                     _id: AllBookings.user._id,
                //                     id: AllBookings.user.id,
                //                     contact_no: AllBookings.user.contact_no,
                //                     email: email
                //                 }
                //             }
                //             if (AllBookings.advisor) {
                //                 var email = "";
                //                 if (AllBookings.advisor.email) {
                //                     email = AllBookings.advisor.email;
                //                 }
                //                 advisor = {
                //                     name: AllBookings.advisor.name,
                //                     _id: AllBookings.advisor._id,
                //                     id: AllBookings.advisor.id,
                //                     contact_no: AllBookings.advisor.contact_no,
                //                     email: email
                //                 }
                //             }
                //             if (booking.lead) {
                //                 lead = {
                //                     name: booking.lead.name,
                //                     _id: booking.lead._id,
                //                     id: booking.lead.id,
                //                     contact_no: booking.lead.contact_no,
                //                     source: booking.lead.source,
                //                 }
                //             }
                //             if (AllBookings.driver) {
                //                 var email = "";
                //                 if (AllBookings.driver.email) {
                //                     email = AllBookings.driver.email;
                //                 }
                //                 driver = {
                //                     name: AllBookings.driver.name,
                //                     _id: AllBookings.driver._id,
                //                     id: AllBookings.driver.id,
                //                     contact_no: AllBookings.driver.contact_no,
                //                     email: email
                //                 }
                //             }
                //             if (AllBookings.technician) {
                //                 var email = "";
                //                 if (AllBookings.technician.email) {
                //                     email = AllBookings.technician.email;
                //                 }
                //                 technician = {
                //                     name: AllBookings.technician.name,
                //                     _id: AllBookings.technician._id,
                //                     id: AllBookings.technician.id,
                //                     contact_no: AllBookings.technician.contact_no,
                //                     email: email
                //                 }
                //             }
                //             if (AllBookings.surveyor) {
                //                 var email = "";
                //                 if (AllBookings.surveyor.email) {
                //                     email = AllBookings.surveyor.email;
                //                 }
                //                 surveyor = {
                //                     name: AllBookings.surveyor.name,
                //                     _id: AllBookings.surveyor._id,
                //                     id: AllBookings.surveyor.id,
                //                     contact_no: AllBookings.surveyor.contact_no,
                //                     email: email
                //                 }
                //             }

                //         }
                //         var serverTime = moment.tz(new Date(), req.headers['tz']);

                //         var startDate = moment(serverTime, "DD.MM.YYYY");
                //         var endDate = moment(booking.delivery_date, "DD.MM.YYYY");

                //         var days_left = endDate.diff(startDate, 'days');
                // console.log("Contact NO :" + user.contact_no)
                //         if (user) {
                // console.log("Contact NO :" + user.contact_no)
                //             var firstLead = await Lead.findOne({ business: business, contact_no: user.contact_no }).sort({ created_at: 1 }).exec();
                //             // return res.json({ abhi: firstLead })
                //             // var leads = firstLead.pop();
                //             // return res.json({ abhi: leads })
                //             if (firstLead) {
                //                 lead = {
                //                     name: firstLead.name,
                //                     // _id: firstLead._id,
                //                     // id: firstLead.id,
                //                     contact_no: firstLead.contact_no,
                //                     source: firstLead.source,
                //                 }
                //             }
                //         } else {
                // console.log("NOt Found   } ")
                //         }
                //         if (AllBookings.lead) {

                //             if (AllBookings.lead.source != 'Booking' && AllBookings.lead.source != '' && AllBookings.lead.source != 'PSF') {
                //                 // totalResult=
                // console.log(" Lead spource =" + AllBookings.lead.source)
                //                 count = count + 1
                // console.log(count)
                //                 bookings.push({
                //                     _id: booking._id,
                //                     id: booking._id,
                //                     car: car,
                //                     user: user,
                //                     advisor: advisor,
                //                     lead: lead,
                //                     manager: manager,
                //                     manager: manager,
                //                     driver: driver,
                //                     technician: technician,
                //                     surveyor: surveyor,
                //                     time_left: moment(booking.delivery_date).tz(req.headers['tz']).endOf('day').fromNow(),
                //                     days_left: days_left,
                //                     delivery_date: moment(booking.delivery_date).tz(req.headers['tz']).format('ll'),
                //                     delivery_time: booking.delivery_time,
                //                     status: _.startCase(booking.status),
                //                     _status: booking.status,
                //                     sub_status: booking.sub_status,
                //                     job_no: booking.job_no,
                //                     booking_no: booking.booking_no,
                //                     created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                //                     updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                //                 });
                // console.log("End One")
                //             } else {
                // console.log("Data Walk-in" + AllBookings.lead.contact_no)
                //             }

                //         }
                //     });

                // return res.status(200).json({
                //     responseCode: 200,
                //     responseMessage: to,
                //     category: req.query.status,
                //     responseInfo: {
                //         //role: role.role,
                //         //filters: filters,
                //         query: query,
                //         // totalResult: totalResult.length
                //         totalResult: count
                //     },
                //     responseData: bookings,
                // });
                // console.log("Query By Filters", filters)
            } else {
                // console.log("NO Condition matched")
                var specification = {};
                specification['business'] = mongoose.Types.ObjectId(business);
                specification['status'] = { $in: ["Confirmed"] };
                if (req.query.date && req.query.end_date) {
                    date = new Date(req.query.date)
                    to = new Date(req.query.end_date)
                    // console.log("Date .... ", date, to)
                    specification['updated_at'] = { "$gt": date, "$lte": to };
                }
                filters.push(specification);
            }
        }
        var query = {
            "$match": {
                "$and": filters
            }
        }


        totalResult = await Booking.aggregate([query]);
        // console.log("Totallllll Result  ", totalResult.length)

        // var specification = {};
        // specification['$skip'] = config.perPage * page;
        // filters.push(specification);

        // var specification = {};
        // specification['$limit'] = config.perPage;
        // filters.push(specification);
        var sortQuery = { $sort: { 'created_at': -1 } };
        await Booking.aggregate([
            query,
            sortQuery,
            { $skip: 10 * page },
            { $limit: 10 }
        ])
            .allowDiskUse(true)
            .cursor({ batchSize: 10 })
            .exec()
            .eachAsync(async function (booking) {
                var car = null;
                var user = null;
                var manager = null;
                var advisor = null;
                var driver = null;
                var technician = null;
                var surveyor = null;
                var lead = null;
                // console.log("Booking Id = " + booking._id)
                // if (booking.lead) {
                var AllBookings = await Booking.findById(booking._id)
                    .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'advisor', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email account_info business_info" } })
                    .populate({ path: 'business', populate: { path: 'user', select: "_id id name contact_no email business_info address bank_details" } })
                    .populate({ path: 'driver', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'technician', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'surveyor', populate: { path: 'user', select: "_id id name contact_no email" } })
                    .populate({ path: 'car', select: '_id id title variant registration_no ic rc vin engine_no insurance_info manufacture_year purchased_year' })
                    .exec();
                // console.log("Booking End At end " + booking._id)
                // }
                if (AllBookings) {

                    if (AllBookings.car) {
                        car = {
                            title: AllBookings.car.title,
                            _id: AllBookings.car._id,
                            id: AllBookings.car.id,
                            vin: AllBookings.car.vin,
                            engine_no: AllBookings.car.engine_no,
                            registration_no: AllBookings.car.registration_no,
                            ic_address: AllBookings.car.ic_address,
                            rc_address: AllBookings.car.rc_address,
                            variant: AllBookings.car.variant,
                            manufacture_year: AllBookings.car.manufacture_year,
                            purchased_year: AllBookings.car.purchased_year,
                        }
                    }

                    if (AllBookings.manager) {
                        var email = "";
                        if (AllBookings.manager.email) {
                            email = AllBookings.manager.email;
                        }

                        manager = {
                            name: AllBookings.manager.name,
                            _id: AllBookings.manager._id,
                            id: AllBookings.manager.id,
                            contact_no: AllBookings.manager.contact_no,
                            email: email
                        }
                    }
                    if (AllBookings.user) {
                        var email = "";
                        if (AllBookings.user.email) {
                            email = AllBookings.user.email;
                        }

                        user = {
                            name: AllBookings.user.name,
                            _id: AllBookings.user._id,
                            id: AllBookings.user.id,
                            contact_no: AllBookings.user.contact_no,
                            email: email
                        }
                    }

                    if (AllBookings.advisor) {
                        var email = "";
                        if (AllBookings.advisor.email) {
                            email = AllBookings.advisor.email;
                        }
                        advisor = {
                            name: AllBookings.advisor.name,
                            _id: AllBookings.advisor._id,
                            id: AllBookings.advisor.id,
                            contact_no: AllBookings.advisor.contact_no,
                            email: email
                        }
                    }
                    // var lead = await Lead.findById(booking.lead).exec();
                    // if (booking.lead) {
                    //     lead = {
                    //         name: lead.name,
                    //         _id: lead._id,
                    //         id: lead.id,
                    //         contact_no: lead.contact_no,
                    //         source: lead.source,
                    //     }
                    // }
                    // if (booking.lead) {
                    //     lead = {
                    //         name: booking.lead.name,
                    //         _id: booking.lead._id,
                    //         id: booking.lead.id,
                    //         contact_no: booking.lead.contact_no,
                    //         source: booking.lead.source,
                    //     }
                    // }
                    if (AllBookings.driver) {
                        var email = "";
                        if (AllBookings.driver.email) {
                            email = AllBookings.driver.email;
                        }
                        driver = {
                            name: AllBookings.driver.name,
                            _id: AllBookings.driver._id,
                            id: AllBookings.driver.id,
                            contact_no: AllBookings.driver.contact_no,
                            email: email
                        }
                    }
                    if (AllBookings.technician) {
                        var email = "";
                        if (AllBookings.technician.email) {
                            email = AllBookings.technician.email;
                        }
                        technician = {
                            name: AllBookings.technician.name,
                            _id: AllBookings.technician._id,
                            id: AllBookings.technician.id,
                            contact_no: AllBookings.technician.contact_no,
                            email: email
                        }
                    }
                    if (AllBookings.surveyor) {
                        var email = "";
                        if (AllBookings.surveyor.email) {
                            email = AllBookings.surveyor.email;
                        }
                        surveyor = {
                            name: AllBookings.surveyor.name,
                            _id: AllBookings.surveyor._id,
                            id: AllBookings.surveyor.id,
                            contact_no: AllBookings.surveyor.contact_no,
                            email: email
                        }
                    }

                }
                var serverTime = moment.tz(new Date(), req.headers['tz']);

                var startDate = moment(serverTime, "DD.MM.YYYY");
                var endDate = moment(booking.delivery_date, "DD.MM.YYYY");

                var days_left = endDate.diff(startDate, 'days');
                // console.log("Contact NO :" + user.contact_no)
                if (user) {
                    // console.log("Contact NO :" + user.contact_no)
                    var firstLead = await Lead.findOne({ business: business, contact_no: user.contact_no }).sort({ created_at: 1 }).exec();
                    // return res.json({ abhi: firstLead })
                    // var leads = firstLead.pop();
                    // return res.json({ abhi: leads })
                    if (firstLead) {
                        lead = {
                            name: firstLead.name,
                            _id: firstLead._id,
                            id: firstLead.id,
                            contact_no: firstLead.contact_no,
                            source: firstLead.source,
                        }
                    }
                } else {
                    // console.log("NOt Found   } ")
                }

                // if ()
                bookings.push({
                    _id: booking._id,
                    id: booking._id,
                    car: car,
                    user: user,
                    advisor: advisor,
                    lead: lead,
                    manager: manager,
                    manager: manager,
                    driver: driver,
                    technician: technician,
                    surveyor: surveyor,
                    time_left: moment(booking.delivery_date).tz(req.headers['tz']).endOf('day').fromNow(),
                    date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                    days_left: days_left,
                    delivery_date: moment(booking.delivery_date).tz(req.headers['tz']).format('ll'),
                    delivery_time: booking.delivery_time,
                    status: _.startCase(booking.status),
                    _status: booking.status,
                    sub_status: booking.sub_status,
                    job_no: booking.job_no,
                    booking_no: booking.booking_no,
                    created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                    updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                });
            });

        res.status(200).json({
            responseCode: 200,
            responseMessage: to,
            category: req.query.status,
            responseInfo: {
                //role: role.role,
                //filters: filters,
                // query: query,
                totalResult: totalResult.length
            },
            responseData: bookings,
        });

    }
});

router.get('/user/bookings/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var bookings = [];
    var totalResult = 0;

    var role = await Management.findOne({ user: user, business: business }).exec();
    // console.log(role)
    if (req.query.page == undefined) {
        var page = 0;
    } else {
        var page = req.query.page;
    }

    var page = Math.max(0, parseInt(page));
    var queries = new Object();
    var sortBy = new Object();

    if (req.query.by == "user") {
        queries = {
            user: req.query.query,
            status: { "$in": ["Cancelled", "Confirmed", "Pending", "Rejected", "Closed", "Completed", "Failure", "EstimateRequested", "In-Process", "Dissatisfied", "Approval", "Approved", "Failed", "JobInitiated", "JobOpen", "EstimatePrepared", "ApprovalAwaited", "StartWork", "CloseWork", "CompleteWork", "QC", "Rework"] }
        }
    }

    if (req.query.by == "contact") {
        var user = await User.findOne({ contact_no: req.query.query }).exec();
        queries = {
            user: user._id,
            status: { "$in": ["Cancelled", "Confirmed", "Pending", "Rejected", "Closed", "Completed", "Failure", "EstimateRequested", "In-Process", "Dissatisfied", "Approval", "Approved", "Failed", "JobInitiated", "JobOpen", "EstimatePrepared", "ApprovalAwaited", "StartWork", "CloseWork", "CompleteWork", "QC", "Rework"] }
        }
    }

    totalResult = await Booking.find(queries).count().exec();

    await Booking.find(queries)
        .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no" } })
        .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no" } })
        .populate({ path: 'car', select: '_id id title registration_no ic rc _automaker _model', populate: { path: 'thumbnails' } })
        .sort({ updated_at: -1 }).skip(config.perPage * page).limit(config.perPage)
        .cursor().eachAsync(async (booking) => {

            if (booking.address) {
                var address = await Address.findOne({ _id: booking.address }).exec();
            } else {
                var address = {};
            }
            if (booking.car.thumbnails[0]) {
                var thumbnail = [booking.car.thumbnails[0]];
            } else {
                var thumbnail = []
            }
            bookings.push({
                _id: booking._id,
                id: booking._id,
                car: {
                    title: booking.car._automaker + " " + booking.car._model,
                    _id: booking.car._id,
                    id: booking.car.id,
                    ic: booking.car.ic,
                    rc: booking.car.rc,
                    rc_address: booking.car.rc_address,
                    ic_address: booking.car.ic_address,
                    registration_no: booking.car.registration_no,
                    thumbnails: thumbnail
                },
                user: {
                    name: booking.user.name,
                    _id: booking.user._id,
                    id: booking.user.id,
                    contact_no: booking.user.contact_no
                },
                manager: booking.manager,
                services: booking.services,
                convenience: booking.convenience,
                date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                time_slot: booking.time_slot,
                status: booking.status,
                booking_no: booking.booking_no,
                estimation_requested: booking.estimation_requested,
                address: address,
                payment: booking.payment,
                customer_requirements: booking.customer_requirements,
                txnid: booking.txnid,
                __v: booking.__v,
                updated_at: booking.updated_at,
                updated_at: booking.updated_at,
            });

        });

    res.status(200).json({
        responseCode: 200,
        responseMessage: "",
        responseData: bookings,
        responseInfo: {
            totalResult: totalResult
        }
    });
});

router.get('/my/bookings/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);

    var user = req.headers['business'];
    var orders = [];

    var country = await Country.findOne({ timezone: { $in: req.headers['tz'] } }).exec();

    if (req.query.page == undefined) {
        var page = 0;
    }
    else {
        var page = req.query.page;
    }

    var page = Math.max(0, parseInt(page));

    var sortBy = new Object();

    if (req.query.sortBy) {
        if (req.query.sortBy == "date") {
            sortBy = { date: -1 }
        }
    }
    else {
        sortBy = { created_at: -1 }
    }

    var thumbnail = []

    await Booking.find({ 'user': user, status: { $in: ["Cancelled", "Confirmed", "Pending", "Rejected", "Closed", "Completed", "Failure", "In-Process", "Dissatisfied", "Approval", "Approved", "Failed", "JobInitiated", "JobOpen", "EstimateRequested", "ApprovalAwaited", "StartWork", "CloseWork", "CompleteWork", "QC", "StoreApproval", "GMApproval", "Rework", "Ready"] }, is_services: true })
        .populate({ path: 'business', populate: { path: 'user', select: "_id id name contact_no" } })
        .populate({ path: 'car', select: '_id id title registration_no ic rc', populate: { path: 'thumbnails' } })
        .sort(sortBy).skip(config.perPage * page).limit(config.perPage)
        .cursor().eachAsync(async (booking) => {

            var car = null;
            var address = await Address.findOne({ _id: booking.address }).exec();
            if (booking.car) {
                var thumbnail = []
                if (booking.car.thumbnails[0]) {
                    var thumbnail = [booking.car.thumbnails[0]];
                }

                car = {
                    title: booking.car.title,
                    _id: booking.car._id,
                    id: booking.car.id,
                    ic: booking.car.ic,
                    rc: booking.car.rc,
                    ic_address: booking.car.ic_address,
                    rc_address: booking.car.rc_address,
                    registration_no: booking.car.registration_no,
                    thumbnails: thumbnail
                };
            }

            orders.push({
                _id: booking._id,
                id: booking._id,
                car: car,
                business: {
                    name: booking.business.name,
                    _id: booking.business._id,
                    id: booking.business.id,
                    contact_no: booking.business.contact_no
                },
                services: booking.services,
                convenience: booking.convenience,
                date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                time_slot: booking.time_slot,
                status: booking.status,
                booking_no: booking.booking_no,
                job_no: booking.job_no,
                payment: booking.payment,
                due: booking.due,
                address: address,
                txnid: booking.txnid,
                __v: booking.__v,
                address: address,
                created_at: booking.updated_at,
                updated_at: booking.updated_at,
                listing: "booking",
            });

        });
    // result = await q.all(businessFunctions.removeDublicateDoumnets(orders, "contact_no"));
    //     var orders = [...new Set(orders.map(item => item.booking_no ))];
    // console.log(orders);
    res.status(200).json({
        responseCode: 200,
        responseMessage: country.countryName,
        responseData: orders,
        responseInfo: {
            totalResult: await Booking.find({ 'user': user, status: { $in: ["Cancelled", "Confirmed", "Pending", "Rejected", "Closed", "Completed", "Failure", "In-Process", "Dissatisfied", "Approval", "Approved", "Failed", "JobInitiated", "JobOpen", "EstimatePrepared", "ApprovalAwaited", "StartWork", "CloseWork", "CompleteWork", "QC", "StoreApproval", "GMApproval", "Rework", "Ready"] }, is_services: true }).count().exec()
        }
    });
});

router.get('/assets/get', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var business = req.headers['business'];

        var booking = await Booking.findById(req.query.booking).exec();
        if (booking) {
            var a = booking.assets;
            if (a.length > 0) {
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Asset",
                    responseData: booking.assets,
                })
            }
            else {
                var assets = [];
                await Asset.find({})
                    .cursor().eachAsync(async (v) => {
                        assets.push({
                            value: v.value,
                            checked: false
                        })
                    })

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Asset",
                    responseData: assets,
                })
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            })
        }
    }
});

router.put('/assets/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = await User.findById(req.headers['business']).exec();

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var address = await Address.findOne({ _id: req.body.address, user: booking.user }).exec();
            if (address) {
                var status = booking.status;
                var sub_status = "Assets";

                if (req.body.web == true) {
                    var status = "JobOpen";
                    var sub_status = "JobOpen";
                }

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, sub_status: sub_status, assets: req.body.assets, other_assets: req.body.other, convenience: req.body.convenience, address: req.body.address, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Server",
                            responseData: err,
                        });
                    }
                    else {
                        if (req.body.web) {
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "JobOpen",
                                activity: "JobOpen",
                            };
                            fun.bookingLog(req.body.booking, activity);
                        }

                        var update = await Booking.findById(booking._id).exec();

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Asset",
                            responseData: update.assets
                        });
                    }
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Address not found",
                    responseData: {},
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            });
        }
    }
});

router.put('/job/assets/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];


        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var data = {
                other_assets: req.body.other,
                assets: req.body.assets,
                updated_at: new Date()
            }

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: true }, function (err, doc) { });

            var activity = {
                user: loggedInDetails._id,
                name: loggedInDetails.name,
                stage: "Job",
                activity: "AssetsUpdate",
            };

            fun.bookingLog(booking._id, activity);

            var updated = await Booking.findById(booking._id).exec();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Assets updated...",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.post('/owner/car/add', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var business = req.headers['business'];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var currentDate = new Date();
    var booking = null;
    var user = await User.findOne({ _id: req.body.user }).exec();
    var advisor = await q.all(businessFunctions.getAdvisor(loggedInDetails._id, business));
    if (user) {
        var customer_requirements = []
        if (req.body.requirement) {
            customer_requirements.push({
                user: user,
                requirement: req.body.requirement,
            });
        }

        var expire = "";
        if (req.body.expire) {
            expire = new Date(req.body.expire).toISOString();
        }
        var insurance_info = {
            policy_holder: req.body.policy_holder,
            insurance_company: req.body.insurance_company,
            policy_no: req.body.policy_no,
            premium: req.body.premium,
            expire: expire,
            branch: "",
            gstin: "",
            claim: false,
            cashless: false,
            accident_place: "",
            accident_date: null,
            accident_time: "",
            accident_cause: "",
            driver_accident: "",
            spot_survey: "",
            fir: "",
            policy_type: "",
            claim_no: "",
        };

        var rg = req.body.registration_no;
        req.body.registration_no = rg.replace(/ /g, '');

        var checkCar = await Car.findOne({ registration_no: req.body.registration_no, status: true }).populate({ path: 'user', select: 'name username avatar avatar_address account_info' }).exec();

        if (checkCar) {
            Car.findOneAndUpdate({
                _id: checkCar._id
            },
                {
                    $set: {
                        odometer: req.body.odometer,
                        fuel_level: req.body.fuel_level,
                        vin: req.body.vin,
                        engine_no: req.body.engine_no,
                        insurance_info: insurance_info
                    }
                }, {
                new: false
            }, function (err, doc) { });

            var checkBooking = await Booking.findOne({ car: checkCar._id, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] } }).exec();

            if (checkBooking) {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "This job already exists in " + checkBooking.status,
                    responseData: {}
                })
            }
            else {
                var payment = {
                    payment_mode: "",
                    payment_status: "Pending",
                    discount_type: "",
                    coupon: "",
                    coupon_type: "",
                    discount: 0,
                    discount_total: 0,
                    part_cost: 0,
                    labour_cost: 0,
                    paid_total: 0,
                    total: 0,
                    discount_applied: false,
                    transaction_id: "",
                    transaction_date: "",
                    transaction_status: "",
                    transaction_response: ""
                };

                var bookingData = {
                    package: null,
                    car: checkCar._id,
                    advisor: advisor,
                    manager: null,
                    business: business,
                    user: user._id,
                    odometer: req.body.odometer,
                    fuel_level: req.body.fuel_level,
                    services: [],
                    job_no: new Date().valueOf(),
                    customer_requirements: customer_requirements,
                    booking_no: Math.round(+new Date() / 1000) + Math.round((Math.random() * 9999) + 1),
                    date: new Date(),
                    time_slot: "",
                    convenience: "",
                    status: "JobInitiated",
                    sub_status: "JobInitiated",
                    estimation_requested: false,
                    insurance_info: insurance_info,
                    payment: payment,
                    lead: null,
                    is_services: true,
                    started_at: new Date(),
                    created_at: new Date(),
                    updated_at: new Date()
                };

                Booking.create(bookingData).then(async function (b) {
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: "NewJob",
                        activity: "JobInititated",
                    };

                    fun.bookingLog(b._id, activity);

                    var notify = {
                        receiver: [b.user],
                        activity: "jobcard",
                        tag: "JobInititated",
                        source: b._id,
                        sender: b.business,
                        points: 0
                    }

                    fun.newNotification(notify);
                    //event.jobSms(notify);

                    event.zohoLead(b._id);
                    // event.zohoOutboundLead(b._id);
                    businessFunctions.zohoOutboundLead(b._id);
                    // event.zohoLead(b._id);

                    let jobUser = await User.findOne({ _id: mongoose.Types.ObjectId(b.user) }).exec()
                    whatsAppEvent.jobInit(jobUser.contact_no, b.car, b.booking_no, business)
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Car has been added",
                        responseData: {
                            car: checkCar._id,
                            user: user._id,
                            booking: b._id
                        }
                    });
                });
            }
        }
        else {
            if (req.body.variant == "" || req.body.variant == null) {
                return res.status(422).json({
                    responseCode: 422,
                    responseMessage: "Car not found. Please select a car.",
                    responseData: {}
                });
            }
            else {
                var variant = await Variant.findOne({ _id: req.body.variant }).select('-service_schedule').exec();
                if (variant) {
                    var rg = req.body.registration_no;
                    req.body.registration_no = rg.replace(/ /g, '');
                    var reg = await Car.find({ registration_no: req.body.registration_no, status: true }).count().exec();
                    if (reg == 0) {
                        var carData = {};
                        var rg = req.body.registration_no;

                        carData.reg_no_copy = rg.replace(/\s/g, '');
                        carData.geometry = [0, 0];
                        carData.created_at = currentDate;
                        carData.updated_at = currentDate;
                        carData.variant = variant._id;
                        carData._variant = variant.value;
                        carData.title = variant.variant;
                        carData.automaker = variant.automaker;
                        carData._automaker = variant._automaker;
                        carData.model = variant.model;
                        carData._model = variant._model;
                        carData.segment = variant.segment;
                        carData.user = user._id;
                        carData.registration_no = req.body.registration_no;
                        carData.fuel_type = variant.specification.fuel_type;
                        carData.transmission = variant.specification.type;
                        carData.odometer = req.body.odometer
                        carData.fuel_level = req.body.fuel_level;
                        carData.vin = req.body.vin;
                        carData.engine_no = req.body.engine_no;
                        carData.insurance_info = insurance_info;
                        carData.carId = Math.round(+new Date() / 1000) + Math.round((Math.random() * 9999) + 1);

                        Car.create(carData).then(async function (car) {
                            User.findOneAndUpdate({ _id: user._id }, {
                                $push: {
                                    "cars": car._id
                                }
                            }, { new: true }, async function (err, doc) {
                                if (err) {
                                    res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Error Occurred",
                                        responseData: err
                                    })
                                }
                                else {
                                    fun.addMember(user._id, variant.model);

                                    var payment = {
                                        payment_mode: "",
                                        payment_status: "Pending",
                                        discount_type: "",
                                        coupon: "",
                                        coupon_type: "",
                                        discount: 0,
                                        discount_total: 0,
                                        part_cost: 0,
                                        labour_cost: 0,
                                        paid_total: 0,
                                        total: 0,
                                        discount_applied: false,
                                        transaction_id: "",
                                        transaction_date: "",
                                        transaction_status: "",
                                        transaction_response: ""
                                    };

                                    var bookingData = {
                                        package: null,
                                        car: car._id,
                                        advisor: advisor,
                                        manager: null,
                                        business: business,
                                        user: user._id,
                                        services: [],
                                        job_no: new Date().valueOf(),
                                        customer_requirements: customer_requirements,
                                        booking_no: Math.round(+new Date() / 1000) + Math.round((Math.random() * 9999) + 1),
                                        date: new Date(),
                                        time_slot: "",
                                        convenience: "",
                                        status: "JobInitiated",
                                        sub_status: "JobInitiated",
                                        odometer: req.body.odometer,
                                        fuel_level: req.body.fuel_level,
                                        estimation_requested: false,
                                        payment: payment,
                                        address: req.body.address,
                                        lead: null,
                                        is_services: true,
                                        insurance_info: insurance_info,
                                        started_at: new Date(),
                                        created_at: new Date(),
                                        updated_at: new Date()
                                    };

                                    Booking.create(bookingData).then(async function (b) {



                                        var activity = {
                                            user: loggedInDetails._id,
                                            name: loggedInDetails.name,
                                            stage: "NewJob",
                                            activity: "JobInititated",
                                        };

                                        fun.bookingLog(b._id, activity);

                                        var notify = {
                                            receiver: [b.user],
                                            activity: "jobcard",
                                            tag: "JobInititated",
                                            source: b._id,
                                            sender: b.business,
                                            points: 0
                                        }

                                        fun.newNotification(notify);
                                        //event.jobSms(notify);

                                        event.zohoLead(b._id);
                                        let jobUser = await User.findOne({ _id: mongoose.Types.ObjectId(b.user) }).exec()
                                        whatsAppEvent.jobInit(jobUser.contact_no, b.car, b.booking_no, business)
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "Car has been added",
                                            responseData: {
                                                car: car._id,
                                                user: user._id,
                                                booking: b._id
                                            }
                                        });
                                    });
                                }
                            })
                        });
                    }
                    else {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "registration no already exist",
                            responseData: {}
                        });
                    }
                }
                else {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Unprocessable Entity",
                        responseData: {}
                    });
                }
            }
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "User Not Found",
            responseData: {}
        })
    }
});

router.post('/booking/convenience/add', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];

    var loggedInDetails = await User.findById(decoded.user).exec();
    if (loggedInDetails) {
        var management = await Management.findOne({ user: decoded.user, business: business, role: "Admin" }).populate('user').exec();
        if (management) {
            var body = req.body;
            if (body.length > 0) {
                for (var i = 0; i < body.length; i++) {
                    var businessConvenience = await BusinessConvenience.findOne({ business: business, convenience: body[i].convenience }).exec();
                    if (businessConvenience) {
                        var data = {
                            charges: body[i].charges,
                            updated_at: new Date()
                        }

                        BusinessConvenience.findOneAndUpdate({ _id: businessConvenience._id }, { $set: data }, { new: false }, async function (err, doc) {
                            if (err) {
                                return res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: err
                                });
                            }
                        });
                    }
                    else {
                        var data = {
                            business: business,
                            convenience: body[i].convenience,
                            charges: body[i].charges,
                            created_at: new Date(),
                            updated_at: new Date()
                        }


                        BusinessConvenience.create(data)
                            .then(async function (e) {
                            });
                    }
                }
                // business: business 
                var businessConvenience = await BusinessConvenience.find({}).exec();

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Conveniences",
                    responseData: businessConvenience
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Convenience Required",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Authorization Error",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "User not found",
            responseData: {}
        });
    }
});

router.get('/booking/conveniences/get', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];

    // business: business
    var businessConvenience = await BusinessConvenience.find({}).exec();
    if (businessConvenience.length > 0) {
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Conveniences",
            responseData: businessConvenience
        });
    }
    else {
        // business: null
        var businessConvenience = await BusinessConvenience.find({}).exec();
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Conveniences",
            responseData: businessConvenience
        });
    }
});

router.get('/booking/convenience', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var a = null;
    var u = null;
    var c = "";
    var booking = await Booking.findById(req.query.booking).exec();
    if (booking) {
        if (booking.address) {
            a = booking.address
        }

        if (booking.convenience) {
            c = booking.convenience
        }
    }

    var addresses = [];
    await Address.find({ user: decoded.user })
        .cursor().eachAsync(async (address) => {
            if (address._id.equals(a)) {
                var checked = true
            }
            else {
                var checked = false
            }

            addresses.push({
                _id: address._id,
                id: address.id,
                user: address.user,
                address: address.address,
                area: address.area,
                landmark: address.landmark,
                zip: address.zip,
                city: address.city,
                state: address.state,
                checked: checked
            });
        });

    var conveniences = [];
    // business: req.query.business
    await BusinessConvenience.find({})
        .cursor().eachAsync(async (convenience) => {
            if (convenience.convenience == c) {
                var checked = true
            }
            else {
                var checked = false
            }

            conveniences.push({
                _id: convenience._id,
                id: convenience.id,
                convenience: convenience.convenience,
                charges: convenience.charges,
                business: convenience.business,
                checked: checked
            });
        });


    res.status(200).json({
        responseCode: 200,
        responseMessage: "",
        responseData: {
            address: addresses,
            convenience: conveniences
        }
    });
});

router.post('/bookings/time-slot/', xAccessToken.token, async function (req, res, next) {
    var rules = {
        business: 'required',
        date: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Service not mention",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var business = req.body.business;
        var date = new Date(new Date(req.body.date).setHours(0, 0, 0, 0));
        var next = new Date(new Date(req.body.date).setHours(0, 0, 0, 0));
        next.setDate(date.getDate() + 1);

        var check = await BookingTiming.find({ business: business }).count().exec();

        if (req.body.booking) {
            var booking = await Booking.findById(req.body.booking).exec();
            if (booking) {
                var body = booking.services;
                if (body.length <= 0) {
                    body.push({
                        type: "services"
                    });
                }
            }
        } else if (req.body.label) {
            var body = await q.all(businessFunctions.getPackageService(req.body.label));
        } else {
            var body = req.body.services;
        }

        body = _.uniqBy(body, 'type');

        var slots = [];


        for (var i = 0; i < body.length; i++) {

            if (body[i].type == "addOn") {
                body[i].type = "services"
            }


            if (check > 0) {
                await BookingTiming.find({ business: business, category: body[i].type })
                    .sort({ sort: 1 })
                    .cursor().eachAsync(async (timing) => {
                        var slot = await Booking.find({
                            time_slot: timing.slot,
                            is_services: true,
                            business: business,
                            date: { $gte: date, $lt: next },
                            services: { $elemMatch: { type: body[i].type } },
                            status: { $nin: ["Inactive", "Rejected", "Cancelled", "Completed", "Closed"] },
                        }).count().exec();

                        if (slot < timing.booking_per_slot) {
                            slot = timing.booking_per_slot - slot
                            slots.push({
                                slot: timing.slot,
                                count: slot,
                                sort: timing.sort,
                                type: timing.category,
                                status: true
                            });
                        }
                        else {
                            slots.push({
                                slot: timing.slot,
                                count: slot,
                                sort: timing.sort,
                                type: timing.category,
                                status: false
                            });
                        }
                    });
            }
            else {
                var a = await BookingTiming.find({ business: null, category: body[i].type }).exec();

                await BookingTiming.find({ business: null, category: body[i].type })
                    .sort({ sort: 1 })
                    .cursor().eachAsync(async (timing) => {
                        // console.log(timing)
                        var slot = await Booking.find({
                            time_slot: timing.slot,
                            is_services: true,
                            business: business,
                            date: { $gte: date, $lt: next },
                            services: { $elemMatch: { type: body[i].type } },
                            status: { $nin: ["Inactive", "Rejected", "Cancelled", "Completed", "Closed"] },
                        }).count().exec();

                        if (slot < timing.booking_per_slot) {
                            slot = timing.booking_per_slot - slot
                            slots.push({
                                slot: timing.slot,
                                count: slot,
                                sort: timing.sort,
                                type: timing.category,
                                status: true
                            });
                        }
                        else {
                            slots.push({
                                slot: timing.slot,
                                count: slot,
                                sort: timing.sort,
                                type: timing.category,
                                status: false
                            });
                        }
                    });
            }
        }

        slots = _.orderBy(slots, 'count', 'desc');
        slots = _.uniqBy(slots, 'slot');
        slots = _.orderBy(slots, 'sort', 'asc');


        res.status(200).json({
            responseCode: 200,
            responseMessage: "",
            responseData: slots
        })
    }
});

router.get('/booking/time-slot/get', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        date: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Service not mention",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var slots = [];
        var booking = await Booking.findById(req.query.booking).exec();
        if (booking) {
            var business = booking.business;
            var date = new Date(new Date(req.query.date).setHours(0, 0, 0, 0));
            var next = new Date(new Date(req.query.date).setHours(0, 0, 0, 0));
            next.setDate(date.getDate() + 1);

            var check = await BookingTiming.find({ business: business }).count().exec();

            var body = booking.services;
            if (body.length <= 0) {
                body.push({
                    type: "services"
                });
            }

            body = _.uniqBy(body, 'type');

            var slots = [];


            for (var i = 0; i < body.length; i++) {

                if (body[i].type == "addOn") {
                    body[i].type = "services"
                }


                if (check > 0) {
                    await BookingTiming.find({ business: business, category: body[i].type })
                        .sort({ sort: 1 })
                        .cursor().eachAsync(async (timing) => {
                            if (timing) {
                                var slot = await Booking.find({
                                    time_slot: timing.slot,
                                    is_services: true,
                                    business: business,
                                    date: { $gte: date, $lt: next },
                                    services: { $elemMatch: { type: body[i].type } },
                                    status: { $nin: ["Inactive", "Rejected", "Cancelled", "Completed", "Closed"] },
                                }).count().exec();

                                if (slot < timing.booking_per_slot) {
                                    slot = timing.booking_per_slot - slot
                                    slots.push({
                                        slot: timing.slot,
                                        count: slot,
                                        sort: timing.sort,
                                        type: timing.category,
                                        status: true
                                    });
                                }
                                else {
                                    slots.push({
                                        slot: timing.slot,
                                        count: slot,
                                        sort: timing.sort,
                                        type: timing.category,
                                        status: false
                                    });
                                }
                            }
                            else {
                                slots.push({
                                    slot: timing.slot,
                                    count: slot,
                                    sort: timing.sort,
                                    type: timing.category,
                                    status: false
                                });
                            }
                        });
                }
                else {
                    var a = await BookingTiming.find({ business: null, category: body[i].type }).exec();

                    await BookingTiming.find({ business: null, category: body[i].type })
                        .sort({ sort: 1 })
                        .cursor().eachAsync(async (timing) => {

                            var slot = await Booking.find({
                                time_slot: timing.slot,
                                is_services: true,
                                business: business,
                                date: { $gte: date, $lt: next },
                                services: { $elemMatch: { type: body[i].type } },
                                status: { $nin: ["Inactive", "Rejected", "Cancelled", "Completed", "Closed"] },
                            }).count().exec();


                            if (slot < timing.booking_per_slot) {
                                slot = timing.booking_per_slot - slot
                                slots.push({
                                    slot: timing.slot,
                                    count: slot,
                                    sort: timing.sort,
                                    type: timing.category,
                                    status: true
                                });
                            }
                            else {
                                slots.push({
                                    slot: timing.slot,
                                    count: slot,
                                    sort: timing.sort,
                                    type: timing.category,
                                    status: false
                                });
                            }
                        });
                }
            }

            slots = _.orderBy(slots, 'count', 'desc');
            slots = _.uniqBy(slots, 'slot');
            slots = _.orderBy(slots, 'sort', 'asc');


            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: slots
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            })
        }
    }
});

router.post('/new/booking/add/', xAccessToken.token, async function (req, res, next) {
    var rules = {
        car: 'required',
        services: 'required'
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        if (req.body.package == "") {
            req.body.package = null;
        }

        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);


        var user = req.headers['business'];


        var total = 0;
        var labourCost = 0;
        var part_cost = 0;
        var is_services = true;
        var doorstep = true;
        var bookingService = [];


        var services = req.body.services;
        var countBooking = await Booking.find({}).count().exec();
        var checkCar = await Car.findOne({ _id: req.body.car, user: user }).exec();
        var insurance_info = {
            "driver": null,
            "accident_place": "",
            "accident_date": null,
            "accident_time": "",
            "accident_cause": "",
            "fir": "",
            "branch": "",
            "cashless": "true",
            "claim": "false",
            "contact_no": "",
            "claim_no": "",
            "driver_accident": "",
            "expire": null,
            "gstin": "",
            "insurance_company": "",
            "manufacture_year": "",
            "policy_holder": "",
            "policy_no": "",
            "policy_type": "",
            "premium": 0,
            "spot_survey": "",
            "state": ""
        };

        if (checkCar) {
            var advisorBooking = [];
            await Management.find({ business: req.body.business, role: "Service Advisor" })
                .cursor().eachAsync(async (a) => {
                    var d = await Booking.find({ business: req.body.business, advisor: a.user, status: { $in: ["EstimateRequested", "JobInitiated", "JobOpen", "In-Process", "StartWork", "Rework"] } }).count().exec();
                    advisorBooking.push({
                        user: a.user,
                        count: await Booking.find({ business: req.body.business, advisor: a.user, status: { $in: ["EstimateRequested", "JobInitiated", "JobOpen", "In-Process", "StartWork", "Rework"] } }).count().exec()
                    })
                });

            if (advisorBooking.length != 0) {
                var min = advisorBooking.reduce(function (prev, current) {
                    return (prev.count < current.count) ? prev : current
                });
                var advisor = min.user
            }
            else {
                var advisor = req.body.business
            }

            var customer_requirements = [];
            if (req.body.requirements) {
                customer_requirements.push({
                    user: user,
                    requirement: req.body.requirements,
                });
            }
            if (req.body.is_services == false) {
                var baz = 1
            }
            else {
                var checkBooking = await Booking.findOne({ car: checkCar._id, date: new Date(req.body.date).toISOString(), status: { $in: ["Confirmed", "Pending", "Approval", "Approved", "Failed", "JobInitiated"] }, is_services: true }).exec();


                if (checkBooking) {
                    var serverTime = moment.tz(new Date(req.body.date).toISOString(), req.headers['tz']);
                    var bar = moment(checkBooking.date).tz(req.headers['tz']).format('YYYY-MM-DD');
                    bar = moment.tz(new Date(bar).toISOString(), req.headers['tz']);
                    var baz = bar.diff(serverTime);
                } else {
                    var baz = 1
                }

            }

            if (baz > 0) {
                var checkVendor = await User.findOne({ '_id': req.body.business }).exec();
                if (checkVendor) {
                    for (var i = 0; i < services.length; i++) {
                        if (services[i].type == "package") {
                            await Package.find({ _id: services[i].id }).cursor().eachAsync(async (service) => {
                                if (service) {
                                    var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                                    var tax_rate = tax_info.detail;
                                    var amount = service.cost;
                                    var base = amount;
                                    var labour_tax = [];
                                    var labours = [];

                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t
                                                labour_tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                                    amount: parseFloat(t.toFixed(2))
                                                })
                                            }
                                            else {
                                                base = base - t
                                                labour_tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: parseFloat(tax_info.rate.toFixed(2)),
                                                    amount: parseFloat(tax_on_amount.toFixed(2))
                                                })
                                            }
                                        }
                                    }

                                    labours.push({
                                        item: service.name,
                                        quantity: 1,
                                        rate: parseFloat(service.cost),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: parseFloat(amount),
                                        discount: 0,
                                        amount_is_tax: "inclusive",
                                        tax_amount: _.sumBy(labour_tax, x => x.amount),
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: {
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            base: parseFloat(base.toFixed(2)),
                                            detail: labour_tax
                                        }
                                    })

                                    is_services = false;

                                    bookingService.push({
                                        source: services[i].id,
                                        service: service.name,
                                        description: service.description,
                                        cost: Math.ceil(service.cost),
                                        labour_cost: Math.ceil(service.cost),
                                        part_cost: 0,
                                        of_cost: 0,
                                        discount: 0,
                                        parts: [],
                                        labour: labours,
                                        opening_fitting: [],
                                        type: "package",
                                        customer_approval: true, surveyor_approval: false,
                                    });

                                    // console.log(bookingService)

                                }
                                else {
                                    res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Service Not Found",
                                        responseData: {},
                                    });
                                }
                            });
                        }
                        else if (services[i].type == "addOn") {
                            await Package.find({ _id: services[i].id }).cursor().eachAsync(async (service) => {
                                if (service) {
                                    var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                                    var tax_rate = tax_info.detail;
                                    var amount = service.cost;
                                    var base = amount;
                                    var labour_tax = [];
                                    var labours = [];

                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t
                                                labour_tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                                    amount: parseFloat(t.toFixed(2))
                                                })
                                            }
                                            else {
                                                base = base - t
                                                labour_tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: parseFloat(tax_info.rate.toFixed(2)),
                                                    amount: parseFloat(tax_on_amount.toFixed(2))
                                                })
                                            }
                                        }
                                    }

                                    labours.push({
                                        item: service.name,
                                        quantity: 1,
                                        rate: parseFloat(service.cost),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: parseFloat(amount),
                                        discount: 0,
                                        amount_is_tax: "inclusive",
                                        tax_amount: _.sumBy(labour_tax, x => x.amount),
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: {
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            base: parseFloat(base.toFixed(2)),
                                            detail: labour_tax
                                        }
                                    })

                                    is_services = true;

                                    bookingService.push({
                                        source: service._id,
                                        service: service.name,
                                        description: service.description,
                                        cost: Math.ceil(service.cost),
                                        labour_cost: Math.ceil(service.cost),
                                        part_cost: 0,
                                        of_cost: 0,
                                        discount: 0,
                                        parts: [],
                                        labour: labours,
                                        opening_fitting: [],
                                        type: "addOn",
                                        customer_approval: true, surveyor_approval: false,
                                    });

                                }
                                else {
                                    res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Service Not Found",
                                        responseData: {},
                                    });
                                }
                            });
                        }
                        else if (services[i].type == "services") {
                            is_services = true;
                            await Service.find({ _id: services[i].id, publish: true, })
                                .cursor().eachAsync(async (service) => {

                                    var getDiscount = {
                                        package: req.body.package,
                                        car: req.body.car,
                                        category: service.type,
                                        service: service.service,
                                        tz: req.headers['tz'],
                                        claim: false,
                                    };

                                    if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                        var quantity = 1
                                    }
                                    else {
                                        var quantity = parseInt(services[i].quantity)
                                    }

                                    var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));



                                    var labour_list = service.labour;
                                    var labours = [];

                                    var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                                    if (labour_list.length > 0) {
                                        for (var l = 0; l < labour_list.length; l++) {
                                            var discount_total = 0;
                                            var total = 0;
                                            var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                            var tax = [];
                                            var rate = labour_list[l].rate;
                                            var amount = parseFloat(labour_list[l].amount) * quantity;
                                            var tax_rate = tax_info.detail;
                                            var base = amount;

                                            if (Object.keys(package).length > 0) {
                                                if (package.discount_type == "percent") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else if (package.discount_type == "fixed") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = parseFloat(discount_total.toFixed(2))
                                                        discount = amount - discount_total;
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }

                                            if (labour_list[l].amount_is_tax == "inclusive") {
                                                var x = (100 + tax_info.rate) / 100;
                                                var tax_on_amount = amount / x;
                                                if (tax_rate.length > 0) {
                                                    for (var r = 0; r < tax_rate.length; r++) {
                                                        if (tax_rate[r].rate != tax_info.rate) {
                                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_rate[r].tax,
                                                                rate: tax_rate[r].rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                        else {
                                                            var t = amount - tax_on_amount;
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                rate: tax_info.rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                    }

                                                    //base = base - discount_total;
                                                }
                                                total = total + amount;
                                            }

                                            var tax_details = {
                                                tax: tax_info.tax,
                                                rate: tax_info.rate,
                                                amount: total,
                                                detail: tax
                                            }


                                            labours.push({
                                                item: labour_list[l].item,
                                                source: labour_list[l].source,
                                                rate: parseFloat(labour_list[l].rate),
                                                quantity: quantity,
                                                base: parseFloat(total.toFixed(2)),
                                                discount: parseFloat(discount_total.toFixed(2)),
                                                amount: total,
                                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                amount_is_tax: labour_list[l].amount_is_tax,
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                tax_info: tax_details
                                            });
                                        }
                                    }

                                    bookingService.push({
                                        service: service.service,
                                        labour: labours,
                                        labour_cost: _.sumBy(labours, x => x.amount),
                                        discount: _.sumBy(labours, x => x.discount),
                                        parts: service.parts,
                                        part_cost: Math.ceil(service.part_cost),
                                        opening_fitting: service.opening_fitting,
                                        of_cost: Math.ceil(service.of_cost),
                                        exceeded_cost: 0,
                                        mrp: Math.ceil(service.mrp),
                                        cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                        doorstep: service.doorstep,
                                        unit: service.unit,
                                        quantity: quantity,
                                        part_cost_editable: service.part_cost_editable,
                                        labour_cost_editable: service.labour_cost_editable,
                                        of_cost_editable: service.of_cost_editable,
                                        type: service.type,
                                        source: service.id,
                                        description: service.description,
                                        claim: false,
                                        customer_approval: true, surveyor_approval: false,
                                    });
                                });
                        }
                        else if (services[i].type == "collision") {
                            is_services = true;
                            await Collision.find({ _id: services[i].id, publish: true, })
                                .cursor().eachAsync(async (service) => {
                                    var getDiscount = {
                                        package: req.body.package,
                                        car: req.body.car,
                                        category: service.type,
                                        service: service.service,
                                        tz: req.headers['tz'],
                                        claim: false,
                                    };

                                    if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                        var quantity = 1
                                    }
                                    else {
                                        var quantity = parseInt(services[i].quantity)
                                    }

                                    var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                                    var labour_list = service.labour;
                                    var labours = [];

                                    var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                                    if (labour_list.length > 0) {
                                        for (var l = 0; l < labour_list.length; l++) {
                                            var discount_total = 0;
                                            var total = 0;
                                            var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                            var tax = [];
                                            var rate = labour_list[l].rate;
                                            var amount = parseFloat(labour_list[l].amount) * quantity;
                                            var tax_rate = tax_info.detail;
                                            var base = amount;

                                            if (Object.keys(package).length > 0) {
                                                if (package.discount_type == "percent") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else if (package.discount_type == "fixed") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = parseFloat(discount_total.toFixed(2))
                                                        discount = amount - discount_total;
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }

                                            if (labour_list[l].amount_is_tax == "inclusive") {
                                                var x = (100 + tax_info.rate) / 100;
                                                var tax_on_amount = amount / x;
                                                if (tax_rate.length > 0) {
                                                    for (var r = 0; r < tax_rate.length; r++) {
                                                        if (tax_rate[r].rate != tax_info.rate) {
                                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_rate[r].tax,
                                                                rate: tax_rate[r].rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                        else {
                                                            var t = amount - tax_on_amount;
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                rate: tax_info.rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                    }

                                                    //base = base - discount_total;
                                                }
                                                total = total + amount;
                                            }

                                            var tax_details = {
                                                tax: tax_info.tax,
                                                rate: tax_info.rate,
                                                amount: total,
                                                detail: tax
                                            }


                                            labours.push({
                                                item: labour_list[l].item,
                                                source: labour_list[l].source,
                                                rate: parseFloat(labour_list[l].rate),
                                                quantity: quantity,
                                                base: parseFloat(total.toFixed(2)),
                                                discount: parseFloat(discount_total.toFixed(2)),
                                                amount: total,
                                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                amount_is_tax: labour_list[l].amount_is_tax,
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                tax_info: tax_details
                                            });
                                        }
                                    }

                                    bookingService.push({
                                        service: service.service,
                                        labour: labours,
                                        labour_cost: _.sumBy(labours, x => x.amount),
                                        discount: _.sumBy(labours, x => x.discount),
                                        parts: service.parts,
                                        part_cost: Math.ceil(service.part_cost),
                                        opening_fitting: service.opening_fitting,
                                        of_cost: Math.ceil(service.of_cost),
                                        exceeded_cost: 0,
                                        mrp: Math.ceil(service.mrp),
                                        cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                        doorstep: service.doorstep,
                                        unit: service.unit,
                                        quantity: quantity,
                                        part_cost_editable: service.part_cost_editable,
                                        labour_cost_editable: service.labour_cost_editable,
                                        of_cost_editable: service.of_cost_editable,
                                        type: service.type,
                                        source: service.id,
                                        description: service.description,
                                        claim: false,
                                        customer_approval: true, surveyor_approval: false,
                                    });
                                });
                        }
                        else if (services[i].type == "detailing") {
                            is_services = true;
                            await Detailing.find({ _id: services[i].id, publish: true, })
                                .cursor().eachAsync(async (service) => {
                                    var getDiscount = {
                                        package: req.body.package,
                                        car: req.body.car,
                                        category: service.type,
                                        service: service.service,
                                        tz: req.headers['tz'],
                                        claim: false
                                    };

                                    // console.log(getDiscount)

                                    if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                        var quantity = 1
                                    }
                                    else {
                                        var quantity = parseInt(services[i].quantity)
                                    }

                                    var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                                    // console.log(package)

                                    var labour_list = service.labour;
                                    var labours = [];

                                    var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                                    if (labour_list.length > 0) {
                                        for (var l = 0; l < labour_list.length; l++) {
                                            var discount_total = 0;
                                            var total = 0;
                                            var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                            var tax = [];
                                            var rate = labour_list[l].rate;
                                            var amount = parseFloat(labour_list[l].amount) * quantity;
                                            var tax_rate = tax_info.detail;
                                            var base = amount;

                                            if (Object.keys(package).length > 0) {
                                                if (package.discount_type == "percent") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else if (package.discount_type == "fixed") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = parseFloat(discount_total.toFixed(2))
                                                        discount = amount - discount_total;
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }

                                            if (labour_list[l].amount_is_tax == "inclusive") {
                                                var x = (100 + tax_info.rate) / 100;
                                                var tax_on_amount = amount / x;
                                                if (tax_rate.length > 0) {
                                                    for (var r = 0; r < tax_rate.length; r++) {
                                                        if (tax_rate[r].rate != tax_info.rate) {
                                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_rate[r].tax,
                                                                rate: tax_rate[r].rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                        else {
                                                            var t = amount - tax_on_amount;
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                rate: tax_info.rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                    }

                                                    //base = base - discount_total;
                                                }
                                                total = total + amount;
                                            }

                                            var tax_details = {
                                                tax: tax_info.tax,
                                                rate: tax_info.rate,
                                                amount: total,
                                                detail: tax
                                            }


                                            labours.push({
                                                item: labour_list[l].item,
                                                source: labour_list[l].source,
                                                rate: parseFloat(labour_list[l].rate),
                                                quantity: quantity,
                                                base: parseFloat(total.toFixed(2)),
                                                discount: parseFloat(discount_total.toFixed(2)),
                                                amount: total,
                                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                amount_is_tax: labour_list[l].amount_is_tax,
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                tax_info: tax_details
                                            });
                                        }
                                    }

                                    bookingService.push({
                                        service: service.service,
                                        labour: labours,
                                        labour_cost: _.sumBy(labours, x => x.amount),
                                        discount: _.sumBy(labours, x => x.discount),
                                        parts: service.parts,
                                        part_cost: Math.ceil(service.part_cost),
                                        opening_fitting: service.opening_fitting,
                                        of_cost: Math.ceil(service.of_cost),
                                        exceeded_cost: 0,
                                        mrp: Math.ceil(service.mrp),
                                        cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                        doorstep: service.doorstep,
                                        unit: service.unit,
                                        quantity: quantity,
                                        part_cost_editable: service.part_cost_editable,
                                        labour_cost_editable: service.labour_cost_editable,
                                        of_cost_editable: service.of_cost_editable,
                                        type: service.type,
                                        source: service.id,
                                        description: service.description,
                                        claim: false,
                                        customer_approval: true, surveyor_approval: false,
                                    });
                                });
                        }
                        else if (services[i].type == "customization") {
                            is_services = true;
                            await Customization.find({ _id: services[i].id, publish: true, })
                                .cursor().eachAsync(async (service) => {
                                    var getDiscount = {
                                        package: req.body.package,
                                        car: req.body.car,
                                        category: service.type,
                                        service: service.service,
                                        tz: req.headers['tz'],
                                        claim: false,
                                    };

                                    if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                        var quantity = 1
                                    }
                                    else {
                                        var quantity = parseInt(services[i].quantity)
                                    }

                                    var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                                    var labour_list = service.labour;
                                    var labours = [];

                                    var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                                    if (labour_list.length > 0) {
                                        for (var l = 0; l < labour_list.length; l++) {
                                            var discount_total = 0;
                                            var total = 0;
                                            var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                            var tax = [];
                                            var rate = labour_list[l].rate;
                                            var amount = parseFloat(labour_list[l].amount) * quantity;
                                            var tax_rate = tax_info.detail;
                                            var base = amount;

                                            if (Object.keys(package).length > 0) {
                                                if (package.discount_type == "percent") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else if (package.discount_type == "fixed") {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = parseFloat(discount_total.toFixed(2))
                                                        discount = amount - discount_total;
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                else {
                                                    discount = parseFloat(package.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }

                                            if (labour_list[l].amount_is_tax == "inclusive") {
                                                var x = (100 + tax_info.rate) / 100;
                                                var tax_on_amount = amount / x;
                                                if (tax_rate.length > 0) {
                                                    for (var r = 0; r < tax_rate.length; r++) {
                                                        if (tax_rate[r].rate != tax_info.rate) {
                                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_rate[r].tax,
                                                                rate: tax_rate[r].rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                        else {
                                                            var t = amount - tax_on_amount;
                                                            base = base - t;
                                                            tax.push({
                                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                rate: tax_info.rate,
                                                                amount: parseFloat(t.toFixed(2))
                                                            });
                                                        }
                                                    }

                                                    //base = base - discount_total;
                                                }
                                                total = total + amount;
                                            }

                                            var tax_details = {
                                                tax: tax_info.tax,
                                                rate: tax_info.rate,
                                                amount: total,
                                                detail: tax
                                            }


                                            labours.push({
                                                item: labour_list[l].item,
                                                source: labour_list[l].source,
                                                rate: parseFloat(labour_list[l].rate),
                                                quantity: quantity,
                                                base: parseFloat(total.toFixed(2)),
                                                discount: parseFloat(discount_total.toFixed(2)),
                                                amount: total,
                                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                amount_is_tax: labour_list[l].amount_is_tax,
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                tax_info: tax_details
                                            });
                                        }
                                    }

                                    bookingService.push({
                                        service: service.service,
                                        labour: labours,
                                        labour_cost: _.sumBy(labours, x => x.amount),
                                        discount: _.sumBy(labours, x => x.discount),
                                        parts: service.parts,
                                        part_cost: Math.ceil(service.part_cost),
                                        opening_fitting: service.opening_fitting,
                                        of_cost: Math.ceil(service.of_cost),
                                        exceeded_cost: 0,
                                        mrp: Math.ceil(service.mrp),
                                        cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                        doorstep: service.doorstep,
                                        unit: service.unit,
                                        quantity: quantity,
                                        part_cost_editable: service.part_cost_editable,
                                        labour_cost_editable: service.labour_cost_editable,
                                        of_cost_editable: service.of_cost_editable,
                                        type: service.type,
                                        source: service.id,
                                        description: service.description,
                                        claim: false,
                                        customer_approval: true, surveyor_approval: false,
                                    });
                                });
                        }
                    }

                    if (bookingService.length > 0) {
                        var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                        var part_cost = _.sumBy(bookingService, x => x.part_cost);
                        var of_cost = _.sumBy(bookingService, x => x.of_cost);
                        var discount_total = _.sumBy(bookingService, x => x.discount);
                        var pick_up_charges = 0;
                        if (req.body.charges) {
                            pick_up_charges = parseFloat(req.body.charges);
                        }
                    }
                    else {
                        return res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Services not found",
                            responseData: {},
                        });
                    }

                    if (doorstep) {
                        var paid_total = part_cost + labour_cost + of_cost + pick_up_charges;
                        var total = part_cost + labour_cost + of_cost + discount_total + pick_up_charges;
                        var payment = {
                            estimate_cost: paid_total,
                            payment_mode: req.body.payment_mode,
                            payment_status: "Pending",
                            careager_cash: 0,
                            discount_type: "",
                            coupon: "",
                            coupon_type: "",
                            discount: discount_total.toFixed(2),
                            discount_total: discount_total.toFixed(2),
                            terms: checkVendor.business_info.terms,
                            pick_up_limit: checkVendor.business_info.pick_up_limit,
                            pick_up_charges: pick_up_charges,
                            part_cost: parseFloat(part_cost.toFixed(2)),
                            labour_cost: parseFloat(labour_cost.toFixed(2)),
                            of_cost: parseFloat(of_cost.toFixed(2)),
                            paid_total: 0,
                            total: parseFloat(total.toFixed(2)),
                            discount_applied: false,
                            transaction_id: "",
                            transaction_date: "",
                            transaction_status: "",
                            transaction_response: "",
                            policy_clause: 0,
                            salvage: 0,
                        };

                        var due = {
                            due: Math.ceil(paid_total.toFixed(2))
                        };

                        if (req.body.is_services == false) {
                            var date = new Date();
                        }
                        else {
                            if (req.body.date) {
                                var date = new Date(req.body.date).toISOString()
                            }
                            else {
                                var d = new Date();
                                var date = new Date(d.getFullYear(), d.getMonth(), d.getDate() + 2);
                            }
                        }

                        var lastBooking = await Booking.findOne({ user: user, status: " Inactive" }).sort({ created_at: -1 }).exec();

                        if (lastBooking) {
                            var data = {
                                package: req.body.package,
                                car: req.body.car,
                                advisor: advisor,
                                business: req.body.business,
                                user: user,
                                services: bookingService,
                                booking_no: lastBooking.booking_no,
                                date: date,
                                customer_requirements: customer_requirements,
                                time_slot: req.body.time_slot,
                                convenience: req.body.convenience,
                                status: "Inactive",
                                payment: payment,
                                due: due,
                                insurance_info: insurance_info,
                                address: req.body.address,
                                is_services: is_services,
                                created_at: new Date(),
                                updated_at: new Date()
                            };

                            Booking.findOneAndUpdate({ _id: lastBooking._id }, { $set: data }, { new: true }, async function (err, doc) {
                                if (!err) {
                                    await whatsAppEvent.bookingWhatsApp(doc._id)
                                    var booking = await Booking.findById(lastBooking._id).exec();
                                    if (booking.is_services == true) {
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "Service Request has been booked",
                                            responseData: booking
                                        });
                                    }
                                    else {
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "Package successfully purchased, Book Services Now for added benefits",
                                            responseData: booking
                                        });
                                    }
                                } else {
                                    res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Server Error",
                                        responseData: err
                                    });
                                }
                            });
                        }
                        else {
                            var data = {
                                package: req.body.package,
                                car: req.body.car,
                                advisor: advisor,
                                business: req.body.business,
                                user: user,
                                services: bookingService,
                                booking_no: Math.round(+new Date() / 1000) + Math.round((Math.random() * 9999) + 1),
                                date: date,
                                time_slot: req.body.time_slot,
                                convenience: req.body.convenience,
                                status: "Inactive",
                                payment: payment,
                                due: due,
                                customer_requirements: customer_requirements,
                                address: req.body.address,
                                insurance_info: insurance_info,
                                is_services: is_services,
                                created_at: new Date(),
                                updated_at: new Date()
                            };

                            Booking.create(data).then(async function (booking) {
                                await whatsAppEvent.bookingWhatsApp(booking._id)

                                if (booking.is_services == true) {
                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Service Request has been booked",
                                        responseData: booking
                                    });
                                }
                                else {
                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Package successfully purchased, Book Services Now for added benefits",
                                        responseData: booking
                                    });
                                }
                            });
                        }
                    }
                    else {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Doorstep is not available for selected service",
                            responseData: {},
                        });
                    }
                }
                else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Business Not Found",
                        responseData: {},
                    });
                }
            }
            else {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "Booking already exists for the same day. Please choose a different date or ask the advisor if anything needs to be added.",
                    responseData: {},
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {},
            });
        }
    }
});

router.post('/booking/coupon/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        id: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;

        if (req.headers['business']) {
            user = req.headers['business'];
        }

        var data = new Object();
        var discount = 0;
        var code = "";
        var discount_type = "";
        var discount_by = "";


        var booking = await Booking.findOne({ _id: req.body.id }).exec();

        if (booking) {
            var careager_cash = await q.all(fun.getCarEagerCash(booking._id));
            // console.log("careager_cash: " + careager_cash)
            var services = booking.services;
            if (booking.payment.total != 0 && booking.package == null) {
                type = req.body.type;

                if (type == "coupon") {
                    discount_by = "coupon";
                    discount_type = "coupon";
                    var discount_eligible = [];
                    var coupon = await Coupon.findOne({ code: req.body.coupon.toUpperCase(), is_product: false }).exec();
                    var used = await CouponUsed.findOne({ code: req.body.coupon.toUpperCase(), user: booking.user }).count().exec();

                    if (coupon) {
                        if (used < coupon.usage_limit) {
                            var serverTime = moment.tz(new Date(), req.headers['tz']);
                            var bar = moment.tz(coupon.expired_at, req.headers['tz']);
                            var baz = bar.diff(serverTime);
                            if (baz > 0) {
                                var limit = await CouponUsed.findOne({ code: req.body.coupon.toUpperCase() }).count().exec();
                                if (limit <= coupon.limit) {
                                    code = req.body.coupon.toUpperCase();
                                    discount_type = "coupon";
                                    if (coupon.coupon_on == "total") {
                                        if (coupon.for == "category") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, type => type.type == coupon.label);
                                            if (discount_eligible.length > 0) {
                                                var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                                var discount_eligible_labour_cost = 0;
                                                for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                    discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                                }
                                            }
                                            else {
                                                return res.status(400).json({
                                                    responseCode: 400,
                                                    responseMessage: "Coupon not valid for this services",
                                                    responseData: {}
                                                });
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, service => service.service == coupon.label);
                                            if (discount_eligible.length > 0) {
                                                var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                                var discount_eligible_labour_cost = 0;
                                                for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                    discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                                }
                                            }
                                            else {
                                                return res.status(400).json({
                                                    responseCode: 400,
                                                    responseMessage: "Coupon not valid for this services",
                                                    responseData: {}
                                                });
                                            }
                                        }
                                    }
                                    else {
                                        if (coupon.for == "general") {
                                            discount_eligible = _.filter(booking.services, claim => claim.claim == false);
                                            if (discount_eligible.length > 0) {
                                                var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                                var discount_eligible_labour_cost = 0;
                                                for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                    discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                                }
                                            }
                                            else {
                                                return res.status(400).json({
                                                    responseCode: 400,
                                                    responseMessage: "Coupon not valid for this services",
                                                    responseData: {}
                                                });
                                            }
                                        }
                                        else if (coupon.for == "category") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, type => type.type == coupon.label);

                                            if (discount_eligible.length > 0) {
                                                var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                                var discount_eligible_labour_cost = 0;
                                                for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                    discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                                }
                                            }
                                            else {
                                                return res.status(400).json({
                                                    responseCode: 400,
                                                    responseMessage: "Coupon not valid for this services",
                                                    responseData: {}
                                                });
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, service => service.service == coupon.label);
                                            if (discount_eligible.length > 0) {
                                                var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                                var discount_eligible_labour_cost = 0;
                                                for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                    discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                                }
                                            }
                                            else {
                                                return res.status(400).json({
                                                    responseCode: 400,
                                                    responseMessage: "Coupon not valid for this services",
                                                    responseData: {}
                                                });
                                            }
                                        }
                                    }
                                }
                                else {
                                    return res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Coupon has been expired",
                                        responseData: {}
                                    });
                                }
                            }
                            else {
                                return res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Coupon has been expired",
                                    responseData: {}
                                });
                            }
                        }
                        else {
                            return res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Coupon has been used",
                                responseData: {}
                            });
                        }
                    }
                    else {
                        return res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Coupon doesn't Exist",
                            responseData: {}
                        });
                    }


                    var total_labour_cost = _.sumBy(services, x => x.labour_cost);

                    if (total_labour_cost < careager_cash) {
                        discount_total = 0;
                    }

                    for (var i = 0; i < services.length; i++) {
                        if (services[i].claim == true) {
                            bookingService.push(services[i])
                        }
                        else {
                            var labour_list = services[i].labour;

                            var labours = [];

                            if (labour_list) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (coupon.coupon_on == "total") {
                                        if (coupon.for == "category") {
                                            if (services[i].type == coupon.label) {
                                                if (coupon.type == "percent") {

                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }

                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            if (services[i].service == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }

                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if (coupon.for == "general") {
                                            if (coupon.type == "percent") {
                                                discount_by = "percent";
                                                discount = parseFloat(coupon.discount);


                                                if (!isNaN(discount) && discount > 0) {
                                                    discount_total = amount * (discount / 100);
                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }
                                            }
                                            else if (coupon.type == "price") {
                                                discount_by = "value";
                                                discount = parseFloat(coupon.discount);


                                                if (!isNaN(discount) && discount > 0) {
                                                    discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }
                                            }
                                        }
                                        else if (coupon.for == "category") {
                                            if (services[i].type == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            if (services[i].service == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                if (coupon.type == "fixed") {
                                                    labour_list[l].amount_is_tax = "inclusive";
                                                    discount_by = "value";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }
                                                    discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                    discount = amount - discount_total;
                                                    amount = parseFloat(discount_total.toFixed(2));
                                                    discount_total = discount
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }

                                                else if (coupon.type == "price") {
                                                    discount_by = "value";
                                                    discount = parseFloat(coupon.discount);
                                                    if (total_labour_cost < careager_cash) {
                                                        discount_total = 0;
                                                    }
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            //base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: parseFloat(labour_list[l].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }

                                bookingService.push({
                                    quantity: services[i].quantity,
                                    part_cost: services[i].part_cost,
                                    labour_cost: _.sumBy(labours, x => x.amount),
                                    of_cost: services[i].of_cost,
                                    exceeded_cost: services[i].exceeded_cost,
                                    part_rate: services[i].part_rate,
                                    labour_rate: services[i].labour_rate,
                                    of_rate: services[i].of_rate,
                                    parts: services[i].parts,
                                    labour: labours,
                                    cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                    opening_fitting: services[i].opening_fitting,
                                    part_cost_editable: services[i].part_cost_editable,
                                    labour_cost_editable: services[i].part_cost_editable,
                                    of_cost_editable: services[i].part_cost_editable,
                                    description: services[i].description,
                                    service: services[i].service,
                                    type: services[i].type,
                                    claim: services[i].claim,
                                    custom: services[i].custom,
                                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].parts, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount),
                                    customer_approval: services[i].customer_approval, surveyor_approval: services[i].surveyor_approval,
                                    source: services[i].source
                                });
                            }
                        }
                    }
                }
                else {
                    bookingService = services;
                }
            }
            else {
                bookingService = services;
            }


            var paid_total = booking.payment.paid_total;
            var pick_up_charges = booking.payment.pick_up_charges;
            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
            var part_cost = _.sumBy(bookingService, x => x.part_cost);
            var of_cost = _.sumBy(bookingService, x => x.of_cost);
            var discount_total = _.sumBy(bookingService, x => x.discount);

            var policy_clause = 0
            if (booking.payment.policy_clause) {
                policy_clause = booking.payment.policy_clause;
            }
            var salvage = 0
            if (booking.payment.salvage) {
                salvage = booking.payment.salvage;
            }

            var total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;
            var due = part_cost + labour_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

            var payment = {
                estimate_cost: due,
                careager_cash: careager_cash,
                total: parseFloat(total.toFixed(2)),
                of_cost: parseFloat(of_cost.toFixed(2)),
                labour_cost: parseFloat(labour_cost.toFixed(2)),
                part_cost: parseFloat(part_cost.toFixed(2)),
                payment_mode: booking.payment.payment_mode,
                payment_status: booking.payment.payment_status,
                coupon: code,
                coupon_type: "",
                discount_by: discount_by,
                discount_type: discount_type,
                discount: discount,
                discount_total: discount_total,
                policy_clause: booking.payment.policy_clause,
                salvage: booking.payment.salvage,
                terms: booking.payment.terms,
                pick_up_limit: booking.payment.pick_up_limit,
                pick_up_charges: booking.payment.pick_up_charges,
                paid_total: 0,
                discount_applied: booking.payment.discount_applied,
                transaction_id: booking.payment.transaction_id,
                transaction_date: booking.payment.transaction_date,
                transaction_status: booking.payment.transaction_status,
                transaction_response: booking.payment.transaction_response
            };

            var due = {
                due: Math.ceil(due.toFixed(2))
            };

            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                if (err) {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Error",
                        responseData: err
                    });
                }
                else {
                    var update = await Booking.findById(booking.id).exec();
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Discount has been applied",
                        responseData: {
                            payment: payment,
                            due: due
                        }
                    });
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {}
            });
        }
    }
});

router.post('/pay/later', xAccessToken.token, async function (req, res, next) {
    var rules = {
        id: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;

        if (req.headers['business']) {
            user = req.headers['business'];
        }


        var loggedInDetails = await User.findById(user).exec();
        var booking = await Booking.findById(req.body.id).exec();
        var coupon = await Coupon.findOne({ code: req.body.coupon }).exec();

        if (booking) {
            var package = _.filter(booking.services, type => type.type == "package");

            if (Object.keys(package).length <= 0) {
                var d1 = booking.date;
                var date = new Date();
                var d2 = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                var seconds = (d1.getTime() - d2.getTime()) / 1000;
                // console.log(seconds)
                if (seconds >= 172800) {
                    var status = "Confirmed"
                }
                else {
                    var status = "Pending"
                }


                var data = {
                    status: status,
                    updated_at: new Date()
                }

                Booking.findOneAndUpdate({ _id: req.body.id }, { $set: data }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Error Occurred",
                            responseData: {}
                        })
                    }
                    else {
                        User.findOneAndUpdate({ _id: booking.user }, {
                            $push: {
                                "bookings": booking._id
                            }
                        }, { new: true }, async function (err, doc) {
                            if (err) {
                                // console.log(err)
                            }
                            else {
                                // console.log(doc)
                            }
                        });


                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Booking",
                            activity: status,
                        }

                        fun.bookingLog(booking._id, activity);

                        booking.services.forEach(async function (service) {
                            if (service.type == "package") {
                                var package = await Package.findOne({ _id: service.source }).exec();
                                var expired_at = new Date();
                                expired_at.setDate(expired_at.getDate() + package.validity);
                                var check = await UserPackage.find({ package: service.source, category: "free", user: user, car: booking.car }).count().exec();

                                if (check <= 0) {
                                    UserPackage.create({
                                        user: user,
                                        car: booking.car,
                                        name: package.name,
                                        booking: booking._id,
                                        business: booking.business,
                                        description: package.description,
                                        category: package.category,
                                        package: package._id,
                                        payment: {
                                            total: service.cost,
                                            paid_total: service.cost,
                                        },
                                        discount: package.discount,
                                        validity: package.validity,
                                        expired_at: expired_at,
                                        created_at: new Date(),
                                        updated_at: new Date()
                                    });

                                    if (booking.is_services == true) {
                                        Booking.update(
                                            { "_id": booking._id },
                                            { "$pull": { "services": { "source": service.source } } },
                                            function (err, numAffected) {
                                                if (err) {
                                                    // console.log(err);
                                                }
                                            }
                                        );
                                    }
                                }
                            }
                        })

                        if (booking.package) {
                            var packageUsed = [];
                            var package = await UserPackage.findOne({ _id: booking.package, car: booking.car }).exec();
                            if (package) {
                                booking.services.forEach(async function (service) {
                                    package.discount.forEach(async function (dis) {

                                        if (dis.for == "specific") {
                                            if (dis.label == service.service) {
                                                if (dis.discount > 0) {
                                                    packageUsed.push({
                                                        source: service.source,
                                                        package: booking.package,
                                                        car: booking.car,
                                                        user: booking.user,
                                                        booking: booking._id,
                                                        for: service.type,
                                                        label: service.service,
                                                        created_at: new Date(),
                                                        updated_at: new Date()
                                                    });
                                                }
                                            }
                                        }

                                        else if (dis.for == "category") {
                                            if (dis.label == service.type) {
                                                if (dis.discount > 0) {
                                                    packageUsed.forEach(async function (c) {
                                                        if (c.source != service.source) {
                                                            packageUsed.push({
                                                                source: service.source,
                                                                package: booking.package,
                                                                car: booking.car,
                                                                user: booking.user,
                                                                booking: booking._id,
                                                                for: service.type,
                                                                label: service.type,
                                                                created_at: new Date(),
                                                                updated_at: new Date()
                                                            })
                                                        }
                                                    })
                                                }
                                            }
                                        }
                                    });
                                });

                                var packageUsed = _.uniqBy(packageUsed, function (o) {
                                    return o.label;
                                });

                                // console.log(packageUsed)

                                packageUsed.forEach(async function (p) {
                                    var check = await PackageUsed.find({ package: p.package, car: p.car, user: p.user, booking: p.booking, label: p.label }).count().exec();
                                    if (check == 0) {
                                        PackageUsed.create({
                                            package: p.package,
                                            car: p.car,
                                            user: p.user,
                                            booking: p.booking,
                                            for: p.for,
                                            label: p.label,
                                            created_at: p.created_at,
                                            updated_at: p.updated_at
                                        })
                                    }
                                })
                            }
                        }


                        if (booking.payment.careager_cash > 0) {
                            var point = {
                                user: booking.user,
                                activity: "booking",
                                tag: "booking",
                                title: "",
                                body: "",
                                points: booking.payment.careager_cash,
                                status: true
                            }

                            fun.deductPoints(point);
                        }

                        else if (booking.payment.discount_type == "coupon" && booking.payment.discount_total != 0 && booking.payment.discount_total) {
                            var coupon = await Coupon.findOne({ code: booking.payment.coupon }).exec();

                            CouponUsed.create({
                                coupon: coupon._id,
                                code: coupon.code,
                                booking: booking._id,
                                user: user,
                                created_at: new Date(),
                                updated_at: new Date()
                            });
                        }


                        if (booking.is_services == true) {
                            var notify = {
                                receiver: [booking.business],
                                activity: "booking",
                                tag: "newBooking",
                                source: booking._id,
                                sender: user,
                                points: 0
                            }

                            fun.newNotification(notify);
                            event.bookingMail(booking._id, business);

                            if (booking.advisor) {
                                var advisor = await User.findById(booking.advisor).exec();
                                var notify = {
                                    receiver: [advisor._id],
                                    activity: "booking",
                                    tag: "newBooking",
                                    source: booking._id,
                                    sender: user,
                                    points: 0
                                }

                                fun.newNotification(notify);
                            }

                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Service has been booked",
                                responseData: {
                                    booking_no: booking.booking_no,
                                    is_services: booking.is_services
                                }
                            });
                        }
                        else {
                            var notify = {
                                receiver: [booking.business],
                                activity: "package",
                                tag: "newPackage",
                                source: booking._id,
                                sender: user,
                                points: 0
                            }

                            fun.newNotification(notify);
                            event.bookingMail(booking._id, business);

                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Package successfully purchased, Book Services Now for added benefits",
                                responseData: {
                                    booking_no: booking.booking_no,
                                    is_services: booking.is_services
                                }
                            });
                        }
                    }
                });
            }
            else {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "'Pay Later' is not applicable for packages.",
                    responseData: {}
                })
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            })
        }
    }
});

router.post('/my/approved/services/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);

        var user = req.headers['business'];


        var business = req.headers['business'];
        var bookingService = [];
        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findOne({ _id: req.body.booking, user: user }).exec();
        if (booking) {
            var services = req.body.services;
            for (var i = 0; i < services.length; i++) {
                var parts_visible = true;
                var part_tax = [];
                var labour_tax = [];
                var fitting_tax = [];
                var tax_detail = {};
                if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                    var quantity = 1
                }
                else {
                    var quantity = parseInt(services[i].quantity)
                }

                var parts = services[i].parts;
                var part = [];
                if (parts.length > 0) {
                    part = services[i].parts
                }
                else {
                    if (services[i].part_cost != 0) {
                        parts_visible = false;
                        var tax_info = await Tax.findOne({ tax: "0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = Math.ceil(services[i].part_cost) * quantity;
                        var base = amount;
                        var part_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    part_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    base = base - t
                                    part_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    });
                                }
                            }
                        }

                        tax_detail = {
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            base: parseFloat(base.toFixed(2)),
                            detail: part_tax
                        }

                        part.push({
                            item: services[i].service,
                            hsn_sac: "",
                            part_no: "",
                            quantity: quantity,
                            rate: parseFloat(services[i].part_cost),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            tax_amount: _.sumBy(part_tax, x => x.amount),
                            amount_is_tax: "inclusive",
                            discount: 0,
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: tax_detail
                        })
                    }

                }

                var labours = services[i].labour;
                var labour = [];

                if (labours.length > 0) {
                    labour = labours
                }
                else {
                    var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                    var tax_rate = tax_info.detail;
                    var service = services[i].service;
                    var amount = Math.ceil(services[i].labour_cost) * quantity;
                    var base = amount;
                    var labour_tax = [];

                    var x = (100 + tax_info.rate) / 100;
                    var tax_on_amount = amount / x;
                    if (tax_rate.length > 0) {
                        for (var r = 0; r < tax_rate.length; r++) {
                            if (tax_rate[r].rate != tax_info.rate) {
                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                base = base - t
                                labour_tax.push({
                                    tax: tax_rate[r].tax,
                                    rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                    amount: parseFloat(t.toFixed(2))
                                })
                            }
                            else {
                                base = base - t
                                labour_tax.push({
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    rate: parseFloat(tax_info.rate.toFixed(2)),
                                    amount: parseFloat(tax_on_amount.toFixed(2))
                                })
                            }
                        }
                    }

                    labour.push({
                        item: services[i].service,
                        quantity: quantity,
                        rate: parseFloat(services[i].labour_cost),
                        base: parseFloat(base.toFixed(2)),
                        amount: parseFloat(amount),
                        discount: 0,
                        customer_dep: 100,
                        insurance_dep: 0,
                        amount_is_tax: "inclusive",
                        tax_amount: _.sumBy(labour_tax, x => x.amount),
                        tax: tax_info.tax, tax_rate: tax_info.rate,
                        tax_info: {
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            base: parseFloat(base.toFixed(2)),
                            detail: labour_tax
                        }
                    })
                }

                var opening_fittings = services[i].opening_fitting;
                var opening_fitting = [];

                if (opening_fittings.length > 0) {
                    opening_fitting = opening_fittings
                }
                else {
                    if (services[i].of_cost != 0) {
                        var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = Math.ceil(services[i].of_cost) * quantity;
                        var base = amount;
                        var fitting_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    })
                                }
                                else {
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    })
                                }
                            }
                        }

                        opening_fitting.push({
                            item: services[i].service,
                            quantity: quantity,
                            rate: parseFloat(services[i].of_cost),
                            base: parseFloat(base.toFixed(2)),
                            discount: 0,
                            amount: parseFloat(amount),
                            amount_is_tax: "inclusive",
                            customer_dep: 100,
                            insurance_dep: 0,
                            tax_amount: _.sumBy(fitting_tax, x => x.amount),
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: {
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                base: parseFloat(base.toFixed(2)),
                                detail: fitting_tax
                            }
                        })
                    }
                }

                bookingService.push({
                    source: services[i].source,
                    service: services[i].service,
                    mileage: services[i].mileage,
                    parts: part,
                    labour: labour,
                    opening_fitting: opening_fitting,
                    hours: services[i].hours,
                    parts_visible: parts_visible,
                    quantity: quantity,
                    description: services[i].description,
                    part_cost: _.sumBy(part, x => x.amount),
                    labour_cost: _.sumBy(labour, x => x.amount),
                    of_cost: _.sumBy(opening_fitting, x => x.amount),
                    exceeded_cost: services[i].exceeded_cost,
                    cost: _.sumBy(part, x => x.amount) + _.sumBy(labour, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
                    discount: _.sumBy(labour, x => x.discount) + _.sumBy(opening_fitting, x => x.discount) + _.sumBy(part, x => x.discount),
                    part_cost_editable: services[i].part_cost_editable,
                    labour_cost_editable: services[i].labour_cost_editable,
                    of_cost_editable: services[i].of_cost_editable,
                    type: services[i].type,
                    customer_approval: services[i].customer_approval,
                    surveyor_approval: services[i].surveyor_approval,
                    claim: services[i].claim,
                    custom: services[i].custom,
                });
            }

            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);
            if (approved.length > 0) {

                var policy_clause = 0
                if (booking.payment.policy_clause) {
                    policy_clause = booking.payment.policy_clause;
                }
                var salvage = 0
                if (booking.payment.salvage) {
                    salvage = booking.payment.salvage;
                }

                var paid_total = booking.payment.paid_total;
                var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                var part_cost = _.sumBy(bookingService, x => x.part_cost);
                var of_cost = _.sumBy(bookingService, x => x.of_cost);
                var discount_total = _.sumBy(bookingService, x => x.discount);
                var pick_up_charges = booking.payment.pick_up_charges;

                var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
                var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id))


                var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                var due = {
                    due: Math.ceil(due_amount.toFixed(2))
                }

                var payment = {
                    estimate_cost: estimate_cost,
                    total: parseFloat(payment_total.toFixed(2)),
                    careager_cash: careager_cash,
                    of_cost: parseFloat(of_cost.toFixed(2)),
                    labour_cost: parseFloat(labour_cost.toFixed(2)),
                    part_cost: parseFloat(part_cost.toFixed(2)),
                    payment_mode: booking.payment.payment_mode,
                    payment_status: booking.payment.payment_status,
                    coupon: booking.payment.coupon,
                    coupon_type: booking.payment.coupon_type,
                    discount_by: booking.payment.discount_by,
                    discount_type: booking.payment.discount_type,
                    discount: booking.payment.discount,
                    discount_total: discount_total,
                    terms: booking.payment.terms,
                    pick_up_limit: booking.payment.pick_up_limit,
                    policy_clause: policy_clause,
                    salvage: salvage,
                    pick_up_charges: pick_up_charges,
                    paid_total: booking.payment.paid_total,
                    discount_applied: booking.payment.discount_applied,
                    transaction_id: booking.payment.transaction_id,
                    transaction_date: booking.payment.transaction_date,
                    transaction_status: booking.payment.transaction_status,
                    transaction_response: booking.payment.transaction_response
                };


                if (booking.job_no == "") {
                    if (booking.date && booking.time_slot) {
                        var stage = "Booking"
                        var status = "Confirmed";
                    }
                    else {
                        var stage = "Estimation"
                        var status = "Approved";
                    }
                }
                else {
                    if (booking.status != "JobOpen") {
                        var stage = "";
                        var status = "";
                    }
                    else {
                        var stage = "In-Process";
                        var status = "In-Process"
                    }
                }

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error Occurred Try again",
                            responseData: err
                        });
                    }
                    else {
                        if (status != "") {
                            Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                                if (err) {
                                    return res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Error Occurred Try again",
                                        responseData: err
                                    });
                                }
                                else {
                                    var activity = {
                                        user: loggedInDetails._id,
                                        name: loggedInDetails.name,
                                        stage: stage,
                                        activity: status,
                                    }

                                    fun.bookingLog(booking._id, activity);
                                }
                            });
                        }


                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "ServiceApproved",
                            activity: "ServiceApproved",
                        }

                        fun.bookingLog(booking._id, activity);

                        var notify = {
                            receiver: [booking.advisor],
                            activity: "booking",
                            tag: "Approved",
                            source: booking._id,
                            sender: booking.user,
                            points: 0
                        };

                        fun.newNotification(notify);

                        if (booking.converted) {
                            if (booking.manager) {
                                var notify = {
                                    receiver: [booking.manager],
                                    activity: "booking",
                                    tag: "Approved",
                                    source: booking._id,
                                    sender: booking.user,
                                    points: 0
                                };

                                fun.newNotification(notify);
                            }
                        }
                        event.jobSms(notify);

                        var updated = await Booking.findById(booking.id).exec();

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Service has been added...",
                            responseData: updated
                        });
                    }
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Approve service before save...",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.get('/job/inspection/get', async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var booking = await Booking.findById(req.query.booking).exec();
        if (booking) {
            var file = await JobInspection.find({ booking: booking._id }).select('file type stage').exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: file
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.put('/my/booking/status', xAccessToken.token, async function (req, res, next) {
    var rules = {
        id: 'required',
        status: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = req.headers['business'];
        if (req.body.status == "Cancelled" || req.body.status == "Confirmed") {
            var check = await Booking.findOne({ _id: req.body.id, user: user, is_services: true }).exec();
        }

        var getUser = await User.findById(user).exec();

        if (!check) {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {},
            });
        }
        else {
            var status = check.status;
            var data = {
                status: req.body.status,
                updated_at: new Date()
            };

            Booking.findOneAndUpdate({ _id: req.body.id }, { $set: data }, { new: true }, async function (err, doc) {
                if (err) {
                    var json = ({
                        responseCode: 422,
                        responseMessage: "Error occured",
                        responseData: {}
                    });

                    res.status(422).json(json)
                }
                else {
                    var booking = await Booking.findOne({ _id: check._id }).exec();
                    var activity = {
                        user: user,
                        model: "Booking",
                        activity: "updateBookingStatus",
                        source: booking._id,
                        modified: check.status + " to " + data.status,
                        created_at: data.updated_at,
                        updated_at: data.updated_at
                    };

                    fun.bookingLog(booking._id, activity);

                    event.zohoLead(booking._id);

                    if (booking.payment.careager_cash > 0) {
                        var point = {
                            status: true,
                            user: user,
                            activity: "coin",
                            tag: "BookingCancelled",
                            points: booking.payment.careager_cash,
                            source: booking._id,
                            title: "",
                            body: "",
                            sender: null
                        };
                        fun.addPoints(point)
                    }


                    if (booking.package) {
                        var package = await UserPackage.findOne({ _id: booking.package, user: user, car: booking.car }).exec();
                        if (package) {
                            var checkPackageUsed = await PackageUsed.find({ package: booking.package, user: user, booking: booking._id, car: booking.car }).count().exec();

                            if (checkPackageUsed > 0) {
                                await PackageUsed.remove({ package: booking.package, user: user, booking: booking._id, car: booking.car }).exec();
                            }
                        }
                    }

                    if (booking.payment.coupon) {
                        var checkCouponUsed = await CouponUsed.find({ user: user, booking: booking._id }).count().exec();
                        if (checkCouponUsed > 0) {
                            await CouponUsed.remove({ user: user, booking: booking._id }).exec();
                        }
                    }

                    Booking.findOneAndUpdate({ _id: req.body.id }, { $set: { due: { due: 0 } } }, { new: true }, async function (err, doc) { })

                    var notify = {
                        receiver: [booking.advisor],
                        activity: "booking",
                        tag: "userCancelledBooking",
                        source: booking._id,
                        sender: user,
                        points: 0
                    }

                    fun.newNotification(notify);

                    if (booking.converted) {
                        if (booking.manager) {
                            var notify = {
                                receiver: [booking.manager],
                                activity: "booking",
                                tag: "userCancelledBooking",
                                source: booking._id,
                                sender: user,
                                points: 0
                            }
                            fun.newNotification(notify);
                        }
                    }
                }

                event.zohoLead(booking._id);

                var json = ({
                    responseCode: 200,
                    responseMessage: "Booking has been " + booking.status,
                    responseData: {}
                });
                res.status(200).json(json)
            });
        }
    };
});
router.put('/booking/status', xAccessToken.token, async function (req, res, next) {
    var rules = {
        id: 'required',
        status: 'required',
    };

    var validation = new Validator(req.body, rules);
    // console.log("BOOKING/STATUS");
    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];


        var loggedInDetails = await User.findById(user).exec();
        var check = await Booking.findOne({ _id: req.body.id, business: business, is_services: true }).exec();
        var role = await Management.findOne({ business: business, user: loggedInDetails._id }).exec();

        if (!check) {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
        else {
            var status = check.status;
            var data = {
                status: req.body.status,
                status: req.body.status,
                is_rework: false,
                is_reviewed: false,
                updated_at: new Date()
            }

            if (check.status != req.body.status) {
                Booking.findOneAndUpdate({ _id: req.body.id }, { $set: data }, { new: true }, async function (err, doc) {
                    if (err) {
                        var json = ({
                            responseCode: 422,
                            responseMessage: "Error occured",
                            responseData: {}
                        });
                        res.status(422).json(json)
                    }
                    else {
                        var booking = await Booking.findOne({ _id: check._id }).exec();
                        var activity = {
                            user: user,
                            model: "Booking",
                            activity: "updateBookingStatus",
                            source: booking._id,
                            modified: check.status + " to " + data.status,
                            created_at: data.updated_at,
                            updated_at: data.updated_at
                        }

                        fun.bookingLog(check._id, activity);

                        if (req.body.status == "Confirmed") {
                            var notify = {
                                receiver: [booking.user],
                                activity: "booking",
                                tag: "bookingConfirmation",
                                source: check._id,
                                sender: user,
                                points: 0
                            };
                            fun.newNotification(notify);
                            event.bookingStatusMail(booking.user, booking._id, business)
                        }

                        if (req.body.status == "Cancelled") {
                            if (req.body.remark) {
                                var remark = {
                                    remark: req.body.remark,
                                    added_by: decoded.user,
                                    created_at: data.updated_at,
                                    updated_at: data.updated_at
                                };
                                // console.log("5414 --   ")
                                await whatsAppEvent.bookingCancel(booking._id, business)
                                var bookingData = await Booking.findOne({ _id: req.body.id, business: business, })
                                    .populate({ path: 'business', select: 'name avatar avatar_address contact_no isCarEager uuid business_info' })
                                    .populate({ path: 'user', select: 'name contact_no address _id' })
                                    .populate({ path: 'car', select: 'registration_no title' })
                                    .exec()
                                var activity = "Booking"
                                fun.webNotification(activity, bookingData);
                                // console.log("5416 --   ")

                                event.bookingStatusMail(booking.user, booking._id, business)
                                // console.log("5416   -- sumit....")

                                Booking.findOneAndUpdate({ _id: booking._id }, { $push: { remarks: remark } }, { new: false }, async function (err, doc) {
                                    if (err) {
                                        // console.log('error', err)
                                    } else {
                                        let lead = await Lead.findOneAndUpdate({ _id: mongoose.Types.ObjectId(doc.lead) }, { "remark.status": "Closed" }).exec()
                                        // await OutBoundLead.findOneAndUpdate({ _id: mongoose.Types.ObjectId(doc.outbound_lead) }, { "status": "Lost" }).exec()
                                        // console.log('Your closed lead...', lead._id)
                                    }
                                });
                            }
                            // console.log("5427 --- -- -")
                            if (booking.payment.coupon) {
                                var checkCouponUsed = await CouponUsed.find({ booking: booking._id }).count().exec();
                                if (checkCouponUsed == 1) {
                                    await CouponUsed.remove({ booking: booking._id }).exec();
                                }
                            }
                            // console.log("5437 --- -- -")

                            if (role.role == "Service Advisor") {
                                if (booking.converted) {
                                    if (booking.manager) {
                                        var notify = {
                                            receiver: [booking.manager],
                                            activity: "booking",
                                            tag: "BookingCancelled",
                                            source: check._id,
                                            sender: loggedInDetails._id,
                                            points: 0
                                        }

                                        fun.newNotification(notify);
                                    }
                                }
                            }


                            else if (role.role == "CRE") {
                                // console.log("5458 --- -- -")
                                var notify = {
                                    receiver: [booking.advisor],
                                    activity: "booking",
                                    tag: "BookingCancelled",
                                    source: check._id,
                                    sender: loggedInDetails._id,
                                    points: 0
                                }

                                fun.newNotification(notify);
                            }
                            else {
                                // console.log("5471 --- -- -")

                                if (booking.converted) {
                                    if (booking.manager) {
                                        var notify = {
                                            receiver: [booking.manager],
                                            activity: "booking",
                                            tag: "BookingCancelled",
                                            source: check._id,
                                            sender: loggedInDetails._id,
                                            points: 0
                                        }

                                        fun.newNotification(notify);
                                    }
                                }

                                var notify = {
                                    receiver: [booking.advisor],
                                    activity: "booking",
                                    tag: "BookingCancelled",
                                    source: check._id,
                                    sender: loggedInDetails._id,
                                    points: 0
                                }

                                fun.newNotification(notify);

                            }

                            var notify = {
                                receiver: [booking.user],
                                activity: "booking",
                                tag: "BookingCancelled",
                                source: check._id,
                                sender: loggedInDetails._id,
                                points: 0
                            }

                            fun.newNotification(notify);

                            if (booking.payment.careager_cash > 0) {
                                var point = {
                                    user: booking.user,
                                    activity: "coin",
                                    tag: "BookingCancelled",
                                    source: booking._id,
                                    sender: null,
                                    title: "",
                                    body: "",
                                    points: booking.payment.careager_cash,
                                    status: true
                                }

                                fun.addPoints(point)
                            }

                        }

                        else if (req.body.status == "Completed" && status != "Completed") {
                            var point = {
                                user: check.user,
                                activity: "coin",
                                tag: "bookingCompleted",
                                source: check._id,
                                sender: null,
                                points: 50,
                                title: "",
                                body: "",
                                status: true
                            }

                            fun.addPoints(point)

                            if (booking.payment.labour_cost >= 5000) {
                                var getRefree = await User.findById(booking.user).exec();

                                if (getRefree.account_info.added_by) {
                                    var refree = await User.findById(getRefree.account_info.added_by).exec();
                                    if (refree) {
                                        if (refree.account_info.type = "driver") {
                                            var commission = booking.payment.labour_cost * .05;
                                            var cashInterest = refree.careager_cash * .05;

                                            var cash = parseFloat(cashInterest) + parseFloat(commission);

                                            var point = {
                                                user: refree._id,
                                                points: parseFloat(cash),
                                                activity: "coin",
                                                tag: "commission",
                                                source: booking._id,
                                                title: "",
                                                body: "",
                                                status: true
                                            }
                                            fun.addPoints(point);
                                        }
                                    }
                                }
                            }

                            if (booking.manager) {
                                var notify = {
                                    receiver: [booking.manager],
                                    activity: "booking",
                                    tag: "bookingCompleted",
                                    source: check._id,
                                    sender: null,
                                    points: 0
                                }

                                fun.newNotification(notify);
                            }

                            if (booking.due) {
                                var paid_total = booking.payment.paid_total + booking.due.due;
                                Booking.findOneAndUpdate({ _id: req.body.id }, { $set: { "payment.payment_status": "Success", "payment.paid_total": paid_total, due: null } }, { new: false }, async function (err, doc) { })
                            }
                        }
                        // console.log("5591")
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Booking",
                            activity: req.body.status,
                        };

                        fun.bookingLog(booking._id, activity);
                        event.zohoLead(booking._id);
                        businessFunctions.zohoOutboundLead(booking._id);

                        var json = ({
                            responseCode: 200,
                            responseMessage: "Booking has been " + req.body.status,
                            responseData: {}
                        });
                        // console.log("5607")
                        res.status(200).json(json)
                    }
                });
            }
            else {
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Booking has been " + req.body.status,
                    responseData: {}
                });
            }
        }
    }
});

router.put('/my/booking/reschedule/', xAccessToken.token, async function (req, res, next) {
    var rules = {
        id: 'required',
        date: 'required',
        time_slot: 'required'
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        if (req.body.package == "") {
            req.body.package = null;
        }

        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = req.headers['business'];
        var total = 0;
        var labour_cost = 0;
        var part_cost = 0;
        var bookingService = [];
        var services = req.body.services;
        var loggedInDetails = await User.findById(user).exec();

        var booking = await Booking.findOne({ _id: req.body.id, user: user, is_services: true }).exec();


        if (booking) {
            var d1 = new Date(req.body.date);
            var date = new Date();
            var d2 = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            var seconds = (d1.getTime() - d2.getTime()) / 1000;
            // console.log(seconds)
            if (seconds >= 172800) {
                var status = "Confirmed"
            }
            else {
                var status = "Pending"
            }

            var data = {
                date: new Date(req.body.date).toISOString(),
                time_slot: req.body.time_slot,
                status: status,
                updated_at: new Date()
            };

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: false }, async function (err, doc) {
                if (err) {
                    var json = ({
                        responseCode: 400,
                        responseMessage: "Error occured",
                        responseData: {}
                    });
                    res.status(400).json(json)
                }
                else {
                    if (loggedInDetails.account_info.type == "user") {
                        var notify = {
                            receiver: [booking.business],
                            activity: "booking",
                            tag: "bookingReschedule",
                            source: booking._id,
                            sender: user,
                            points: 0,
                            tz: req.headers['tz']
                        };
                        fun.newNotification(notify);
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Booking",
                            activity: "BookingReschedule",
                        };

                        fun.bookingLog(booking._id, activity);
                    }
                    else {
                        var notify = {
                            receiver: [booking.user],
                            activity: "booking",
                            tag: "bookingReschedule",
                            source: booking._id,
                            sender: user,
                            points: 0,
                            tz: req.headers['tz']
                        };
                        fun.newNotification(notify);

                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Booking",
                            activity: "BookingReschedule",
                        };

                        fun.bookingLog(booking._id, activity);
                    }

                    event.rescheduleMail(booking._id, loggedInDetails.account_info.type, business);

                    var activity = {
                        user: user,
                        model: "Booking",
                        activity: "bookingReschedule",
                        source: booking._id,
                        modified: moment(booking.date).tz(req.headers['tz']).format('ll') + " (" + booking.time_slot + ")" + " to " + moment(data.date).tz(req.headers['tz']).format('ll') + " (" + data.time_slot + ")",
                        created_at: data.updated_at,
                        updated_at: data.updated_at
                    }
                    fun.bookingLog(activity);

                    var json = ({
                        responseCode: 200,
                        responseMessage: "Booking rescheduled",
                        responseData: {
                            date: moment(data.date).tz(req.headers['tz']).format('ll'),
                            time_slot: data.time_slot,
                            updated_at: data.updated_at
                        }
                    });
                    res.status(200).json(json)
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {},
            });
        }
    }
});

router.post('/job/review/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        rating: 'required',
        recommendation: 'required'
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var businessReview = new Object();


        var booking = await Booking.findOne({ _id: req.body.booking }).exec();
        if (booking) {
            var status = req.body.status;
            req.body.status = false;
            req.body.user = booking.user;
            req.body.business = booking.business;
            req.body.created_at = new Date();
            req.body.updated_at = new Date();
            await Review.create(req.body).then(async function (data) {
                if (status == "Dissatisfied") {
                    event.zohoCustomStatus(booking._id, "Dissatisfied");
                }
                else if (status == "Satisfied") {
                    event.zohoCustomStatus(booking._id, "Satisfied");
                }
                else if (status == "Rework") {
                    event.zohoCustomStatus(booking._id, "Rework");
                }

                Review.findOneAndUpdate({ booking: booking._id }, { $set: { status: false } }, { new: true }, async function (err, doc) { });
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { is_reviewed: true } }, { new: true }, async function (err, doc) { });

                var point = {
                    user: booking.user,
                    activity: "coin",
                    tag: "businessReview",
                    source: booking._id,
                    points: 25,
                    title: "",
                    body: "",
                    status: true
                }
                fun.addPoints(point);

                var notify = {
                    receiver: [data.business],
                    sender: data.user,
                    activity: "profile",
                    tag: "review",
                    source: booking._id,
                    points: data.rating,
                }

                fun.newNotification(notify);
                await Review.find({ _id: data._id })
                    .populate({ path: 'user', select: 'name username avatar avatar_address account_info' })
                    .cursor().eachAsync(async (review) => {
                        businessReview = {
                            _id: review._id,
                            id: review._id,
                            business: review.business,
                            booking: review.booking,
                            review_points: review.review_points,
                            rating: review.rating,
                            review: review.review,
                            recommendation: review.recommendation,
                            type: review.type,
                            created_at: moment(review.created_at).tz(req.headers['tz']).format('ll'),
                            updated_at: moment(review.updated_at).tz(req.headers['tz']).format('ll'),
                            user: review.user
                        }
                    });



                var lead = await Lead.findById(booking.lead).populate('assignee').exec();
                //To Create Out Bound Leads :Abhinav Tyagi
                if (status == "Dissatisfied") {
                    // outboundLeadAdd
                    var lostCreated = await q.all(businessFunctions.outboundLeadAdd(booking, 'Dissatisfied'));
                    // var lostCreated = await q.all(businessFunctions.outboundLostLeadAdd(lead, 'Lost', loggedInDetails));
                    // console.log("Lost Lead Created = " + JSON.stringify(lostCreated))
                }

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Thank You For Your Review",
                    responseData: businessReview
                });
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            })
        }
    }
});

router.put('/customer-info/update', xAccessToken.token, async function (req, res, next) {
    businessFunctions.logs("INFO: /customer-info/update Api Called from booking.js," + " " + "Request Headers:" + JSON.stringify(req.headers) + ", " + "Request Body:" + JSON.stringify(req.body));

    var rules = {
        user: 'required',
        // name: 'required',
        contact_no: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
            businessFunctions.logs("ERROR: Validation failed, Contact_no and userId are required fields. ");
        }
        res.status(422).json({
            responseCode: 422,
            responseMessage: "All field required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
            businessFunctions.logs("DEBUG: Validated successfully and Find User," + " " + "UserId:" + req.body.user);
        }
        var user = await User.findById(req.body.user).exec();
        if (user) {
            var check = await User.findOne({ contact_no: req.body.contact_no, _id: { $ne: user._id }, "account_info.type": user.account_info.type, }).exec();

            if (check) {
                if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
                    businessFunctions.logs("WARNING: Contact_no Already Exists," + " " + "contact_no :- " + req.body.contact_no);
                }
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Contact no already exist",
                    responseData: {}
                });
            }
            else {
                var data = {}
                if (req.body.edit == 'basic-details') {
                    if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                        businessFunctions.logs("DEBUG: Upating User's(Analyst) Basic details," + " " + "Analyst Name:" + user.name);
                    }
                    data = {
                        name: req.body.name,
                        contact_no: req.body.contact_no,
                        email: req.body.email,
                        "business_info.company_name": req.body.company_name,
                        "business_info.gstin": req.body.gstin,
                        updated_at: new Date()
                    }
                } else if (req.body.edit == 'address') {
                    if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                        businessFunctions.logs("DEBUG: Upating User's(Analyst) Address details," + " " + "Analyst Name:" + user.name);
                    }
                    data = {
                        address: {
                            country: req.body.country,
                            landmark: req.body.location,
                            zip: req.body.zip,
                            state: req.body.state,
                            area: req.body.area,
                            city: req.body.city,
                            timezone: req.body.timezone,
                            address: req.body.address
                        }
                    }
                } else {
                    data = {
                        name: req.body.name,
                        contact_no: req.body.contact_no,
                        email: req.body.email,
                        "business_info.company_name": req.body.company_name,
                        "business_info.gstin": req.body.gstin,
                        updated_at: new Date()
                    }
                }
                User.findOneAndUpdate({ _id: user._id }, {
                    $set: data
                }, { new: false }, function (err, doc) {
                    if (err) {
                        if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                            businessFunctions.logs("ERROR:Error Occured in updating user's(Analyst) details," + " " + "Analyst Name:" + user.name);
                        }
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Error Occurred",
                            responseData: err,
                        })
                    }
                    else {
                        if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                            businessFunctions.logs("INFO:User(Analyst) details Updated Successfully," + " " + "Analyst Name:" + user.name);
                        }
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "User details updated...",
                            responseData: {},
                        })
                    }
                });
            }
        }
        else {
            if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
                businessFunctions.logs("WARNING: User not found for the given userId," + " " + "UserId:" + req.body.user);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "User not found",
                responseData: {},
            })
        }
    }
});
router.post('/estimation/services/search', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];

        var totalResult = 0;
        // console.log("Service = " + req.body.service)
        if (req.body.service) {
            req.body.service = req.body.service.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");

        }
        var booking = await Booking.findOne({ _id: req.body.booking }).exec();
        if (booking) {
            var claim = false;
            if (booking.insurance_info) {
                claim = booking.insurance_info.claim
            }

            var quantity = 1;
            if (req.body.quantity) {
                quantity = parseInt(req.body.quantity)
            }

            var car = await Car.findById(booking.car).populate('model').exec();
            if (car) {
                var packages = [];

                await Service.find({ segment: car.model.segment, part_cost: 0, service: new RegExp(req.body.service, "i"),/* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        // console.log(package);
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.logtoFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            discount: _.sumBy(labours, x => x.discount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Service.find({ model: car.model._id, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            sub_category: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });

                await Collision.find({ segment: car.model.segment, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, service: new RegExp(req.body.service, "i"), business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
                await Collision.find({ model: car.model._id, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            sub_category: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });
                await Customization.find({ model: car.model._id, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            sub_category: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });
                await Customization.find({ segment: car.model.segment, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, service: new RegExp(req.body.service, "i"), business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                /*var quantity = 1;*/
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
                await Detailing.find({ model: car.model._id, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            sub_category: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });
                await Detailing.find({ segment: car.model.segment, /* publish: true ,*/ status: { $in: ["Custom", "Standard"] }, service: new RegExp(req.body.service, "i"), business: business, })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }


                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }



                        packages.push({
                            publish: service.publish,
                            custom: service.custom,
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
                var package = packages.sort((a, b) => b.publish - a.publish)

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "",
                    responseData: package
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Car not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.post('/estimation/services/search/old', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];

        var totalResult = 0;

        var booking = await Booking.findOne({ _id: req.body.booking }).exec();
        if (booking) {
            var claim = false;
            if (booking.insurance_info) {
                claim = booking.insurance_info.claim
            }

            var quantity = 1;
            if (req.body.quantity) {
                quantity = parseInt(req.body.quantity)
            }

            var car = await Car.findById(booking.car).populate('model').exec();
            if (car) {
                var packages = [];

                await Service.find({ business: business, segment: car.model.segment, part_cost: 0, publish: true, service: new RegExp(req.body.service, "i"), business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        // console.log(package);
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            discount: _.sumBy(labours, x => x.discount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Service.find({ business: business, model: car.model._id, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        // return res.json(service)
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            package: service.package,
                            sub_category: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });

                await Collision.find({ business: business, segment: car.model.segment, publish: true, service: new RegExp(req.body.service, "i"), business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Customization.find({ business: business, segment: car.model.segment, publish: true, service: new RegExp(req.body.service, "i"), business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                /*var quantity = 1;*/
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }


                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Detailing.find({ business: business, segment: car.model.segment, publish: true, service: new RegExp(req.body.service, "i"), business: business, })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: booking._id,
                            package: booking.package,
                            car: booking.car,
                            category: service.type,
                            service: service.service,
                            claim: claim,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }


                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: 100,
                                    insurance_dep: 0,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (service.opening_fitting.length != 0) {
                            service.opening_fitting[0].customer_dep = 100;
                            service.opening_fitting[0].insurance_dep = 0;
                        }

                        if (service.parts.length != 0) {
                            service.parts[0].customer_dep = 100;
                            service.parts[0].insurance_dep = 0;
                        }



                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "",
                    responseData: packages
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Car not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.get('/user/packages/get', xAccessToken.token, async function (req, res, next) {
    var rules = {
        type: 'required',
        query: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];

        if (req.query.type == "booking") {
            var booking = await Booking.findById(req.query.query).exec();
            if (booking) {
                var user = booking.user;
                var car = booking.car;
                var packages = [];

                var purchased = [];

                await UserPackage.find({ user: user, business: business, $or: [{ car: car }, { car: null }] }).cursor().eachAsync(async (package) => {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);
                    var bar = package.created_at;
                    bar.setDate(bar.getDate() + package.validity);
                    var e = bar;
                    bar = moment.tz(bar, req.headers['tz'])

                    var baz = bar.diff(serverTime);
                    if (baz > 0) {
                        purchased.push(package._id);
                        packages.push({
                            package: package._id,
                            name: package.name,
                            description: package.description,
                            payment: package.payment,
                            discount: package.discount,
                            type: "package",
                            cost: package.cost,
                            id: package._id,
                            _id: package._id,
                            category: package.category,
                            label: package.label,
                            validity: package.validity,
                            expired_at: moment(e).tz(req.headers['tz']).format('ll'),
                            listing: "purchased"
                        });
                    }
                });

                await Package.find({ label: "special" }).cursor().eachAsync(async (service) => {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);

                    var bar = service.created_at;
                    bar.setDate(bar.getDate() + service.validity);

                    var e = bar;
                    bar = moment.tz(bar, req.headers['tz'])

                    var baz = bar.diff(serverTime);

                    var check = await UserPackage.find({ user: user, package: service._id, car: car.car }).count().exec();
                    if (check <= 0) {
                        if (baz > 0) {
                            packages.push({
                                package: service._id,
                                name: service.name + ' - (Package)',
                                mrp: 0,
                                discount: service.discount,
                                labour_cost: service.cost,
                                part_cost: 0,
                                type: "package",
                                cost: service.cost,
                                id: service.id,
                                _id: service._id,
                                label: service.label,
                                doorstep: false,
                                validity: service.validity,
                                doorstep: service.doorstep,
                                expired_at: moment(service.expired_at).tz(req.headers['tz']).format('ll'),
                                listing: "new"
                            });
                        }
                    }
                });

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "",
                    responseData: packages
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Booking not found",
                    responseData: {}
                });
            }
        }
        else if (req.query.type == "user") {
            var booking = await Booking.findById(req.query.query).exec();
            if (booking) {
                var user = booking.user;
                var car = booking.car;
                var packages = [];

                var purchased = [];

                await UserPackage.find({ user: user, car: car, business: business }).cursor().eachAsync(async (package) => {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);
                    var bar = package.created_at;
                    bar.setDate(bar.getDate() + package.validity);
                    var e = bar;
                    bar = moment.tz(bar, req.headers['tz'])

                    var baz = bar.diff(serverTime);
                    if (baz > 0) {
                        purchased.push(package._id);
                        packages.push({
                            package: package._id,
                            name: package.name,
                            description: package.description,
                            payment: package.payment,
                            discount: package.discount,
                            type: "package",
                            cost: package.cost,
                            id: package._id,
                            _id: package._id,
                            category: package.category,
                            label: package.label,
                            validity: package.validity,
                            expired_at: moment(e).tz(req.headers['tz']).format('ll'),
                            listing: "purchased"
                        });
                    }
                });

                await Package.find({ label: "special" }).cursor().eachAsync(async (service) => {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);

                    var bar = service.created_at;
                    bar.setDate(bar.getDate() + service.validity);

                    var e = bar;
                    bar = moment.tz(bar, req.headers['tz'])

                    var baz = bar.diff(serverTime);

                    var check = await UserPackage.find({ user: user, package: service._id, car: car.car }).count().exec();
                    if (check <= 0) {
                        if (baz > 0) {
                            packages.push({
                                package: service._id,
                                service: service.name,
                                mrp: 0,
                                discount: service.discount,
                                labour_cost: service.cost,
                                part_cost: 0,
                                type: "package",
                                cost: service.cost,
                                id: service.id,
                                _id: service._id,
                                label: service.label,
                                doorstep: false,
                                validity: service.validity,
                                doorstep: service.doorstep,
                                expired_at: moment(service.expired_at).tz(req.headers['tz']).format('ll'),
                                listing: "new"
                            });
                        }
                    }
                });

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "",
                    responseData: packages
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Booking not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Packages not found",
                responseData: {}
            })
        }
    }
});

//chnaged By Abhinav 10-11-21
router.post('/booking/package/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        listing: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            if (booking.insurance_info) {
                if (booking.insurance_info.claim == true) {
                    var claim = true;
                }
                else {
                    var claim = false;
                }
            }
            else {
                var claim = false;
            }

            var listing = req.body.listing;

            if (claim == false) {
                if (listing == "purchased") {
                    var package = await UserPackage.findOne({ user: booking.user, _id: req.body.package }).exec();

                    // console.log("")
                    if (package) {
                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { package: package._id } }, { new: false }, async function (err, doc) {
                            if (err) {
                                res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Error Occurred! Try again.",
                                    responseData: {}
                                });
                            }
                            else {
                                var updated = await Booking.findById(req.body.booking).exec();
                                var services = updated.services;
                                // bookingService = services;
                                console.log("8698 Service Length = " + services.length)
                                for (var i = 0; i < services.length; i++) {
                                    // || services[i].labour.length == 0
                                    if (services[i].claim == true) {
                                        bookingService.push(services[i]);
                                        console.log("8605")
                                    }
                                    else if (services[i].labour.length > 0) {
                                        // if (services[i].labour.length > 0)
                                        console.log("8604 Else  = ")
                                        var getDiscount = {
                                            booking: updated._id,
                                            package: updated.package,
                                            car: updated.car,
                                            category: services[i].type,
                                            service: services[i].service,
                                            claim: services[i].claim,
                                            tz: req.headers['tz']
                                        };

                                        // console.log("getDiscount = " + JSON.stringify(getDiscount, null, '\t'))
                                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                                        // console.log(" 8617 package = " + JSON.stringify(package, null, '\t'))

                                        var labour_list = services[i].labour;
                                        var labours = [];
                                        //    console.log("8621 Labour Length  = " + labour_list.length)
                                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.rate * x.quantity);
                                        // console.log(" 8623 discount_eligible_labour_cost" + discount_eligible_labour_cost)
                                        if (labour_list.length > 0) {
                                            console.log("8625 IE Labour Legth > 0")

                                            for (var l = 0; l < labour_list.length; l++) {
                                                console.log("8628 For Loop Labour  = " + l)

                                                var discount = req.body.discount;
                                                var discount_total = 0;
                                                var total = 0;
                                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                                var tax = [];
                                                var rate = labour_list[l].rate;
                                                var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                                var tax_rate = tax_info.detail;
                                                var base = amount;

                                                if (Object.keys(package).length > 0) {
                                                    // console.log("y")
                                                    if (package.discount_type == "percent") {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = amount * (discount / 100);
                                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                                            if (amount < 0) {
                                                                amount = 0
                                                            }
                                                        }
                                                    }
                                                    else if (package.discount_type == "fixed") {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                            amount = parseFloat(discount_total.toFixed(2))
                                                            discount = amount - discount_total;
                                                            if (amount < 0) {
                                                                amount = 0
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                                            if (amount < 0) {
                                                                amount = 0
                                                            }
                                                        }
                                                    }
                                                }

                                                if (labour_list[l].amount_is_tax == "exclusive") {
                                                    var tax_on_amount = amount;
                                                    if (tax_rate.length > 0) {
                                                        for (var r = 0; r < tax_rate.length; r++) {
                                                            if (tax_rate[r].rate != tax_info.rate) {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                amount = amount + t;
                                                                tax.push({
                                                                    tax: tax_rate[r].tax,
                                                                    rate: tax_rate[r].rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                            else {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                amount = amount + t;
                                                                tax.push({
                                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                    rate: tax_info.rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                        }
                                                    }
                                                    total = total + amount;
                                                }

                                                if (labour_list[l].amount_is_tax == "inclusive") {
                                                    var x = (100 + tax_info.rate) / 100;
                                                    var tax_on_amount = amount / x;
                                                    if (tax_rate.length > 0) {
                                                        for (var r = 0; r < tax_rate.length; r++) {
                                                            if (tax_rate[r].rate != tax_info.rate) {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                base = base - t;
                                                                tax.push({
                                                                    tax: tax_rate[r].tax,
                                                                    rate: tax_rate[r].rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                            else {
                                                                var t = amount - tax_on_amount;
                                                                base = base - t;
                                                                tax.push({
                                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                    rate: tax_info.rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                        }
                                                        //base = base - discount_total;
                                                    }
                                                    total = total + amount;
                                                }

                                                var tax_details = {
                                                    tax: tax_info.tax,
                                                    rate: tax_info.rate,
                                                    amount: total,
                                                    detail: tax
                                                }

                                                if (!labour_list[l].customer_dep) {
                                                    customer_dep = 100
                                                }
                                                else {
                                                    customer_dep = labour_list[l].customer_dep;
                                                }


                                                if (!labour_list[l].insurance_dep) {
                                                    insurance_dep = 0
                                                }
                                                else {
                                                    insurance_dep = labour_list[l].insurance_dep;
                                                }

                                                labours.push({
                                                    item: labour_list[l].item,
                                                    source: labour_list[l].source,
                                                    rate: parseFloat(labour_list[l].rate),
                                                    quantity: parseFloat(labour_list[l].quantity),
                                                    base: parseFloat(base.toFixed(2)),
                                                    discount: parseFloat(discount_total.toFixed(2)),
                                                    amount: total,
                                                    customer_dep: customer_dep,
                                                    insurance_dep: insurance_dep,
                                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                    amount_is_tax: labour_list[l].amount_is_tax,
                                                    tax: tax_info.tax,
                                                    tax_rate: tax_info.rate,
                                                    tax_info: tax_details
                                                });

                                                // console.log(labours)
                                            }

                                            bookingService.push({
                                                part_cost: services[i].part_cost,
                                                labour_cost: _.sumBy(labours, x => x.amount),
                                                of_cost: services[i].of_cost,
                                                exceeded_cost: services[i].exceeded_cost,
                                                part_rate: services[i].part_rate,
                                                labour_rate: services[i].labour_rate,
                                                quantity: services[i].quantity,
                                                of_rate: services[i].of_rate,
                                                parts: services[i].parts,
                                                labour: labours,
                                                cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                                discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount) + _.sumBy(services[i].parts, x => x.discount),
                                                opening_fitting: services[i].opening_fitting,
                                                part_cost_editable: services[i].part_cost_editable,
                                                labour_cost_editable: services[i].part_cost_editable,
                                                of_cost_editable: services[i].part_cost_editable,
                                                description: services[i].description,
                                                service: services[i].service,
                                                type: services[i].type,
                                                claim: services[i].claim,
                                                custom: services[i].custom,
                                                customer_approval: services[i].customer_approval,
                                                surveyor_approval: services[i].surveyor_approval,
                                                source: services[i].source,
                                            });
                                        }
                                    } else {
                                        bookingService.push(services[i]);
                                    }
                                }

                                var policy_clause = 0
                                if (booking.payment.policy_clause) {
                                    policy_clause = booking.payment.policy_clause;
                                }
                                var salvage = 0
                                if (booking.payment.salvage) {
                                    salvage = booking.payment.salvage;
                                }

                                var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                                var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                                var part_cost = _.sumBy(bookingService, x => x.part_cost);
                                var of_cost = _.sumBy(bookingService, x => x.of_cost);
                                var discount_total = _.sumBy(bookingService, x => x.discount);
                                var pick_up_charges = booking.payment.pick_up_charges;

                                var paid_total = booking.payment.paid_total;

                                var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                                var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                                var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                                var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                                var due = {
                                    due: Math.ceil(due_amount.toFixed(2))
                                };

                                var payment = {
                                    total: payment_total,
                                    careager_cash: careager_cash,
                                    estimate_cost: estimate_cost,
                                    of_cost: of_cost,
                                    labour_cost: labour_cost,
                                    part_cost: part_cost,
                                    payment_mode: booking.payment.payment_mode,
                                    payment_status: booking.payment.payment_status,
                                    coupon: "",
                                    coupon_type: "",
                                    discount_by: "",
                                    discount_type: "Package",
                                    discount: discount_total,
                                    discount_total: discount_total,
                                    policy_clause: policy_clause,
                                    salvage: salvage,
                                    terms: booking.payment.terms,
                                    pick_up_limit: booking.payment.pick_up_limit,
                                    pick_up_charges: booking.payment.pick_up_charges,
                                    paid_total: parseFloat(booking.payment.paid_total),
                                    discount_applied: booking.payment.discount_applied,
                                    transaction_id: booking.payment.transaction_id,
                                    transaction_date: booking.payment.transaction_date,
                                    transaction_status: booking.payment.transaction_status,
                                    transaction_response: booking.payment.transaction_response
                                };
                                // console.log("Booking Services")

                                await Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: { services: bookingService, payment: payment, due: due } }, { new: true }, async function (err, doc) {
                                    if (err) {
                                        res.status(400).json({
                                            responseCode: 400,
                                            responseMessage: "Error 1",
                                            responseData: err
                                        });
                                    }
                                    else {
                                        var updated = await Booking.findById(req.body.booking).exec();
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "Package has been applied",
                                            responseData: updated
                                        });
                                    }
                                });
                            }
                        });
                    }
                    else {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Package not found",
                            responseData: {}
                        });
                    }
                }
                else if (listing == "new") {
                    var getPackage = await Package.findOne({ _id: req.body.package }).exec();
                    if (getPackage) {
                        var expired_at = new Date();
                        expired_at.setDate(expired_at.getDate() + getPackage.validity);
                        var check = await UserPackage.find({ package: req.body.package, user: booking.user, car: booking.car }).exec();

                        if (check <= 0) {
                            UserPackage.create({
                                user: booking.user,
                                car: booking.car,
                                name: getPackage.name,
                                booking: booking._id,
                                business: booking.business,
                                description: getPackage.description,
                                category: getPackage.category,
                                package: getPackage._id,
                                payment: {
                                    total: getPackage.cost,
                                    paid_total: getPackage.cost,
                                },
                                discount: getPackage.discount,
                                validity: getPackage.validity,
                                expired_at: expired_at,
                                status: false,
                                created_at: new Date(),
                                updated_at: new Date()
                            }).then(async function (package) {

                                var package_array = [];
                                var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                                var tax_rate = tax_info.detail;

                                var amount = parseFloat(getPackage.cost);
                                var base = amount;
                                var package_tax = [];

                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t
                                            package_tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                                amount: parseFloat(t.toFixed(2))
                                            })
                                        }
                                        else {
                                            base = base - t
                                            package_tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: parseFloat(tax_info.rate.toFixed(2)),
                                                amount: parseFloat(tax_on_amount.toFixed(2))
                                            })
                                        }
                                    }
                                }

                                package_array.push({
                                    item: getPackage.name,
                                    quantity: 1,
                                    rate: parseFloat(getPackage.cost),
                                    base: parseFloat(base.toFixed(2)),
                                    amount: parseFloat(amount),
                                    discount: 0,
                                    amount_is_tax: "inclusive",
                                    tax_amount: _.sumBy(package_tax, x => x.amount),
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: {
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        base: parseFloat(base.toFixed(2)),
                                        detail: package_tax
                                    }
                                });

                                var service = {
                                    source: package._id,
                                    service: getPackage.name,
                                    description: package.description,
                                    cost: parseFloat(getPackage.cost),
                                    labour_cost: parseFloat(getPackage.cost),
                                    labour: package_array,
                                    part_cost: 0,
                                    parts: [],
                                    opening_fitting: [],
                                    of_cost: 0,
                                    custom: false,
                                    claim: false,
                                    discount: 0,
                                    part_cost_editable: false,
                                    labour_cost_editable: false,
                                    of_cost_editable: false,
                                    customer_approval: false,
                                    surveyor_approval: false,
                                    type: "package"
                                };

                                bookingService.push(service)

                                await Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: { package: package._id } }, { new: true }, async function (err, doc) {

                                    var updated = await Booking.findById(req.body.booking).exec();

                                    var services = updated.services;

                                    if (services.length > 0) {
                                        for (var i = 0; i < services.length; i++) {
                                            if (services[i].claim == true || services[i].labour.length == 0) {
                                                bookingService.push(services[i])
                                            }
                                            else {
                                                var getDiscount = {
                                                    booking: updated._id,
                                                    package: updated.package,
                                                    car: updated.car,
                                                    category: services[i].type,
                                                    service: services[i].service,
                                                    claim: services[i].claim,
                                                    tz: req.headers['tz']
                                                };

                                                var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                                                var labour_list = services[i].labour;
                                                var labours = [];

                                                var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.rate * x.quantity);
                                                if (labour_list.length > 0) {
                                                    for (var l = 0; l < labour_list.length; l++) {
                                                        var discount = req.body.discount;
                                                        var discount_total = 0;
                                                        var total = 0;
                                                        var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                                        var tax = [];
                                                        var rate = labour_list[l].rate;
                                                        var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                                        var tax_rate = tax_info.detail;
                                                        var base = amount;

                                                        if (Object.keys(package).length > 0) {
                                                            if (package.discount_type == "percent") {
                                                                discount = parseFloat(package.discount);
                                                                if (!isNaN(discount) && discount > 0) {
                                                                    var discount_total = amount * (discount / 100);
                                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                                    if (amount < 0) {
                                                                        amount = 0
                                                                    }
                                                                }
                                                            }
                                                            else if (package.discount_type == "fixed") {
                                                                discount = parseFloat(package.discount);
                                                                if (!isNaN(discount) && discount > 0) {
                                                                    var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                                    amount = parseFloat(discount_total.toFixed(2))
                                                                    discount = amount - discount_total;
                                                                    if (amount < 0) {
                                                                        amount = 0
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                discount = parseFloat(package.discount);
                                                                if (!isNaN(discount) && discount > 0) {
                                                                    var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                                    if (amount < 0) {
                                                                        amount = 0
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (labour_list[l].amount_is_tax == "exclusive") {
                                                            var tax_on_amount = amount;
                                                            if (tax_rate.length > 0) {
                                                                for (var r = 0; r < tax_rate.length; r++) {
                                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                        amount = amount + t;
                                                                        tax.push({
                                                                            tax: tax_rate[r].tax,
                                                                            rate: tax_rate[r].rate,
                                                                            amount: parseFloat(t.toFixed(2))
                                                                        });
                                                                    }
                                                                    else {
                                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                        amount = amount + t;
                                                                        tax.push({
                                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                            rate: tax_info.rate,
                                                                            amount: parseFloat(t.toFixed(2))
                                                                        });
                                                                    }
                                                                }
                                                            }
                                                            total = total + amount;
                                                        }

                                                        if (labour_list[l].amount_is_tax == "inclusive") {
                                                            var x = (100 + tax_info.rate) / 100;
                                                            var tax_on_amount = amount / x;
                                                            if (tax_rate.length > 0) {
                                                                for (var r = 0; r < tax_rate.length; r++) {
                                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                        base = base - t;
                                                                        tax.push({
                                                                            tax: tax_rate[r].tax,
                                                                            rate: tax_rate[r].rate,
                                                                            amount: parseFloat(t.toFixed(2))
                                                                        });
                                                                    }
                                                                    else {
                                                                        var t = amount - tax_on_amount;
                                                                        base = base - t;
                                                                        tax.push({
                                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                            rate: tax_info.rate,
                                                                            amount: parseFloat(t.toFixed(2))
                                                                        });
                                                                    }
                                                                }

                                                                //base = base - discount_total;
                                                            }
                                                            total = total + amount;
                                                        }

                                                        var tax_details = {
                                                            tax: tax_info.tax,
                                                            rate: tax_info.rate,
                                                            amount: total,
                                                            detail: tax
                                                        }

                                                        // console.log(discount_total)
                                                        if (!labour_list[l].customer_dep) {
                                                            customer_dep = 100
                                                        }
                                                        else {
                                                            customer_dep = labour_list[l].customer_dep;
                                                        }


                                                        if (!labour_list[l].insurance_dep) {
                                                            insurance_dep = 0
                                                        }
                                                        else {
                                                            insurance_dep = labour_list[l].insurance_dep;
                                                        }


                                                        labours.push({
                                                            item: labour_list[l].item,
                                                            source: labour_list[l].source,
                                                            rate: parseFloat(labour_list[l].rate),
                                                            quantity: parseFloat(labour_list[l].quantity),
                                                            base: parseFloat(base.toFixed(2)),
                                                            discount: parseFloat(discount_total.toFixed(2)),
                                                            amount: total,
                                                            customer_dep: customer_dep,
                                                            insurance_dep: insurance_dep,
                                                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                            amount_is_tax: labour_list[l].amount_is_tax,
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            tax_info: tax_details
                                                        });
                                                    }

                                                    bookingService.push({
                                                        part_cost: services[i].part_cost,
                                                        labour_cost: _.sumBy(labours, x => x.amount),
                                                        of_cost: services[i].of_cost,
                                                        exceeded_cost: services[i].exceeded_cost,
                                                        part_rate: services[i].part_rate,
                                                        labour_rate: services[i].labour_rate,
                                                        quantity: services[i].quantity,
                                                        of_rate: services[i].of_rate,
                                                        parts: services[i].parts,
                                                        labour: labours,
                                                        cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                                        discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount) + _.sumBy(services[i].parts, x => x.discount),
                                                        opening_fitting: services[i].opening_fitting,
                                                        part_cost_editable: services[i].part_cost_editable,
                                                        labour_cost_editable: services[i].part_cost_editable,
                                                        of_cost_editable: services[i].part_cost_editable,
                                                        description: services[i].description,
                                                        service: services[i].service,
                                                        type: services[i].type,
                                                        custom: services[i].custom,
                                                        claim: services[i].claim,
                                                        customer_approval: services[i].customer_approval,
                                                        surveyor_approval: services[i].surveyor_approval,
                                                        source: services[i].source,
                                                    });
                                                }
                                            }
                                        }
                                    }

                                    var policy_clause = 0
                                    if (booking.payment.policy_clause) {
                                        policy_clause = booking.payment.policy_clause;
                                    }
                                    var salvage = 0
                                    if (booking.payment.salvage) {
                                        salvage = booking.payment.salvage;
                                    }

                                    var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                                    var paid_total = booking.payment.paid_total;

                                    var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                                    var part_cost = _.sumBy(bookingService, x => x.part_cost);
                                    var of_cost = _.sumBy(bookingService, x => x.of_cost);
                                    var discount_total = _.sumBy(bookingService, x => x.discount);
                                    var pick_up_charges = booking.payment.pick_up_charges;
                                    var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                                    var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                                    var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
                                    var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                                    var due = {
                                        due: Math.ceil(due_amount.toFixed(2))
                                    }

                                    var payment = {
                                        estimate_cost: estimate_cost,
                                        total: payment_total,
                                        careager_cash: careager_cash,
                                        of_cost: of_cost,
                                        labour_cost: labour_cost,
                                        part_cost: part_cost,
                                        payment_mode: booking.payment.payment_mode,
                                        payment_status: booking.payment.payment_status,
                                        coupon: "",
                                        coupon_type: "",
                                        discount_by: "",
                                        discount_type: "Package",
                                        discount: discount_total,
                                        discount_total: discount_total,
                                        policy_clause: policy_clause,
                                        salvage: salvage,
                                        terms: booking.payment.terms,
                                        pick_up_limit: booking.payment.pick_up_limit,
                                        pick_up_charges: booking.payment.pick_up_charges,
                                        paid_total: parseFloat(booking.payment.paid_total),
                                        discount_applied: booking.payment.discount_applied,
                                        transaction_id: booking.payment.transaction_id,
                                        transaction_date: booking.payment.transaction_date,
                                        transaction_status: booking.payment.transaction_status,
                                        transaction_response: booking.payment.transaction_response
                                    };

                                    Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: { services: bookingService, payment: payment, due: due } }, { new: false }, async function (err, doc) {
                                        if (err) {
                                            res.status(400).json({
                                                responseCode: 400,
                                                responseMessage: "Error",
                                                responseData: err
                                            });
                                        }
                                        else {
                                            var updated = await Booking.findById(req.body.booking).exec();
                                            await whatsAppEvent.newPack(booking._id, getPackage.name, getPackage.cost, business);
                                            event.newPackage(booking._id, getPackage.cost, business);
                                            res.status(200).json({
                                                responseCode: 200,
                                                responseMessage: "Package has been applied",
                                                responseData: updated
                                            });
                                        }
                                    });
                                });
                            });
                        }
                        else {
                            res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Package has been already applied",
                                responseData: {}
                            });
                        }
                    }
                    else {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Package not found",
                            responseData: {}
                        });
                    }
                }
                else {
                    Booking.findOneAndUpdate({ _id: booking._id }, { $set: { package: null } }, { new: false }, async function (err, doc) {
                        if (err) {
                            res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Error Occurred! Try again.",
                                responseData: {}
                            });
                        }
                        else {
                            await UserPackage.remove({ user: booking.user, status: false }).exec();

                            var updated = await Booking.findById(req.body.booking).exec();
                            var services = updated.services;
                            // bookingService=
                            for (var i = 0; i < services.length; i++) {
                                if (services[i].type != "package") {
                                    if (services[i].claim == true || services[i].labour.length == 0) {
                                        bookingService.push(services[i])
                                    }
                                    else {
                                        var getDiscount = {
                                            booking: updated._id,
                                            package: null,
                                            car: updated.car,
                                            category: services[i].type,
                                            service: services[i].service,
                                            claim: services[i].claim,
                                            tz: req.headers['tz']
                                        };

                                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                                        var labour_list = services[i].labour;
                                        var labours = [];

                                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.rate * x.quantity);
                                        // console.log(discount_eligible_labour_cost)
                                        if (labour_list.length > 0) {
                                            for (var l = 0; l < labour_list.length; l++) {
                                                var discount = req.body.discount;
                                                var discount_total = 0;
                                                var total = 0;
                                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                                var tax = [];
                                                var rate = labour_list[l].rate;
                                                var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                                var tax_rate = tax_info.detail;
                                                var base = amount;

                                                if (Object.keys(package).length > 0) {
                                                    // console.log("y")
                                                    if (package.discount_type == "percent") {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = amount * (discount / 100);
                                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                                        }
                                                    }
                                                    else if (package.discount_type == "fixed") {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                            amount = parseFloat(discount_total.toFixed(2))
                                                            discount = amount - discount_total;
                                                        }
                                                    }
                                                    else {
                                                        discount = parseFloat(package.discount);
                                                        if (!isNaN(discount) && discount > 0) {
                                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                                        }
                                                    }
                                                }

                                                if (labour_list[l].amount_is_tax == "exclusive") {
                                                    var tax_on_amount = amount;
                                                    if (tax_rate.length > 0) {
                                                        for (var r = 0; r < tax_rate.length; r++) {
                                                            if (tax_rate[r].rate != tax_info.rate) {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                amount = amount + t;
                                                                tax.push({
                                                                    tax: tax_rate[r].tax,
                                                                    rate: tax_rate[r].rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                            else {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                amount = amount + t;
                                                                tax.push({
                                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                    rate: tax_info.rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                        }
                                                    }
                                                    total = total + amount;
                                                }

                                                if (labour_list[l].amount_is_tax == "inclusive") {
                                                    var x = (100 + tax_info.rate) / 100;
                                                    var tax_on_amount = amount / x;
                                                    if (tax_rate.length > 0) {
                                                        for (var r = 0; r < tax_rate.length; r++) {
                                                            if (tax_rate[r].rate != tax_info.rate) {
                                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                                base = base - t;
                                                                tax.push({
                                                                    tax: tax_rate[r].tax,
                                                                    rate: tax_rate[r].rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                            else {
                                                                var t = amount - tax_on_amount;
                                                                base = base - t;
                                                                tax.push({
                                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                                    rate: tax_info.rate,
                                                                    amount: parseFloat(t.toFixed(2))
                                                                });
                                                            }
                                                        }

                                                        //base = base - discount_total;
                                                    }
                                                    total = total + amount;
                                                }

                                                var tax_details = {
                                                    tax: tax_info.tax,
                                                    rate: tax_info.rate,
                                                    amount: total,
                                                    detail: tax
                                                };

                                                if (!labour_list[l].customer_dep) {
                                                    customer_dep = 100
                                                }
                                                else {
                                                    customer_dep = labour_list[l].customer_dep;
                                                }


                                                if (!labour_list[l].insurance_dep) {
                                                    insurance_dep = 0
                                                }
                                                else {
                                                    insurance_dep = labour_list[l].insurance_dep;
                                                }


                                                labours.push({
                                                    item: labour_list[l].item,
                                                    source: labour_list[l].source,
                                                    rate: parseFloat(labour_list[l].rate),
                                                    quantity: parseFloat(labour_list[l].quantity),
                                                    base: parseFloat(base.toFixed(2)),
                                                    discount: parseFloat(discount_total.toFixed(2)),
                                                    amount: total,
                                                    customer_dep: customer_dep,
                                                    insurance_dep: insurance_dep,
                                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                                    amount_is_tax: labour_list[l].amount_is_tax,
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    tax_info: tax_details
                                                });

                                                // console.log(labours)
                                            }

                                            bookingService.push({
                                                part_cost: services[i].part_cost,
                                                labour_cost: _.sumBy(labours, x => x.amount),
                                                of_cost: services[i].of_cost,
                                                exceeded_cost: services[i].exceeded_cost,
                                                part_rate: services[i].part_rate,
                                                labour_rate: services[i].labour_rate,
                                                quantity: services[i].quantity,
                                                of_rate: services[i].of_rate,
                                                parts: services[i].parts,
                                                labour: labours,
                                                cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                                discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount) + _.sumBy(services[i].parts, x => x.discount),
                                                opening_fitting: services[i].opening_fitting,
                                                part_cost_editable: services[i].part_cost_editable,
                                                labour_cost_editable: services[i].part_cost_editable,
                                                of_cost_editable: services[i].part_cost_editable,
                                                description: services[i].description,
                                                service: services[i].service,
                                                type: services[i].type,
                                                claim: services[i].claim,
                                                custom: services[i].custom,
                                                customer_approval: services[i].customer_approval, surveyor_approval: services[i].surveyor_approval,
                                                source: services[i].source,
                                            });
                                        }
                                    }
                                }
                            }

                            var policy_clause = 0
                            if (booking.payment.policy_clause) {
                                policy_clause = booking.payment.policy_clause;
                            }
                            var salvage = 0
                            if (booking.payment.salvage) {
                                salvage = booking.payment.salvage;
                            }

                            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                            var paid_total = booking.payment.paid_total;
                            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                            var part_cost = _.sumBy(bookingService, x => x.part_cost);
                            var of_cost = _.sumBy(bookingService, x => x.of_cost);
                            var discount_total = _.sumBy(bookingService, x => x.discount);
                            var pick_up_charges = booking.payment.pick_up_charges;

                            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                            var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
                            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                            var due = {
                                due: Math.ceil(due_amount.toFixed(2))
                            }

                            var payment = {
                                estimate_cost: estimate_cost,
                                total: payment_total,
                                careager_cash: careager_cash,
                                of_cost: of_cost,
                                labour_cost: labour_cost,
                                part_cost: part_cost,
                                payment_mode: booking.payment.payment_mode,
                                payment_status: booking.payment.payment_status,
                                coupon: "",
                                coupon_type: "",
                                discount_by: "",
                                discount: discount_total,
                                discount_total: discount_total,
                                policy_clause: booking.payment.policy_clause,
                                salvage: booking.payment.salvage,
                                terms: booking.payment.terms,
                                pick_up_limit: booking.payment.pick_up_limit,
                                pick_up_charges: booking.payment.pick_up_charges,
                                paid_total: parseFloat(booking.payment.paid_total),
                                discount_applied: booking.payment.discount_applied,
                                transaction_id: booking.payment.transaction_id,
                                transaction_date: booking.payment.transaction_date,
                                transaction_status: booking.payment.transaction_status,
                                transaction_response: booking.payment.transaction_response
                            };

                            Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: { services: bookingService, payment: payment, due: due } }, { new: false }, async function (err, doc) {
                                if (err) {
                                    res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Error",
                                        responseData: err
                                    });
                                }
                                else {
                                    var updated = await Booking.findById(req.body.booking).exec();



                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Package has been removed",
                                        responseData: updated
                                    });
                                }
                            });
                        }
                    });
                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Cannot add package to this service",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.get('/booking/coupon/list/error', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var data = [];
    var business = req.headers['business'];

    await Coupon.find({ is_product: false, business: business })
        .cursor().eachAsync(async (coupon) => {
            if (coupon) {
                var used = await CouponUsed.findOne({ code: coupon.code, user: user }).count().exec();
                // console.log("Used = " + used)
                // console.log("coupon.usage_limit = " + coupon.usage_limit)
                if (used < coupon.usage_limit) {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);
                    var bar = moment.tz(coupon.expired_at, req.headers['tz']);
                    var baz = bar.diff(serverTime);
                    // console.log(baz);
                    if (baz > 0) {

                        var limit = await CouponUsed.findOne({ code: coupon.code }).count().exec();
                        // console.log("limit = " + limit)

                        if (limit < coupon.limit) {
                            data.push({
                                _id: coupon._id,
                                id: coupon.id,
                                code: coupon.code,
                                limit: coupon.limit,
                                description: coupon.description
                            });
                        }
                    }
                }
            }
        })
    res.status(200).json({
        responseCode: 200,
        responseMessage: "Coupons",
        responseData: data
    })
});
router.get('/booking/coupon/list', async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var data = [];
    var business = req.headers['business'];
    if (req.body.booking) {
        var booking = await Booking.findById(req.body.booking).exec();
        user = booking.user
    }
    await Coupon.find({ is_product: false, business: business, publish: true })
        .cursor().eachAsync(async (coupon) => {
            if (coupon) {
                var used = await CouponUsed.find({ code: coupon.code, user: user }).count().exec();
                if (used < coupon.usage_limit) {
                    var serverTime = moment.tz(new Date(), req.headers['tz']);
                    var bar = moment.tz(coupon.expired_at, req.headers['tz']);
                    var baz = bar.diff(serverTime);
                    // console.log(baz);
                    if (baz > 0) {

                        var limit = await CouponUsed.find({ code: coupon.code }).count().exec();
                        if (limit < coupon.limit) {
                            data.push({
                                _id: coupon._id,
                                id: coupon.id,
                                code: coupon.code,
                                limit: coupon.limit,
                                description: coupon.description
                            });
                        }
                    }
                }
            }
        })
    res.status(200).json({
        responseCode: 200,
        responseMessage: "Coupons",
        responseData: data
    })
});
router.get('/job/convenience', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var booking = await Booking.findById(req.query.booking).exec();
    if (booking) {
        var addresses = [];
        await Address.find({ user: booking.user })
            .cursor().eachAsync(async (address) => {
                if (address._id.equals(booking.address)) {
                    var checked = true
                }
                else {
                    var checked = false
                }

                addresses.push({
                    _id: address._id,
                    id: address.id,
                    user: address.user,
                    address: address.address,
                    area: address.area,
                    landmark: address.landmark,
                    zip: address.zip,
                    city: address.city,
                    state: address.state,
                    checked: checked
                });
            });

        var conveniences = [];
        // business: booking.business
        await BusinessConvenience.find({})
            .cursor().eachAsync(async (convenience) => {
                if (convenience.convenience == booking.convenience) {
                    var checked = true
                }
                else {
                    var checked = false
                }

                conveniences.push({
                    _id: convenience._id,
                    id: convenience.id,
                    convenience: convenience.convenience,
                    charges: convenience.charges,
                    business: convenience.business,
                    checked: checked
                });
            });

        res.status(200).json({
            responseCode: 200,
            responseMessage: "",
            responseData: {
                address: addresses,
                convenience: conveniences
            }
        });
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.post('/booking/discount/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        type: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();
        var discount = 0;
        var code = "";
        var discount_type = "";
        var discount_by = "";


        var booking = await Booking.findOne({ _id: req.body.booking }).exec();

        if (booking) {
            // console.log("Payment Toatl " + booking.payment.total)
            if (booking.payment.total != 0 && booking.package == null) {
                var bookingService = [];
                var services = booking.services;
                var type = req.body.type;

                if (type == "special") {
                    discount_by = req.body.discount_type;
                    discount_type = "special";

                    var discount_eligible = _.filter(booking.services, claim => claim.claim == false);

                    var discount_eligible_labour = _.map(discount_eligible, 'labour');
                    var discount_eligible_labour_cost = 0;

                    for (var k = 0; k < discount_eligible_labour.length; k++) {
                        discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                    }

                    for (var i = 0; i < services.length; i++) {
                        if (services[i].claim == true) {
                            bookingService.push(services[i])
                        }
                        else {
                            var labour_list = services[i].labour;

                            var labours = [];

                            if (labour_list) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount = req.body.discount;

                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (req.body.discount_type == "percent") {
                                        discount = parseFloat(discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            //base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }


                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: parseFloat(labour_list[l].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });

                                    // console.log(labours)
                                }

                                bookingService.push({
                                    part_cost: services[i].part_cost,
                                    labour_cost: _.sumBy(labours, x => x.amount),
                                    of_cost: services[i].of_cost,
                                    exceeded_cost: services[i].exceeded_cost,
                                    part_rate: services[i].part_rate,
                                    labour_rate: services[i].labour_rate,
                                    quantity: services[i].quantity,
                                    of_rate: services[i].of_rate,
                                    parts: services[i].parts,
                                    labour: labours,
                                    cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].parts, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount),
                                    opening_fitting: services[i].opening_fitting,
                                    part_cost_editable: services[i].part_cost_editable,
                                    labour_cost_editable: services[i].part_cost_editable,
                                    of_cost_editable: services[i].part_cost_editable,
                                    description: services[i].description,
                                    service: services[i].service,
                                    type: services[i].type,
                                    claim: services[i].claim,
                                    custom: services[i].custom,
                                    customer_approval: services[i].customer_approval, surveyor_approval: services[i].surveyor_approval,
                                    source: services[i].source,
                                });
                            }
                        }
                    }
                }

                if (type == "coupon") {
                    discount_type = "coupon"
                    var discount_eligible = [];
                    var coupon_code = req.body.coupon;
                    var coupon = await Coupon.findOne({ code: coupon_code.toUpperCase(), is_product: false }).exec();
                    var used = await CouponUsed.findOne({ code: coupon_code.toUpperCase(), user: booking.user }).count().exec();
                    // return res.json({ Coup: coupon, used: used })
                    if (coupon) {
                        if (used < coupon.usage_limit) {
                            var serverTime = moment.tz(new Date(), req.headers['tz']);
                            var bar = moment.tz(coupon.expired_at, req.headers['tz']);
                            var baz = bar.diff(serverTime);
                            if (baz > 0) {
                                var limit = await CouponUsed.findOne({ code: coupon_code.toUpperCase() }).count().exec();
                                if (limit <= coupon.limit) {
                                    // console.log("Coupon is Avail " + limit)
                                    code = coupon_code.toUpperCase();
                                    discount_by = "coupon";
                                    // console.log(" 9932 coupon.coupon_on  " + coupon.coupon_on)

                                    if (coupon.coupon_on == "total") {
                                        if (coupon.for == "category") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, type => type.type == coupon.label);
                                            var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                            var discount_eligible_labour_cost = 0;
                                            for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, service => service.service == coupon.label);
                                            var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                            var discount_eligible_labour_cost = 0;
                                            for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                            }
                                        }
                                    }
                                    else {
                                        // console.log(" 9955 ELSE   " + coupon.for)

                                        if (coupon.for == "general") {
                                            discount_eligible = _.filter(booking.services, claim => claim.claim == false);
                                            var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                            var discount_eligible_labour_cost = 0;
                                            for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                            }
                                        }
                                        else if (coupon.for == "category") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, type => type.type == coupon.label);
                                            var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                            var discount_eligible_labour_cost = 0;
                                            for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            var filter = _.filter(booking.services, claim => claim.claim == false)
                                            discount_eligible = _.filter(filter, service => service.service == coupon.label);
                                            var discount_eligible_labour = _.map(discount_eligible, 'labour');
                                            var discount_eligible_labour_cost = 0;
                                            for (var k = 0; k < discount_eligible_labour.length; k++) {
                                                discount_eligible_labour_cost = _.sumBy(discount_eligible_labour[k], x => x.rate * x.quantity) + discount_eligible_labour_cost;
                                            }
                                        }
                                    }
                                }
                                else {
                                    return res.status(400).json({
                                        responseCode: 400,
                                        responseMessage: "Coupon has been expired",
                                        responseData: {}
                                    });
                                }
                            }
                            else {
                                return res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Coupon has been expired",
                                    responseData: {}
                                });
                            }
                        }
                        else {
                            return res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Coupon has been used",
                                responseData: {}
                            });
                        }
                    }
                    else {
                        return res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Coupon Not Exist",
                            responseData: {}
                        });
                    }


                    for (var i = 0; i < services.length; i++) {
                        if (services[i].claim == true) {
                            bookingService.push(services[i])
                        }
                        else {
                            var labour_list = services[i].labour;

                            var labours = [];

                            if (labour_list) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                    var tax_rate = tax_info.detail;
                                    var base = amount;


                                    if (coupon.coupon_on == "total") {
                                        if (coupon.for == "category") {
                                            if (services[i].type == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                var discount_total = labour_list[l].discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            if (services[i].service == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                // console.log("no coupon discount")
                                                var discount_total = labour_list[l].discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                            }
                                        }
                                        else {
                                            // console.log("no coupon discount")
                                            var discount_total = labour_list[l].discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                        }
                                    }
                                    else {
                                        if (coupon.for == "general") {
                                            if (coupon.type == "percent") {
                                                discount_by = "percent";
                                                discount = parseFloat(coupon.discount);
                                                if (!isNaN(discount) && discount > 0) {
                                                    discount_total = amount * (discount / 100);
                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }
                                            }
                                            else if (coupon.type == "price") {
                                                discount_by = "percent";
                                                discount = parseFloat(coupon.discount);
                                                if (!isNaN(discount) && discount > 0) {
                                                    discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }
                                            }
                                            else {
                                                var discount_total = labour_list[l].discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                            }
                                        }
                                        else if (coupon.for == "category") {
                                            if (services[i].type == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                var discount_total = labour_list[l].discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                            }
                                        }
                                        else if (coupon.for == "specific") {
                                            if (services[i].service == coupon.label) {
                                                if (coupon.type == "percent") {
                                                    discount_by = "percent";
                                                    discount = parseFloat(coupon.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = amount * (discount / 100);
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                                if (coupon.type == "fixed") {
                                                    labour_list[l].amount_is_tax = "inclusive";
                                                    discount_by = "value";
                                                    discount = parseFloat(coupon.discount);
                                                    discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                    discount = amount - discount_total;
                                                    amount = parseFloat(discount_total.toFixed(2));
                                                    discount_total = discount
                                                    if (amount < 0) {
                                                        amount = 0
                                                    }
                                                }

                                                else if (coupon.type == "price") {
                                                    discount_by = "value";
                                                    discount = parseFloat(coupon.discount);
                                                    if (!isNaN(discount) && discount > 0) {
                                                        discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                                        if (amount < 0) {
                                                            amount = 0
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                // console.log("no coupon discount")
                                                var discount_total = labour_list[l].discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                            }
                                        }
                                        else {
                                            // console.log("no coupon discount")
                                            var discount_total = labour_list[l].discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            //base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: parseFloat(labour_list[l].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }

                                bookingService.push({
                                    quantity: services[i].quantity,
                                    part_cost: services[i].part_cost,
                                    labour_cost: _.sumBy(labours, x => x.amount),
                                    of_cost: services[i].of_cost,
                                    exceeded_cost: services[i].exceeded_cost,
                                    part_rate: services[i].part_rate,
                                    labour_rate: services[i].labour_rate,
                                    of_rate: services[i].of_rate,
                                    parts: services[i].parts,
                                    labour: labours,
                                    cost: services[i].part_cost + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                    opening_fitting: services[i].opening_fitting,
                                    part_cost_editable: services[i].part_cost_editable,
                                    labour_cost_editable: services[i].part_cost_editable,
                                    of_cost_editable: services[i].part_cost_editable,
                                    description: services[i].description,
                                    service: services[i].service,
                                    type: services[i].type,
                                    claim: services[i].claim,
                                    custom: services[i].custom,
                                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(services[i].parts, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount),
                                    customer_approval: services[i].customer_approval, surveyor_approval: services[i].surveyor_approval,
                                    source: services[i].source,
                                });
                            }
                        }
                    }
                }
                var additionalDiscount = 0
                if (type == 'additional') {
                    additionalDiscount = parseFloat(req.body.discount);
                    // console.log("Additional discount " + additionalDiscount)
                    bookingService = services;
                } else {
                    if (booking.payment.additionalDiscount) {
                        additionalDiscount = booking.payment.additionalDiscount
                    }
                }

                if (type == 'careager_cash') {

                    var cashToDeduct = parseFloat(req.body.discount) - booking.payment.careager_cash;
                    // parseFloat(req.body.discount), booking.payment.careager_cash
                    businessFunctions.deductCarEagerCash(booking.user, cashToDeduct)
                    careager_cash = parseFloat(req.body.discount);
                    bookingService = services;
                    // console.log("cash 1 = " + parseFloat(req.body.discount))
                } else {
                    var careager_cash = booking.payment.careager_cash;
                    // console.log("cash 2 = " + parseFloat(careager_cash))

                }

                var policy_clause = 0
                if (booking.payment.policy_clause) {
                    policy_clause = booking.payment.policy_clause;
                }
                var salvage = 0
                if (booking.payment.salvage) {
                    salvage = booking.payment.salvage;
                }

                var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                var part_cost = _.sumBy(bookingService, x => x.part_cost);
                var of_cost = _.sumBy(bookingService, x => x.of_cost);

                var servicesCost = labour_cost + part_cost + of_cost
                var discount_total = _.sumBy(bookingService, x => x.discount);
                var pick_up_charges = booking.payment.pick_up_charges;

                var paid_total = booking.payment.paid_total;


                // console.log("Addition dis COP = " + additionalDiscount)
                // console.log("Addition dis COP = " + labour_cost)
                // console.log("part_cost = " + part_cost)
                // console.log("salvage  = " + salvage)
                // console.log("discount_total  = " + discount_total)
                // console.log("pick_up_charges  = " + pick_up_charges)
                // console.log("pick_up_charges  = " + pick_up_charges)
                // + additionalDiscount

                // console.log("_.sumBy(approved, x => x.labour_cost) = " + _.sumBy(approved, x => x.labour_cost))
                // console.log("_.sumBy(approved, x => x.part_cost)  = " + _.sumBy(approved, x => x.part_cost))
                // console.log("_.sumBy(approved, x => x.of_cost)  = " + _.sumBy(approved, x => x.of_cost))
                // console.log("policy_clause  = " + policy_clause)
                // console.log("salvage  = " + salvage)
                // console.log("pick_up_charges  = " + pick_up_charges)
                // console.log("paid_total  = " + paid_total)
                // console.log("additionalDiscount  = " + additionalDiscount)
                // console.log("careager_cash  = " + careager_cash)



                var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - (careager_cash + additionalDiscount);
                // console.log("Estimate  = " + estimate_cost)
                var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + additionalDiscount + careager_cash);

                var due = {
                    due: Math.ceil(due_amount.toFixed(2))
                }

                var payment = {
                    total: payment_total,
                    estimate_cost: estimate_cost,
                    of_cost: of_cost,
                    labour_cost: labour_cost,
                    part_cost: part_cost,
                    careager_cash: careager_cash,
                    payment_mode: booking.payment.payment_mode,
                    payment_status: booking.payment.payment_status,
                    coupon: coupon_code,
                    coupon_type: "",
                    discount_by: discount_by,
                    discount_type: discount_type,
                    discount: discount,
                    servicesCost: servicesCost,
                    additionalDiscount: additionalDiscount,
                    discount_total: discount_total,
                    policy_clause: booking.payment.policy_clause,
                    salvage: booking.payment.salvage,
                    terms: booking.payment.terms,
                    pick_up_limit: booking.payment.pick_up_limit,
                    pick_up_charges: booking.payment.pick_up_charges,
                    paid_total: parseFloat(booking.payment.paid_total),
                    discount_applied: booking.payment.discount_applied,
                    transaction_id: booking.payment.transaction_id,
                    transaction_date: booking.payment.transaction_date,
                    transaction_status: booking.payment.transaction_status,
                    transaction_response: booking.payment.transaction_response
                };


                await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error",
                            responseData: err
                        });
                    }
                    else {
                        var update = await Booking.findById(booking.id).exec();
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Discount has been applied",
                            responseData: update
                        });
                    }
                });
            }
            else {
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Not eligible for discount",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {}
            });
        }
    }
});

router.post('/booking/discount/remove', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();
        var discount = 0;
        var discount_total = 0;
        var code = "";
        var discount_type = "";
        var discount_by = "";

        var booking = await Booking.findOne({ _id: req.body.booking }).exec();

        if (booking) {
            var bookingService = [];

            if (booking.payment.discount_type == "special") {
                var discount_services = booking.services;
            }
            else if (booking.payment.discount_type == "coupon") {
                var coupon = await Coupon.findOne({ code: booking.payment.coupon }).exec();
                if (coupon) {
                    if (coupon.for == "category") {
                        var discount_services = _.filter(booking.services, type => type.type == coupon.label);
                        var bookingService = _.filter(booking.services, type => type.type != coupon.label);
                    }
                    else if (coupon.for == "specific") {
                        var discount_services = _.filter(booking.services, service => service.service == coupon.label);
                        var bookingService = _.filter(booking.services, service => service.service != coupon.label);
                    }
                    else if (coupon.for == "general") {
                        var discount_services = booking.services;
                    }
                }
                else {
                    var discount_services = []
                }
            }
            else {
                var discount_services = []
            }


            if (discount_services.length > 0) {
                for (var i = 0; i < discount_services.length; i++) {
                    if (discount_services[i].claim == true) {
                        bookingService.push(discount_services[i])
                    }
                    else {
                        var labour_list = discount_services[i].labour;

                        var labours = [];

                        if (labour_list) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (labour_list[l].amount_is_tax == "exclusive") {
                                    var tax_on_amount = amount;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    total = total + amount;
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_amount = total - parseFloat(base.toFixed(2));

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }

                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: parseFloat(labour_list[l].quantity),
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    customer_dep: parseFloat(labour_list[l].customer_dep),
                                    insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }

                            bookingService.push({
                                quantity: discount_services[i].quantity,
                                part_cost: discount_services[i].part_cost,
                                labour_cost: _.sumBy(labours, x => x.amount),
                                of_cost: discount_services[i].of_cost,
                                exceeded_cost: discount_services[i].exceeded_cost,
                                part_rate: discount_services[i].part_rate,
                                labour_rate: discount_services[i].labour_rate,
                                of_rate: discount_services[i].of_rate,
                                parts: discount_services[i].parts,
                                labour: labours,
                                cost: discount_services[i].part_cost + _.sumBy(labours, x => x.amount) + discount_services[i].of_cost,
                                opening_fitting: discount_services[i].opening_fitting,
                                part_cost_editable: discount_services[i].part_cost_editable,
                                labour_cost_editable: discount_services[i].part_cost_editable,
                                of_cost_editable: discount_services[i].part_cost_editable,
                                description: discount_services[i].description,
                                service: discount_services[i].service,
                                type: discount_services[i].type,
                                claim: discount_services[i].claim,
                                custom: discount_services[i].custom,
                                customer_approval: discount_services[i].customer_approval, surveyor_approval: discount_services[i].surveyor_approval,
                                discount: _.sumBy(labours, x => x.discount) + _.sumBy(discount_services[i].parts, x => x.discount) + _.sumBy(discount_services[i].opening_fitting, x => x.discount),
                                source: discount_services[i].source,
                            });
                        }
                    }
                }

                var policy_clause = 0
                if (booking.payment.policy_clause) {
                    policy_clause = booking.payment.policy_clause;
                }

                var salvage = 0
                if (booking.payment.salvage) {
                    salvage = booking.payment.salvage;
                }

                var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id))

                var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                var paid_total = booking.payment.paid_total;
                var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                var part_cost = _.sumBy(bookingService, x => x.part_cost);
                var of_cost = _.sumBy(bookingService, x => x.of_cost);
                var discount_total = _.sumBy(bookingService, x => x.discount);
                var pick_up_charges = booking.payment.pick_up_charges;

                var servicesCost = labour_cost + part_cost + of_cost
                // console.log("28471 = servicesCost = " + servicesCost)
                // console.log("28472 = discount_total = " + discount_total)
                // console.log("28473 = pick_up_charges = " + pick_up_charges)
                // console.log("28471 = additionalDiscount = " + booking.payment.additionalDiscount)
                // console.log("28471 = careager_cash = " + careager_cash)
                var additionalDiscount = 0
                if (booking.payment.additionalDiscount) {
                    additionalDiscount = booking.payment.additionalDiscount
                }
                var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges + additionalDiscount;

                var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - (careager_cash + additionalDiscount);


                var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash + additionalDiscount);

                var due = {
                    due: Math.ceil(due_amount.toFixed(2))
                }

                var payment = {
                    total: payment_total,
                    estimate_cost: estimate_cost,
                    of_cost: of_cost,
                    servicesCost: servicesCost,
                    careager_cash: careager_cash,
                    labour_cost: labour_cost,
                    part_cost: part_cost,
                    payment_mode: booking.payment.payment_mode,
                    payment_status: booking.payment.payment_status,
                    coupon: "",
                    additionalDiscount: additionalDiscount,
                    due: Math.ceil(due_amount.toFixed(2)),
                    coupon_type: "",
                    discount_by: "",
                    discount_type: "",
                    discount: 0,
                    discount_total: 0,
                    policy_clause: booking.payment.policy_clause,
                    salvage: booking.payment.salvage,
                    terms: booking.payment.terms,
                    pick_up_limit: booking.payment.pick_up_limit,
                    pick_up_charges: booking.payment.pick_up_charges,
                    paid_total: parseFloat(booking.payment.paid_total),
                    discount_applied: false,
                    transaction_id: booking.payment.transaction_id,
                    transaction_date: booking.payment.transaction_date,
                    transaction_status: booking.payment.transaction_status,
                    transaction_response: booking.payment.transaction_response
                };

                await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error",
                            responseData: err
                        });
                    }
                    else {
                        await CouponUsed.remove({ booking: booking._id }).exec();
                        var update = await Booking.findById(booking.id).exec();

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Discount has been removed",
                            responseData: update
                        });
                    }
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Coupon not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.get('/services/category/get', xAccessToken.token, async function (req, res, next) {
    var data = [];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;

    await BookingCategory.find({})
        .sort({ position: 1 })
        .cursor().eachAsync(async (d) => {
            data.push({
                _id: d._id,
                id: d._id,
                tag: d.tag,
                position: d.position,
                icon: d.icon,
                title: d.title,
                image: d.image,
                video: d.video,
                home_visibility: d.home_visibility,
                id: d._id,
                nested: d.nested,
                enable: true,
                features: d.features
            })
        });

    res.status(200).json({
        responseCode: 200,
        responseMessage: "",
        responseData: data
    })
});

router.get('/taxes/get', async function (req, res, next) {
    businessFunctions.logs("INFO: /taxes/get Api Called from booking.js," + " " + "Request Headers:" + JSON.stringify(req.headers));

    var tz = req.headers['tz'];
    if (tz) {
        if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
            businessFunctions.logs("DEBUG: Fatching Country details, Timezone:" + req.headers['tz']);
        }
        var country = await Country.findOne({ timezone: { $in: tz } }).exec();
        if (country) {
            if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                businessFunctions.logs("DEBUG: Fatching various taxes and details.");
            }
            var taxes = await Tax.find({ country: country._id, type: 'GST' }).sort({ count: -1 }).exec()
            result = await q.all(businessFunctions.removeDublicateDoumnets(taxes, "tax"));
            if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                businessFunctions.logs("DEBUG: Sending various taxes and details in Response.");
            }
            // taxes = q.all(businessFunctions.removeDublicateDoumnets(taxes, 'type'))
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Tax Slabs",
                responseInfo: {
                    taxes: _.map(result, 'rate')
                },
                responseData: result,
            })
            if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                businessFunctions.logs("INFO: Taxes send in Response Successfully.");
            }
        }
        else {
            if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
                businessFunctions.logs("WARNING: No country details found with given timezone, Timezone:" + req.headers['tz']);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Tax Slabs",
                responseData: {}
            })
        }
    }
    else {
        if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
            businessFunctions.logs("WARNING: Timezone is required in the headers to get taxes.");
        }
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Tax Slabs",
            responseData: {}
        })
    }
});


router.post('/new/service/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var discount_total = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var parts = [];
        var labours = [];
        var opening_fitting = [];

        var customer_approval = false;
        var data = []
        if (req.body.customer_approval == true) {
            customer_approval = true
        }

        var booking = await Booking.findById(req.body.booking).exec();
        // console.log("Service Length " + booking.services.length)
        // parts=booking.services


        // var esrviceExists = _.filter(booking.services, service => service.service.equals(item._id));
        //console.log("req.body.service = " + req.body.service)
        var serviceExists = _.filter(booking.services, service => service.service == req.body.service);
        //console.log("Service Length  = " + serviceExists.length)
        // if
        if (booking) {
            var serviceExists = _.filter(booking.services, service => service.service == req.body.service);
            if (serviceExists.length == 0) {
                var part_list = req.body.parts;
                var labour_list = req.body.labour;
                var of_list = req.body.opening_fitting;

                var claim = false;
                if (req.body.claim == true) {
                    claim = true
                }

                var getDiscount = {
                    booking: booking._id,
                    package: booking.package,
                    car: booking.car,
                    category: req.body.type,
                    service: req.body.service,
                    claim: req.body.claim,
                    tz: req.headers['tz']
                };

                var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                if (part_list) {
                    for (var p = 0; p < part_list.length; p++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ tax: part_list[p].tax }).exec();
                        var tax = [];
                        var rate = part_list[p].rate;
                        var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;

                        if (parseFloat(part_list[p].discount)) {
                            discount_total = parseFloat(part_list[p].discount);
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }

                        if (part_list[p].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            total = total + amount;
                        }

                        if (part_list[p].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }

                            //base = base - discount_total;
                            total = total + amount;
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        var tax_details = {
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        }

                        parts.push({
                            item: part_list[p].item,
                            source: part_list[p].source,
                            hsn_sac: part_list[p].hsn_sac,
                            part_no: part_list[p].part_no,
                            rate: parseFloat(part_list[p].rate),
                            quantity: parseFloat(part_list[p].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: total,
                            discount: part_list[p].discount,
                            issued: part_list[p].issued,
                            customer_dep: parseFloat(part_list[p].customer_dep),
                            insurance_dep: parseFloat(part_list[p].insurance_dep),
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: part_list[p].amount_is_tax,
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });

                    }

                }

                if (labour_list) {
                    discount_eligible_labour_cost = _.sumBy(labour_list, x => x.rate * x.quantity);

                    for (var l = 0; l < labour_list.length; l++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();
                        var tax = [];
                        var rate = labour_list[l].rate;
                        var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;

                        if (package.discount_type == "percent") {
                            discount = parseFloat(package.discount);
                            if (!isNaN(discount) && package.discount > 0) {
                                discount_total = amount * (discount / 100);
                                amount = amount - parseFloat(discount_total.toFixed(2))
                            }
                        }
                        else if (package.discount_type == "fixed") {
                            discount_type = "value";
                            discount = parseFloat(package.discount);
                            discount_total = (amount / discount_eligible_labour_cost) * discount;
                            discount = amount - discount_total;
                            amount = parseFloat(discount_total.toFixed(2));
                        }
                        else if (package.discount_type == "price") {
                            discount_type = "value";
                            discount = parseFloat(package.discount);
                            if (!isNaN(discount) && discount > 0) {
                                discount_total = (amount / discount_eligible_labour_cost) * discount;
                                amount = amount - parseFloat(discount_total.toFixed(2))
                            }
                        }
                        else {
                            discount_total = parseFloat(labour_list[l].discount);
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }


                        if (labour_list[l].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t; parseFloat
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            //total = total+amount;
                        }

                        if (labour_list[l].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            //base = base - discount_total;
                            total = total + amount;
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        };

                        labours.push({
                            item: labour_list[l].item,
                            source: labour_list[l].source,
                            rate: parseFloat(labour_list[l].rate),
                            quantity: parseFloat(labour_list[l].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: amount,
                            discount: discount_total,
                            customer_dep: parseFloat(labour_list[l].customer_dep),
                            insurance_dep: parseFloat(labour_list[l].insurance_dep),
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: labour_list[l].amount_is_tax,
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });
                    }
                }

                if (of_list) {
                    for (var o = 0; o < of_list.length; o++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ tax: of_list[o].tax }).exec();
                        var tax = [];
                        var rate = of_list[o].rate;
                        var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;

                        if (parseFloat(of_list[0].discount)) {
                            discount_total = parseFloat(of_list[o].discount);
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }


                        if (of_list[o].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t; parseFloat
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            total = total + amount;
                        }

                        if (of_list[o].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            //base = base - discount_total;
                            total = total + amount;
                        }

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        opening_fitting.push({
                            item: of_list[o].item,
                            source: of_list[o].source,
                            rate: parseFloat(of_list[o].rate),
                            quantity: parseFloat(of_list[o].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: total,
                            discount: parseFloat(of_list[o].discount),
                            customer_dep: parseFloat(of_list[o].customer_dep),
                            insurance_dep: parseFloat(of_list[o].insurance_dep),
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: of_list[o].amount_is_tax,
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });
                    }
                }
                // console.log("SUB Category New Service Add  " + req.body.sub_category)
                var service_data = {
                    part_cost: _.sumBy(parts, x => x.amount),//
                    labour_cost: parseFloat(_.sumBy(labours, x => x.amount).toFixed(2)),
                    of_cost: _.sumBy(opening_fitting, x => x.amount),
                    part_rate: _.sumBy(parts, x => x.base),
                    labour_rate: _.sumBy(labours, x => x.base),
                    of_rate: _.sumBy(opening_fitting, x => x.base),
                    parts: parts,//
                    labour: labours,//
                    opening_fitting: opening_fitting,//
                    part_cost_editable: true,
                    labour_cost_editable: true,
                    of_cost_editable: true,
                    cost: _.sumBy(parts, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
                    description: req.body.description,//
                    service: req.body.service,//
                    type: req.body.type,
                    sub_category: req.body.sub_category,
                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(parts, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                    customer_approval: customer_approval,
                    surveyor_approval: false,
                    custom: true,
                    exceeded_cost: 0,
                    claim: claim,
                    // date: new Date(),
                }

                businessFunctions.serviceAdd(service_data, booking._id);
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "",
                    responseData: {
                        part_cost: _.sumBy(parts, x => x.amount),
                        labour_cost: parseFloat(_.sumBy(labours, x => x.amount).toFixed(2)),
                        of_cost: _.sumBy(opening_fitting, x => x.amount),
                        part_rate: _.sumBy(parts, x => x.base),
                        labour_rate: _.sumBy(labours, x => x.base),
                        of_rate: _.sumBy(opening_fitting, x => x.base),
                        parts: parts,
                        labour: labours,
                        opening_fitting: opening_fitting,
                        part_cost_editable: true,
                        labour_cost_editable: true,
                        of_cost_editable: true,
                        cost: _.sumBy(parts, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
                        description: req.body.description,
                        service: req.body.service,
                        sub_category: req.body.sub_category,
                        type: req.body.type,
                        discount: _.sumBy(labours, x => x.discount) + _.sumBy(parts, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                        customer_approval: customer_approval,
                        surveyor_approval: false,
                        custom: true,
                        exceeded_cost: 0,
                        claim: claim
                    }
                });
            } else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Service is Already exists! Change the service name.",
                    responseData: {}
                });
            }

        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.delete('/remove/custom/services', xAccessToken.token, async function (req, res, next) {
    var rules = {
        _id: 'required',
        type: 'required',
        // status: 'required',   //To maintain status for search query use in future
    };
    var status = req.query.status;
    var type = req.query.type;
    // console.log(status)
    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var remark = "";
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        // if (status == "Approved") {
        if (req.query.type == "services") {
            // console.log("Inside services")
            await Service.findByIdAndDelete({ _id: req.query._id }).exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Successfully deleted",
                responseData: {}
            })

        } else if (req.query.type == "collision") {
            // console.log("Inside Collision")
            await Collision.findByIdAndDelete({ _id: req.query._id }).exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Successfully deleted",
                responseData: {}
            })
        }

        else if (req.query.type == "detailing") {
            // console.log("Inside Detailing")
            await Detailing.findByIdAndDelete({ _id: req.query._id }).exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Successfully deleted",
                responseData: {}
            })
        }

        else if (req.query.type == "customization") {
            // console.log("Inside Customization")
            await Customization.findByIdAndDelete({ _id: req.query._id }).exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Successfully deleted",
                responseData: {}
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Service not Found",
                responseData: {}
            })
        }
        // }
        // else {
        //     res.status(400).json({
        //         responseCode: 400,
        //         responseMessage: "Service not Matched",
        //         responseData: {}
        //     })

        // }
    }
});

router.put('/convert/custom/to/standard', xAccessToken.token, async function (req, res, next) {
    var rules = {
        _id: 'required',
        type: 'required',
        // status: 'required',   //To maintain status for search query use in future
    };
    var status = req.body.status;
    var type = req.body.type;
    // console.log(status)
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var remark = "";
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        // if (status == "Approved") {
        if (req.body.type == "services") {
            // console.log("Inside services")
            await Service.findOneAndUpdate({ _id: req.body._id }, {
                $set: {
                    approved: true,
                    publish: true,
                    admin_status: "Approved",
                    admin_verified: true,
                    custom: false,
                    status: "Standard",
                    updated_at: new Date()
                }
            }, { new: true }, function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Error Occurred",
                        responseData: err,
                    });
                }
                else {
                    // console.log("Updatedd...... " + req.query._id + " Type= " + req.query.type)
                    // event.adminServiceApproval(type, req.query._id, req.body.remark, req.headers['tz'])
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Successfully Converted",
                        responseData: {}
                    })
                }
            });

        } else if (req.body.type == "collision") {
            // console.log("Inside Collision")
            await Collision.findOneAndUpdate({ _id: req.body._id }, {
                $set: {
                    approved: true,
                    publish: true,
                    admin_status: "Approved",
                    admin_verified: true,
                    custom: false,
                    status: "Standard",
                    // status:req.query.status,
                    updated_at: new Date()
                }
            }, { new: false }, function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Error Occurred",
                        responseData: err,
                    });
                }


                else {
                    // console.log("Updatedd..collision.... " + req.query._id + " Type= " + req.query.type)
                    // event.adminServiceApproval(type, req.query._id, req.body.remark, req.headers['tz'])
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Successfully Converted",
                        responseData: {}
                    })
                }
            });

        }
        else if (req.body.type == "detailing") {
            // console.log("Inside Detailing")
            await Detailing.findOneAndUpdate({ _id: req.body._id }, {
                $set: {
                    approved: true,
                    publish: true,
                    custom: false,
                    admin_status: "Approved",
                    admin_verified: true,
                    status: "Standard",
                    // status:req.query.status,
                    updated_at: new Date()
                }
            }, { new: true }, function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Error Occurred",
                        responseData: err,
                    });
                }
                else {
                    // console.log("Updatedd..detailing.... " + req.query._id + " Type= " + req.query.type)
                    // event.adminServiceApproval(type, req.query._id, req.body.remark, req.headers['tz'])
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Successfully Converted",
                        responseData: {}
                    })
                }
            });

        }
        else if (req.body.type == "customization") {
            // console.log("Inside Customization")
            await Customization.findOneAndUpdate({ _id: req.body._id }, {
                $set: {
                    approved: true,
                    publish: true,
                    custom: false,
                    admin_status: "Approved",
                    admin_verified: true,
                    status: "Standard",
                    // status:req.query.status,
                    updated_at: new Date()
                }
            }, { new: true }, function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Error Occurred",
                        responseData: err,
                    });
                }
                else {
                    // console.log("Updatedd..customization.... " + req.query._id + " Type= " + req.query.type)
                    // event.adminServiceApproval(type, req.query._id, req.body.remark, req.headers['tz'])
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Successfully Converted",
                        responseData: {}
                    })
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Service not Found",
                responseData: {}
            })
        }
        // }
        // else {
        //     res.status(400).json({
        //         responseCode: 400,
        //         responseMessage: "Status not Matched",
        //         responseData: {}
        //     })

        // }
    }
});

router.get('/all/services/get', xAccessToken.token, async function (req, res, next) {
    businessFunctions.logs("INFO: /all/services/get Api Called from booking.js," + " " + "Request Headers:" + JSON.stringify(req.headers) + ", " + "Request Query:" + JSON.stringify(req.query));

    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    // console.log("Business" + business)
    var totalResult = 0;
    var search_query = {};
    var search_query_model = {};

    if (req.query.page == undefined) {
        var page = 0;
    } else {
        var page = req.query.page;
    }
    var page = Math.max(0, parseInt(page));

    if (req.query.limit == undefined) {
        var limit = 10;
    } else {
        var limit = parseInt(req.query.limit);
    }
    if (req.query.search) {
        req.query.search = req.query.search.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");

    }

    if (req.query.type == "standard") {
        //  console.log("Standard")
        search_query = { publish: true, business: business }
        search_query_model = { publish: { $nin: [true, false] }, business: business }
        if (req.query.query == "All") {
            search_query = { publish: true, business: business }
        } else if (req.query.category) {
            if (req.query.category == "services") {
                search_query = { publish: true, business: business, type: "services" }
            } else if (req.query.category == "collision") {
                search_query = { publish: true, business: business, type: "collision" }
            } else if (req.query.category == "customization") {
                search_query = { publish: true, business: business, type: "customization" }
            } else if (req.query.category == "detailing") {
                search_query = { publish: true, business: business, type: "detailing" }
            }
        } else if (req.query.car) {
            //   console.log("Car " + req.query.car)
            var car = await Variant.findById(req.query.car).populate('model').exec();
            if (car) {
                // console.log("segment = " + car.model.segment + ", Model Id = " + car.model._id)
                // 5c65bbf35262de074d5efeeb
                // console.log("car.model.segment = " + car.model.segment)
                search_query = { segment: car.model.segment, part_cost: 0, publish: true, business: business }
                console.log("Car Fuel = " + car.specification.fuel_type)
                search_query_model = { model: car.model._id, part_cost: { $gt: 0 }, publish: true, business: business,fuel: car.specification.fuel_type } //, fuel: car.specification.fuel_type,fuel:car.specification.fuel_type
            }

        } else if (req.query.search) {
            search_query = null;
            search_query = {
                $and: [{
                    publish: true,
                    business: business,
                    $or: [{
                        "service": { $regex: req.query.search, $options: 'i' }
                    },
                    {
                        "type": { $regex: req.query.search, $options: 'i' }
                    }
                    ]
                }]
            }
        }

    } else if (req.query.type == "custom") {
        search_query = { custom: true, business: business }
        search_query_model = { custom: { $nin: [true, false] }, business: business }
        if (req.query.query == "All") {
            search_query = { custom: true, business: business }
        } else if (req.query.category) {
            if (req.query.category == "services") {
                search_query = { custom: true, business: business, type: "services" }
            } else if (req.query.category == "collision") {
                search_query = { custom: true, business: business, type: "collision" }
            } else if (req.query.category == "customization") {
                search_query = { custom: true, business: business, type: "customization" }
            } else if (req.query.category == "detailing") {
                search_query = { custom: true, business: business, type: "detailing" }
            }
        } else if (req.query.car) {
            // console.log("Car = " + req.query.car)
            var car = await Variant.findById(req.query.car).populate('model').exec();
            if (car) {
                // console.log("Car = " + req.query.car)
                search_query = { segment: car.model.segment, part_cost: 0, custom: true, business: business }
                search_query_model = { model: car.model._id, part_cost: { $gt: 0 }, custom: true, business: business }
            }

        } else if (req.query.search) {
            search_query = null;
            search_query = {
                $and: [{
                    custom: true,
                    business: business,
                    $or: [{
                        "service": { $regex: req.query.search, $options: 'i' }
                    },
                    {
                        "type": { $regex: req.query.search, $options: 'i' }
                    }
                    ]
                }]
            }
        }
    } else {
        search_query = { custom: { $nin: [true, false] }, publish: { $nin: [true, false] }, business: business }
        search_query_model = { custom: { $nin: [true, false] }, publish: { $nin: [true, false] }, business: business }
    }
    // return res.json({ s1: search_query, s2: search_query_model })
    var quantity = 1
    // var car = await Variant.findById(req.query.car).populate('model').exec();
    // if (car) {
    var packages = [];
    //console.log("Serach Query  = " + JSON.stringify(search_query))
    //console.log("search_query_model Query  = " + JSON.stringify(search_query_model))
    // if (req.query.type == "services") {
    var total_services_model = await Service.find(search_query_model).count();
    await Service.find(search_query_model)
        .skip(limit * page).limit(limit)
        // .sort({ updated_at: -1 })
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                publish: service.publish,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                custom: service.custom
            });
        });
    var total_services = await Service.find(search_query).count();
    await Service.find(search_query)
        .skip(limit * page).limit(limit)
        // .sort({ updated_at: -1 })
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom
            });
        });
    // }

    // else if (req.query.type == "collision") {
    // console.log("Working.....")
    var total_collision = await Collision.find(search_query).count();
    await Collision.find(search_query)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {

            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom
            });
        });
    var total_collision_model = await Collision.find(search_query_model).count();
    await Collision.find(search_query_model)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {

            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom
            });
        });
    // }

    // else if (req.query.type == "customization") {
    var total_customization = await Customization.find(search_query).count();
    await Customization.find(search_query)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom
            });
        });
    var total_customization_model = await Customization.find(search_query_model).count();
    await Customization.find(search_query_model)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom
            });
        });
    // }

    // else if (req.query.type == "detailing") {
    var total_detailing = await Detailing.find(search_query).count();
    await Detailing.find(search_query)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom,

            });
        });
    var total_detailing_model = await Detailing.find(search_query_model).count();
    // console.log("Data search_query_model = " + JSON.stringify(search_query_model))
    // console.log("Data search_query = " + JSON.stringify(search_query))
    await Detailing.find(search_query_model)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom,

            });
        });
    // }

    //packages = _(packages).groupBy(x => x.package).map((value, key) => ({ package: key, services: value })).value();
    //console.log(" Detailing   = " + total_detailing + "\n CUST  =  " + total_customization + "\n SERVICES  =  " + total_services + "\n Model Wise Services = " + total_services_model + "\n COLLISION  =" + total_collision + "\n Detailing_MOdel   = " + total_detailing_model + "\n Customization_model  =  " + total_customization_model + "\n COLLISION_model_Wise  =" + total_collision_model)
    totalResult = total_detailing + total_customization + total_collision + total_services + total_services_model + total_detailing_model + total_customization_model + total_collision_model

    // if (req.query.car) {
    //     packages = await q.all(businessFunctions.removeDublicateDoumnets(packages, "service"));
    // }
    res.status(200).json({
        responseCode: 200,
        responseMessage: totalResult,
        responseData: packages
    });
    // }
    // else {
    //     res.status(400).json({
    //         responseCode: 400,
    //         responseMessage: "Car not found",
    //         responseData: {}
    //     });
    // }
});
router.get('/all/services/get/Testing', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    // console.log("Business" + business)
    var totalResult = 0;
    var search_query = {};
    var search_query_model = {};

    if (req.query.page == undefined) {
        var page = 0;
    } else {
        var page = req.query.page;
    }
    var page = Math.max(0, parseInt(page));

    if (req.query.limit == undefined) {
        var limit = 80;
    } else {
        var limit = parseInt(req.query.limit);
    }
    if (req.query.search) {
        req.query.search = req.query.search.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");

    }

    if (req.query.type == "standard") {
        search_query = { publish: true, business: business }
        search_query_model = { publish: { $nin: [true, false] }, business: business }
        if (req.query.query == "All") {
            search_query = { publish: true, business: business }
        } else if (req.query.category) {
            if (req.query.category == "services") {
                search_query = { publish: true, business: business, type: "services" }
            } else if (req.query.category == "collision") {
                search_query = { publish: true, business: business, type: "collision" }
            } else if (req.query.category == "customization") {
                search_query = { publish: true, business: business, type: "customization" }
            } else if (req.query.category == "detailing") {
                search_query = { publish: true, business: business, type: "detailing" }
            }
        } else if (req.query.car) {
            var car = await Variant.findById(req.query.car).populate('model').exec();
            if (car) {
                // console.log("Service = " + car.model.segment)
                // console.log("Car = " + req.query.car)
                search_query = { segment: car.model.segment, part_cost: 0, publish: true, business: business }
                search_query_model = { model: car.model._id, part_cost: { $gt: 0 }, publish: true, business: business }
            }

        } else if (req.query.search) {

            search_query = null;
            search_query = {
                $and: [{
                    publish: true,
                    business: business,
                    $or: [{
                        "service": { $regex: req.query.search, $options: 'i' }
                    },
                    {
                        "type": { $regex: req.query.search, $options: 'i' }
                    }
                    ]
                }]
            }
        }

    } else if (req.query.type == "custom") {
        search_query = { custom: true, business: business }
        search_query_model = { custom: { $nin: [true, false] }, business: business }
        if (req.query.query == "All") {
            search_query = { custom: true, business: business }
        } else if (req.query.category) {
            if (req.query.category == "services") {
                search_query = { custom: true, business: business, type: "services" }
            } else if (req.query.category == "collision") {
                search_query = { custom: true, business: business, type: "collision" }
            } else if (req.query.category == "customization") {
                search_query = { custom: true, business: business, type: "customization" }
            } else if (req.query.category == "detailing") {
                search_query = { custom: true, business: business, type: "detailing" }
            }
        } else if (req.query.car) {
            // console.log("Car = " + req.query.car)
            var car = await Variant.findById(req.query.car).populate('model').exec();
            if (car) {
                // console.log("Car = " + req.query.car)
                search_query = { segment: car.model.segment, part_cost: 0, custom: true, business: business }
                search_query_model = { model: car.model._id, part_cost: { $gt: 0 }, custom: true, business: business }
            }

        } else if (req.query.search) {
            search_query = null;
            search_query = {
                $and: [{
                    custom: true,
                    business: business,
                    $or: [{
                        "service": { $regex: req.query.search, $options: 'i' }
                    },
                    {
                        "type": { $regex: req.query.search, $options: 'i' }
                    }
                    ]
                }]
            }
        }
    } else {
        search_query = { custom: { $nin: [true, false] }, publish: { $nin: [true, false] }, business: business }
        search_query_model = { custom: { $nin: [true, false] }, publish: { $nin: [true, false] }, business: business }
    }
    // return res.json({ s1: search_query, s2: search_query_model })
    var quantity = 1
    // var car = await Variant.findById(req.query.car).populate('model').exec();
    // if (car) {
    var packages = [];

    // else if (req.query.type == "detailing") {
    var total_detailing = await Detailing.find(search_query).count();
    // console.log("Search Query  total_detailing = " + total_detailing)
    await Detailing.find(search_query)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom,

            });
        });
    var total_detailing_model = await Detailing.find(search_query_model).count();
    // console.log("Data search_query_model Count  = " + total_detailing_model)
    // console.log("Data search_query_model = " + JSON.stringify(search_query_model))
    // console.log("Data search_query = " + JSON.stringify(search_query))
    await Detailing.find(search_query_model)
        .skip(limit * page).limit(limit)
        .cursor().eachAsync(async (service) => {
            packages.push({
                package: service.package,
                segment: service.segment,
                service: service.service,
                labour: service.abours,
                labour_cost: parseFloat(service.labour_cost),
                parts: service.parts,
                discount: service.discount,
                part_cost: parseFloat(service.part_cost),
                opening_fitting: service.opening_fitting,
                of_cost: parseFloat(service.of_cost),
                exceeded_cost: 0,
                mrp: parseFloat(service.mrp),
                cost: parseFloat(service.part_cost) + parseFloat(service.labour_cost),
                doorstep: service.doorstep,
                unit: service.unit,
                quantity: service.quantity,
                part_cost_editable: service.part_cost_editable,
                labour_cost_editable: service.labour_cost_editable,
                of_cost_editable: service.of_cost_editable,
                type: service.type,
                source: service.id,
                description: service.description,
                id: service.id,
                _id: service._id,
                profile: service.profile,
                publish: service.publish,
                custom: service.custom,

            });
        });
    // }

    //packages = _(packages).groupBy(x => x.package).map((value, key) => ({ package: key, services: value })).value();
    // console.log(" Detailing   = " + total_detailing + "\n CUST  =  " + total_customization + "\n SERVICES  =  " + total_services + "\n Model Wise Services = " + total_services_model + "\n COLLISION  =" + total_collision + "\n Detailing_MOdel   = " + total_detailing_model + "\n Customization_model  =  " + total_customization_model + "\n COLLISION_model_Wise  =" + total_collision_model)
    // totalResult = total_detailing + total_customization + total_collision + total_services + total_services_model + total_detailing_model + total_customization_model + total_collision_model
    res.status(200).json({
        responseCode: 200,
        responseMessage: totalResult,
        responseData: packages
    });
    // }
    // else {
    //     res.status(400).json({
    //         responseCode: 400,
    //         responseMessage: "Car not found",
    //         responseData: {}
    //     });
    // }
});

router.post('/new/item/cost/add', xAccessToken.token, async function (req, res, next) {
    // console.log("Booking  " + req.body.booking)
    var rules = {
        booking: 'required',
    };
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var discount_total = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var parts = [];
        var labours = [];
        var opening_fitting = [];
        var logged_remark = "";
        var services_added = ""
        var customer_approval = false;


        // console.log("Customer Approval = " + customer_approval)
        var loggedInDetails = await User.findById(user);
        var booking = await Booking.findById(req.body.booking).exec();

        if (req.body.customer_approval) {
            customer_approval = req.body.customer_approval
        }
        else {
            customer_approval = booking.services[req.body.service_index].customer_approval

        }
        // console.log("Customer Approval " + customer_approval)
        // console.log("Service Length " + booking.services.length)
        // parts=booking.services
        var i = 0;
        var index = req.body.service_index;
        var addNew = {};
        var stage1 = ""
        var activity1 = ""
        if (booking) {
            // booking.services.length > req.body.index
            // for (let i = 0; i < booking.services.length; i++) {
            i = req.body.service_index
            //  console.log("Index  " + i)

            if (booking.services[i].service == req.body.service) {
                var partsAll = booking.services[i].parts
                labours = booking.services[i].labour
                opening_fitting = booking.services[i].opening_fitting


                var claim = false;
                if (req.body.claim == true) {
                    claim = true
                }

                var getDiscount = {
                    booking: booking._id,
                    package: booking.package,
                    car: booking.car,
                    category: req.body.type,
                    service: req.body.service,
                    claim: req.body.claim,
                    tz: req.headers['tz']
                };

                var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                // return res.json(booking.services[i].parts)

                if (req.body.new == "part") {
                    // for (let j = 0; j < partsAll.length; j++) {
                    // console.log("Parts Item  " + partsAll[j].item)
                    //     if (partsAll[j].item == req.body.item) {

                    //         var json = ({
                    //             responseCode: 200,
                    //             responseMessage: "Item is Already Added",
                    //             responseData: {}
                    //         });
                    //         return res.status(400).json(json)
                    //     }
                    // }                    //     else {

                    parts = booking.services[i].parts
                    // console.log("Service  " + booking.services[i].service)


                    // var part_list = req.body.parts;
                    // var labour_list = req.body.labour;
                    // var of_list = req.body.opening_fitting;



                    // if (part_list) {
                    //     for (var p = 0; p < part_list.length; p++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = (parseFloat(req.body.rate) * parseFloat(req.body.quantity));
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (parseFloat(req.body.discount)) {
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }

                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        total = total + amount;
                    }
                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        //base = base - discount_total;
                        total = total + amount;
                    }

                    var tax_amount = total - parseFloat(base.toFixed(2));

                    var tax_details = {
                        tax: tax_info.tax,
                        tax_rate: tax_info.rate,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    }

                    parts.push({
                        item: req.body.item,
                        source: req.body.source,
                        hsn_sac: req.body.hsn_sac,
                        part_no: req.body.part_no,
                        rate: parseFloat(req.body.rate),
                        quantity: parseFloat(req.body.quantity),
                        base: parseFloat(base.toFixed(2)),
                        amount: total,
                        customer_dep: parseFloat(req.body.customer_dep),
                        insurance_dep: parseFloat(req.body.insurance_dep),
                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                        amount_is_tax: req.body.amount_is_tax,
                        discount: req.body.discount,
                        tax: tax_info.tax,
                        issued: req.body.issued,
                        tax_rate: tax_info.rate,
                        tax_info: tax_details
                    })


                    activity1 = "New part added to Service :  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )";
                    stage1 = "Parts";
                    // var activity = {
                    //     user: loggedInDetails._id,
                    //     name: loggedInDetails.name,
                    //     stage: "Parts",
                    //     activity: "New part added to Service :  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"
                    // }

                    // fun.bookingLog(booking._id, activity);

                    addNew = {
                        "services.$.parts": parts

                    }
                }
                else if (req.body.new == "labour") {
                    discount_eligible_labour_cost = _.sumBy(labours, x => x.rate * x.quantity);

                    // for (var l = 0; l < labour_list.length; l++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = parseFloat(req.body.rate) * parseFloat(req.body.quantity);
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (package.discount_type == "percent") {
                        discount = parseFloat(package.discount);
                        if (!isNaN(discount) && package.discount > 0) {
                            discount_total = amount * (discount / 100);
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }
                    }
                    else if (package.discount_type == "fixed") {
                        discount_type = "value";
                        discount = parseFloat(package.discount);
                        discount_total = (amount / discount_eligible_labour_cost) * discount;
                        discount = amount - discount_total;
                        amount = parseFloat(discount_total.toFixed(2));
                    }
                    else if (package.discount_type == "price") {
                        discount_type = "value";
                        discount = parseFloat(package.discount);
                        if (!isNaN(discount) && discount > 0) {
                            discount_total = (amount / discount_eligible_labour_cost) * discount;
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }
                    }
                    else {
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }


                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t; parseFloat
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        //total = total+amount;
                    }

                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        //base = base - discount_total;
                        total = total + amount;
                    }

                    var tax_amount = total - parseFloat(base.toFixed(2));

                    var tax_details = {
                        tax: tax_info.tax,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    };

                    labours.push({
                        item: req.body.item,
                        source: req.body.source,
                        rate: parseFloat(req.body.rate),
                        quantity: parseFloat(req.body.quantity),
                        base: parseFloat(base.toFixed(2)),
                        amount: amount,
                        discount: discount_total,
                        customer_dep: parseFloat(req.body.customer_dep),
                        insurance_dep: parseFloat(req.body.insurance_dep),
                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                        amount_is_tax: req.body.amount_is_tax,
                        tax: tax_info.tax, tax_rate: tax_info.rate,
                        tax_info: tax_details
                    });
                    // var activity = {
                    //     user: loggedInDetails._id,
                    //     name: loggedInDetails.name,
                    //     stage: "Labours",
                    //     activity: "New Labour added to Service :>  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"
                    // }

                    // fun.bookingLog(booking._id, activity);
                    stage1 = "Labours"
                    activity1 = "New Labour added to Service :>  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"


                    // }
                    addNew = {
                        "services.$.labour": labours
                    }
                }
                else if (req.body.new == "others") {
                    // for (var o = 0; o < of_list.length; o++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = (parseFloat(req.body.rate) * parseFloat(req.body.quantity));
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (parseFloat(req.body.discount)) {
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }


                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t; parseFloat
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        total = total + amount;
                    }

                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        //base = base - discount_total;
                        total = total + amount;
                    }

                    var tax_details = {
                        tax: tax_info.tax,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    }

                    var tax_amount = total - parseFloat(base.toFixed(2));

                    opening_fitting.push({
                        item: req.body.item,
                        source: req.body.source,
                        rate: parseFloat(req.body.rate),
                        quantity: parseFloat(req.body.quantity),
                        base: parseFloat(base.toFixed(2)),
                        amount: total,
                        discount: parseFloat(req.body.discount),
                        customer_dep: parseFloat(req.body.customer_dep),
                        insurance_dep: parseFloat(req.body.insurance_dep),
                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                        amount_is_tax: req.body.amount_is_tax,
                        tax: tax_info.tax, tax_rate: tax_info.rate,
                        tax_info: tax_details
                    });

                    // var activity = {
                    //     user: loggedInDetails._id,
                    //     name: loggedInDetails.name,
                    //     stage: "Opening Fittings",
                    //     activity: "New Opening Fittings added to Service :>  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"
                    // }

                    // fun.bookingLog(booking._id, activity);
                    stage1 = "Opening Fittings"
                    activity1 = "New Opening Fittings added to Service :>  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"
                    // 
                    // }
                    addNew = {
                        "services.$.opening_fitting": opening_fitting
                    };
                } else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Item Category Not found",
                        responseData: {}
                    });
                }


                await Booking.findOneAndUpdate({ _id: req.body.booking, "services.service": req.body.service }, {
                    $addToSet: addNew
                }, { new: true }, async function (err, doc) {
                    if (err) {
                        var json = ({
                            responseCode: 400,
                            responseMessage: "Error occured",
                            responseData: {}
                        });
                        res.status(400).json(json)
                    }
                    else {


                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: stage1,
                            activity: activity1
                        }

                        fun.bookingLog(booking._id, activity);
                        // return res.json(doc.services[i])

                        var services_added = "";
                        /////////////////////////////////////////
                        var tax_type = "GST";
                        var bookingService = [];
                        var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));
                        var services = doc.services;
                        for (var i = 0; i < services.length; i++) {
                            var part = [];
                            var labours = [];
                            var opening_fitting = [];
                            var part_list = services[i].parts;
                            var labour_list = services[i].labour;
                            var of_list = services[i].opening_fitting;
                            // var customer_approval = customer_approval;
                            if (i == index) {
                                services[i].customer_approval = customer_approval
                            }
                            if (part_list) {
                                for (var p = 0; p < part_list.length; p++) {
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                                    var tax = [];
                                    var rate = part_list[p].rate;
                                    var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;

                                    var dep = 0;

                                    /*if(services[i].claim==true)
                                    {
                                        if(parseFloat(part_list[p].insurance_dep)<=0 && parseFloat(part_list[p].customer_dep)<=0)
                                        {
                                            dep = 0
                                        }
                                        else
                                        {
                                            if(parseFloat(part_list[p].customer_dep) <= 0 && parseFloat(part_list[p].insurance_dep<=100))
                                            {
                                                dep = 100
                                            }
                                            else
                                            {
                                                dep = 100-parseFloat(part_list[p].customer_dep);
                                            }
                                        }
                 
                                        amount = amount-(amount*dep/100);
                                        dep = base - amount;
                                    }*/

                                    if (part_list[p].discount) {
                                        discount_total = part_list[p].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }


                                    if (part_list[p].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (part_list[p].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }

                                        //base = base - discount_total - dep; 
                                        total = total + amount;
                                    }

                                    var tax_amount = total - parseFloat(base.toFixed(2));

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    if (parseFloat(part_list[p].customer_dep) == 0 && parseFloat(part_list[p].insurance_dep) == 0) {
                                        var customer_dep = 100;
                                        var insurance_dep = 0;
                                    }
                                    else {
                                        var customer_dep = parseFloat(part_list[p].customer_dep);
                                        var insurance_dep = parseFloat(part_list[p].insurance_dep);
                                    }

                                    part.push({
                                        _id: part_list[p]._id,
                                        item: part_list[p].item,
                                        source: part_list[p].source,
                                        hsn_sac: part_list[p].hsn_sac,
                                        part_no: part_list[p].part_no,
                                        rate: parseFloat(part_list[p].rate),
                                        quantity: parseFloat(part_list[p].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: total,
                                        discount: part_list[p].discount,
                                        issued: part_list[p].issued,
                                        customer_dep: customer_dep,
                                        insurance_dep: insurance_dep,
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: part_list[p].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }
                            if (labour_list) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;
                                    var dep = 0;

                                    /* if(services[i].claim==true)
                                     {       
                                         if(parseFloat(labour_list[l].insurance_dep)<=0 && parseFloat(labour_list[l].customer_dep)<=0)
                                         {
                                             dep = 0
                                         }
                                         else
                                         {
                                             if(parseFloat(labour_list[l].customer_dep) <= 0 && parseFloat(labour_list[l].insurance_dep<=100) )
                                             {
                                                 dep = 100
                                             }
                                             else
                                             {
                                                 dep = 100-parseFloat(labour_list[l].customer_dep);
                                             }
                                         }
                 
                                         amount = amount-(amount*dep/100);
                                         dep = base- amount;
                                     }*/

                                    if (labour_list[l].discount) {
                                        discount_total = labour_list[l].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }


                                    if (labour_list[l].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        //total = total+amount;
                                    }
                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax,
                                                        tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        //base = base - discount_total - dep; 
                                        total = total + amount;
                                    }
                                    var tax_amount = total - parseFloat(base.toFixed(2));
                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    };
                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: parseFloat(labour_list[l].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: amount,
                                        discount: labour_list[l].discount,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            if (of_list) {
                                for (var o = 0; o < of_list.length; o++) {
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                                    var tax = [];
                                    var rate = of_list[o].rate;
                                    var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;
                                    var dep = 0;


                                    /*if(services[i].claim == true)
                                    {
                                        if(parseFloat(of_list[o].insurance_dep)<=0 && parseFloat(of_list[o].customer_dep)<=0)
                                        {
                                            dep = 0
                                        }
                                        else
                                        {
                                            if(parseFloat(of_list[o].customer_dep) <= 0 && parseFloat(of_list[o].insurance_dep<=100) )
                                            {
                                                dep = 100
                                            }
                                            else
                                            {
                                                dep = 100-parseFloat(of_list[o].customer_dep);
                                            }
                                        }
                 
                                        amount = amount-(amount*dep/100);
                                        dep = base - amount;
                                    }*/

                                    if (of_list[o].discount) {
                                        var discount_total = of_list[o].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }



                                    if (of_list[o].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (of_list[o].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }

                                        //base = base - discount_total - dep; 

                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    var tax_amount = total - parseFloat(base.toFixed(2));

                                    opening_fitting.push({
                                        item: of_list[o].item,
                                        source: of_list[o].source,
                                        rate: parseFloat(of_list[o].rate),
                                        quantity: parseFloat(of_list[o].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: total,
                                        discount: parseFloat(of_list[o].discount),
                                        customer_dep: parseFloat(of_list[o].customer_dep),
                                        insurance_dep: parseFloat(of_list[o].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: of_list[o].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            var parts_visible = true;


                            var cost = _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount);
                            // to be checked
                            if (services[i].customer_approval == true) {
                                logged_remark = logged_remark + " - " + services[i].service + " Rs/-" + cost + " \n ";
                            }

                            services_added = services_added + " |-> " + services[i].service + " Rs/- " + cost + " \n |--->  Labour Charges = " + _.sumBy(labours, x => x.amount) + " \n |--->  Parts Charges = " + _.sumBy(part, x => x.amount) + "\n ";

                            bookingService.push({
                                source: services[i].source,
                                service: services[i].service,
                                mileage: services[i].mileage,
                                parts: part,
                                labour: labours,
                                opening_fitting: opening_fitting,
                                hours: services[i].hours,
                                parts_visible: parts_visible,
                                // quantity: quantity,
                                discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                                description: services[i].description,
                                // cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
                                // labour_cost: parseFloat(services[i].labour_cost),
                                labour_cost: _.sumBy(labours, x => x.amount),
                                // of_cost: _.sumBy(of_cost, x => x.discount),
                                // of_cost: parseFloat(services[i].of_cost),
                                of_cost: _.sumBy(opening_fitting, x => x.amount),
                                // part_cost: parseFloat(services[i].part_cost),
                                part_cost: _.sumBy(part, x => x.amount),
                                exceeded_cost: parseFloat(services[i].exceeded_cost),
                                part_cost_editable: services[i].part_cost_editable,
                                labour_cost_editable: services[i].labour_cost_editable,
                                of_cost_editable: services[i].of_cost_editable,
                                type: services[i].type,
                                customer_approval: services[i].customer_approval,
                                surveyor_approval: services[i].surveyor_approval,
                                claim: services[i].claim,
                                custom: services[i].custom,
                                sub_category: services[i].sub_category
                            });
                        }

                        var policy_clause = booking.payment.policy_clause;
                        if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
                            policy_clause = req.body.policy_clause;
                        }

                        var salvage = booking.payment.salvage;
                        if (req.body.salvage >= 0 && req.body.salvage != null) {
                            salvage = req.body.salvage;
                        }

                        var pick_up_charges = booking.payment.pick_up_charges;
                        if (req.body.pick_up_charge >= 0) {
                            pick_up_charges = req.body.pick_up_charge;
                        }

                        var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                        var paid_total = booking.payment.paid_total;
                        var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                        var part_cost = _.sumBy(bookingService, x => x.part_cost);

                        // console.log("Part cost  " + part_cost)
                        var of_cost = _.sumBy(bookingService, x => x.of_cost);
                        // console.log("Of Cost  " + of_cost)
                        var discount_total = _.sumBy(bookingService, x => x.discount);

                        var careager_cash = booking.payment.careager_cash;

                        var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                        var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                        var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                        var due = {
                            due: Math.ceil(due_amount.toFixed(2))
                        }

                        var payment = {
                            total: parseFloat(payment_total.toFixed(2)),
                            estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                            careager_cash: careager_cash,
                            of_cost: of_cost,
                            labour_cost: labour_cost,
                            part_cost: part_cost,
                            payment_mode: booking.payment.payment_mode,
                            payment_status: booking.payment.payment_status,
                            discount_type: booking.payment.discount_type,
                            coupon: booking.payment.coupon,
                            coupon_type: booking.payment.coupon_type,
                            discount_by: booking.payment.discount_by,
                            discount: booking.payment.discount,
                            discount_total: discount_total,
                            policy_clause: policy_clause,
                            salvage: salvage,
                            terms: booking.payment.terms,
                            pick_up_limit: booking.payment.pick_up_limit,
                            pick_up_charges: pick_up_charges,
                            paid_total: parseFloat(booking.payment.paid_total),
                            discount_applied: booking.payment.discount_applied,
                            transaction_id: booking.payment.transaction_id,
                            transaction_date: booking.payment.transaction_date,
                            transaction_status: booking.payment.transaction_status,
                            transaction_response: booking.payment.transaction_response
                        };

                        var date = new Date();

                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, convenience: req.body.convenience, payment: payment, due: due, advance: req.body.advance, updated_at: date } }, { new: true }, async function (err, doc) {
                            if (err) {
                                // console.log(err)
                            }
                            else {
                                // return res.json({ ser: doc.services[index] })
                                businessFunctions.serviceAdd(doc.services[index], booking._id);
                                // var activity = {
                                //     user: loggedInDetails._id,
                                //     name: loggedInDetails.name,
                                //     stage: "Estimation",
                                //     activity: "Estimation Updated",
                                // }

                                // fun.bookingLog(booking._id, activity)
                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "Estimation",
                                    activity: services_added,
                                }

                                fun.bookingLog(booking._id, activity);

                                if (logged_remark) {
                                    var activity = {
                                        user: loggedInDetails._id,
                                        name: loggedInDetails.name,
                                        stage: "Approval",
                                        activity: logged_remark,
                                    }

                                    fun.bookingLog(booking._id, activity);
                                }

                                // event.zohoLead(booking._id);

                                // var updated = await Booking.findById(booking.id).exec();
                                res.status(200).json({
                                    responseCode: 200,
                                    responseMessage: "Service has been added...",
                                    // responseData: updated
                                    responseData: doc
                                });
                            }


                            // var activity = {
                            //     user: loggedInDetails._id,
                            //     name: loggedInDetails.name,
                            //     stage: "Job Labour Updates",
                            //     activity: labour_log,
                            // }
                            // fun.bookingLog(booking._id, activity);
                            // var activity = {
                            //     user: loggedInDetails._id,
                            //     name: loggedInDetails.name,
                            //     stage: "Job Parts Updates",
                            //     activity: parts_log,
                            // }

                            // fun.bookingLog(booking._id, activity);


                            // if (logged_remark) {
                            //     var activity = {
                            //         user: loggedInDetails._id,
                            //         name: loggedInDetails.name,
                            //         stage: "Approval",
                            //         activity: logged_remark,
                            //     }

                            //     fun.bookingLog(booking._id, activity);
                            // }

                            // event.zohoLead(booking._id);
                        });
                    }
                    //////////////////////////////////////////////
                });

                // }
            }//End For loop Services
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Service  not found",
                    responseData: {}
                });
            }

        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.post('/job/one/part/add/', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var loggedInDetails = await User.findById(decoded.user).exec();
    var addNew = {}
    var data = [];
    var i = 0;
    var booking = await Booking.findById(req.body.booking).exec();
    // console.log("Inside One Part API")
    var service_part = []
    if (booking) {
        i = req.body.service_index
        // console.log(i)
        var updated_parts = [];
        var exceeded_cost = 0;
        // var services = req.body.service;
        var services = booking.services;
        // return res.json(services)
        var bookingService = {};

        if (services) {
            service_part = booking.services[i].parts;
            // return res.json(service_part);
            // if (service_part.length > 0) {
            // for (var p = 0; p < service_part.length; p++) {
            parts_visible = false;
            // console.log("Tax = " + req.body.tax)
            var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
            var quantity = req.body.quantity;
            var tax_rate = tax_info.detail;
            var amount = (parseFloat(req.body.rate) * parseFloat(req.body.quantity));
            var discount_total = 0;
            var base = amount;
            var part_tax = [];
            var id = null;
            if (req.body._id) {
                id = req.body._id
                // console.log("ID NOt Null = " + id)
            }
            else {
                id = mongoose.Types.ObjectId();
                // console.log("ID Null = " + id)
            }

            // console.log("Ammount  - " + amount)
            if (req.body.discount) {
                discount_total = req.body.discount;
                amount = amount - parseFloat(discount_total.toFixed(2))
            }

            if (req.body.amount_is_tax == "exclusive") {
                var tax_on_amount = amount;
                if (tax_rate.length > 0) {
                    for (var r = 0; r < tax_rate.length; r++) {
                        if (tax_rate[r].rate != tax_info.rate) {
                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                            amount = amount + t; parseFloat
                            part_tax.push({
                                tax: tax_rate[r].tax,
                                rate: tax_rate[r].rate,
                                amount: parseFloat(t.toFixed(2))
                            });
                        }
                        else {
                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                            amount = amount + t;
                            part_tax.push({
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                amount: parseFloat(t.toFixed(2))
                            });
                        }
                    }
                }
            }

            if (req.body.amount_is_tax == "inclusive") {
                var x = (100 + tax_info.rate) / 100;
                var tax_on_amount = amount / x;
                if (tax_rate.length > 0) {
                    for (var r = 0; r < tax_rate.length; r++) {
                        if (tax_rate[r].rate != tax_info.rate) {
                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                            base = base - t;
                            part_tax.push({
                                tax: tax_rate[r].tax,
                                rate: tax_rate[r].rate,
                                amount: parseFloat(t.toFixed(2))
                            });
                        }
                        else {
                            var t = amount - tax_on_amount;
                            base = base - t;
                            part_tax.push({
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                amount: parseFloat(t.toFixed(2))
                            });
                        }
                    }
                }

                //base = base - discount_total; 
            }

            var tax_detail = {
                tax: tax_info.tax,
                tax_rate: tax_info.rate,
                rate: tax_info.rate,
                base: parseFloat(base.toFixed(2)),
                detail: part_tax
            }
            service_part.push({
                _id: id,
                item: req.body.item,
                source: req.body.source,
                quantity: req.body.quantity,
                hsn_sac: req.body.hsn_sac,
                part_no: req.body.part_no,
                rate: parseFloat(req.body.rate),
                base: parseFloat(base.toFixed(2)),
                amount: parseFloat(amount),
                customer_dep: parseFloat(req.body.customer_dep),
                insurance_dep: parseFloat(req.body.insurance_dep),
                tax_amount: _.sumBy(part_tax, x => x.amount),
                amount_is_tax: req.body.amount_is_tax,
                discount: req.body.discount,
                tax: tax_info.tax,
                tax_rate: tax_info.rate,
                issued: req.body.issued,
                tax_info: tax_detail
            });
            //     }
            // }
            // return res.json(service_part)
            addNew = {
                "services.$.parts": service_part
            }

            var issue_part_cost = _.sumBy(service_part, x => x.amount);

            var issue_labour_cost = _.sumBy(services.labour, x => x.amount);
            await Booking.findOneAndUpdate({ _id: req.body.booking, "services.service": req.body.service }, {
                $addToSet: addNew
            }, { new: true }, async function (err, doc) {
                if (err) {
                    var json = ({
                        responseCode: 400,
                        responseMessage: "Error occured",
                        responseData: {}
                    });
                    res.status(400).json(json)
                }
                else {

                    // return res.json(doc.services)
                    var bookingService = [];
                    var services = doc.services;
                    // return res.json(services)
                    if (services.length > 0) {
                        for (var i = 0; i < services.length; i++) {
                            var update_parts = [];
                            var parts = services[i].parts;
                            // console.log("Service Name " + services[i].service)
                            if (parts.length > 0) {
                                for (var k = 0; k < parts.length; k++) {
                                    // console.log("Customer dep " + parts[k].customer_dep + " Insurence Dep " + parts[k].insurance_dep)
                                    if (parseFloat(parts[k].customer_dep) == 0 && parseFloat(parts[k].insurance_dep) == 0) {
                                        var customer_dep = 100;
                                        var insurance_dep = 0;
                                    }
                                    else {
                                        var customer_dep = parseFloat(parts[k].customer_dep);
                                        var insurance_dep = parseFloat(parts[k].insurance_dep);
                                    }
                                    // console.log("Source = " + parts[k].source)
                                    if (parts[k].source != null && parts[k].issued == false) {
                                        var businessProduct = await BusinessProduct.findById(parts[k].source).exec();
                                        // console.log(i + "   -   " + k)
                                        if (businessProduct.stock.available >= parts[k].quantity) {
                                            var stockTotal = parseFloat(businessProduct.stock.total);
                                            var stockAvailable = parseFloat(businessProduct.stock.available) - parts[k].quantity;
                                            var stockConsumed = parseFloat(businessProduct.stock.consumed) + parts[k].quantity;

                                            if (stockAvailable < 0) {
                                                stockAvailable = 0
                                            }

                                            if (stockConsumed < 0) {
                                                stockConsumed = 0
                                            }

                                            var stock = {
                                                total: stockTotal,
                                                available: stockAvailable,
                                                consumed: stockConsumed
                                            };

                                            update_parts.push({
                                                _id: parts[k]._id,
                                                source: parts[k].source,
                                                quantity: parts[k].quantity,
                                                issued: true,
                                                item: parts[k].item,
                                                hsn_sac: parts[k].hsn_sac,
                                                part_no: parts[k].part_no,
                                                quantity: parts[k].quantity,
                                                rate: parts[k].rate,
                                                base: parts[k].base,
                                                amount: parts[k].amount,
                                                customer_dep: customer_dep,
                                                insurance_dep: insurance_dep,
                                                tax_amount: parts[k].tax_amount,
                                                amount_is_tax: parts[k].amount_is_tax,
                                                discount: parts[k].discount,
                                                tax_rate: parts[k].tax_rate,
                                                tax: parts[k].tax,
                                                tax_info: parts[k].tax_info,
                                            });

                                            // var activity = {
                                            //     user: loggedInDetails._id,
                                            //     name: loggedInDetails.name,
                                            //     stage: "Parts Updates",
                                            //     activity: parts[k].item + "(" + parts[k].part_no + ") has been issued.\n" + parts[k].quantity + "" + businessProduct.unit + "/ Price: " + parts[k].amount,
                                            // }

                                            // fun.bookingLog(booking._id, activity);

                                            await BusinessProduct.findOneAndUpdate({ _id: parts[k].source }, { $set: { stock: stock } }, { new: true }, async function (err, doc) {
                                                if (err) {
                                                    // console.log(err)

                                                }
                                                else {
                                                    // console.log("Product Issued ")
                                                    var price_amount = req.body.rate * req.body.quantity;
                                                    var activity = {
                                                        user: loggedInDetails._id,
                                                        name: loggedInDetails.name,
                                                        stage: "Stock Updates",
                                                        activities: "New part has Issued From Stock to Service :  " + req.body.service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + price_amount + " ) \n |------>  Details :> \n |--------->  Part No = " + req.body.part_no
                                                        // activity: parts[k].item + "(" + parts[k].part_no + ") has been issued.\n" + parts[k].quantity + "" + businessProduct.unit + "/ Price: " + parts[k].amount,
                                                    }

                                                    fun.bookingLog(booking._id, activity);
                                                    // console.log("Activitu log Product ")
                                                    var customer_details = await Booking.findById(booking._id).populate('user').populate('car').exec();
                                                    var product_activity = {
                                                        vendor_name: customer_details.user.name,
                                                        // quantity: product.stock,
                                                        // quantity: parts[k].quantity,
                                                        quantity: req.body.quantity,
                                                        // unit_price: product.unit_price,
                                                        // price: product.mrp,
                                                        // price: parts[k].amount,
                                                        booking: booking._id,
                                                        price: price_amount,
                                                        received_by: loggedInDetails.name,
                                                        // purchase: purchase,
                                                        business: business,
                                                        activity: "Issued",
                                                        created_at: new Date()
                                                    };
                                                    // console.log("Product activity", products[p].product, activity)
                                                    fun.productLog(doc._id, product_activity);
                                                }
                                            });
                                        }
                                        else {
                                            update_parts.push({
                                                _id: parts[k]._id,
                                                source: parts[k].source,
                                                quantity: parts[k].quantity,
                                                issued: parts[k].issued,
                                                item: parts[k].item,
                                                hsn_sac: parts[k].hsn_sac,
                                                part_no: parts[k].part_no,
                                                quantity: parts[k].quantity,
                                                rate: parts[k].rate,
                                                base: parts[k].base,
                                                amount: parts[k].amount,
                                                customer_dep: customer_dep,
                                                insurance_dep: insurance_dep,
                                                tax_amount: parts[k].tax_amount,
                                                amount_is_tax: parts[k].amount_is_tax,
                                                discount: parts[k].discount,
                                                tax_rate: parts[k].tax_rate,
                                                tax: parts[k].tax,
                                                tax_info: parts[k].tax_info,
                                            });
                                        }
                                    }
                                    else {
                                        update_parts.push({
                                            _id: parts[k]._id,
                                            source: parts[k].source,
                                            quantity: parts[k].quantity,
                                            issued: parts[k].issued,
                                            item: parts[k].item,
                                            hsn_sac: parts[k].hsn_sac,
                                            part_no: parts[k].part_no,
                                            quantity: parts[k].quantity,
                                            rate: parts[k].rate,
                                            base: parts[k].base,
                                            amount: parts[k].amount,
                                            customer_dep: customer_dep,
                                            insurance_dep: insurance_dep,
                                            tax_amount: parts[k].tax_amount,
                                            amount_is_tax: parts[k].amount_is_tax,
                                            discount: parts[k].discount,
                                            tax_rate: parts[k].tax_rate,
                                            tax: parts[k].tax,
                                            tax_info: parts[k].tax_info,
                                        })
                                    }
                                }
                            }
                            else {
                                update_parts = parts;
                            }
                            // console.log(" " + parts)
                            // console.log("Part Cost = " + _.sumBy(update_parts, x => x.amount) + "  ==  " + services[i].part_cost)
                            bookingService.push({
                                // part_cost: services[i].part_cost,
                                part_cost: _.sumBy(update_parts, x => x.amount),
                                labour_cost: services[i].labour_cost,
                                of_cost: services[i].of_cost,
                                exceeded_cost: services[i].exceeded_cost,
                                quantity: services[i].quantity,
                                parts: update_parts,
                                labour: services[i].labour,
                                cost: _.sumBy(services[i].labour, x => x.amount) + _.sumBy(update_parts, x => x.amount) + _.sumBy(services[i].opening_fitting, x => x.amount),
                                discount: _.sumBy(services[i].labour, x => x.discount) + _.sumBy(update_parts, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount),
                                opening_fitting: services[i].opening_fitting,
                                part_cost_editable: services[i].part_cost_editable,
                                labour_cost_editable: services[i].part_cost_editable,
                                of_cost_editable: services[i].part_cost_editable,
                                description: services[i].description,
                                service: services[i].service,
                                type: services[i].type,
                                sub_category: services[i].sub_category,
                                claim: services[i].claim,
                                custom: services[i].custom,
                                customer_approval: services[i].customer_approval,
                                surveyor_approval: services[i].surveyor_approval,
                                source: services[i].source,
                            });
                        }

                        // return res.json(bookingService)
                        var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                        var policy_clause = 0
                        if (booking.payment.policy_clause) {
                            policy_clause = booking.payment.policy_clause;
                        }
                        var salvage = 0
                        if (booking.payment.salvage) {
                            salvage = booking.payment.salvage;
                        }

                        var paid_total = booking.payment.paid_total;
                        var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                        var part_cost = _.sumBy(bookingService, x => x.part_cost);
                        // console.log("Part Cost  == " + part_cost)
                        var of_cost = _.sumBy(bookingService, x => x.of_cost);
                        var discount_total = _.sumBy(bookingService, x => x.discount);
                        var pick_up_charges = booking.payment.pick_up_charges;
                        var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));
                        var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                        var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
                        var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                        var due = {
                            due: Math.ceil(due_amount.toFixed(2))
                        }

                        var payment = {
                            estimate_cost: estimate_cost,
                            total: payment_total,
                            careager_cash: careager_cash,
                            of_cost: of_cost,
                            labour_cost: labour_cost,
                            part_cost: part_cost,
                            payment_mode: booking.payment.payment_mode,
                            payment_status: booking.payment.payment_status,
                            coupon: booking.payment.coupon,
                            coupon_type: booking.payment.coupon_type,
                            discount_by: booking.payment.discount_by,
                            discount_type: booking.payment.discount_type,
                            discount: booking.payment.discount,
                            discount_total: discount_total,
                            policy_clause: policy_clause,
                            salvage: salvage,
                            terms: booking.payment.terms,
                            pick_up_limit: booking.payment.pick_up_limit,
                            pick_up_charges: pick_up_charges,
                            paid_total: parseFloat(booking.payment.paid_total),
                            discount_applied: booking.payment.discount_applied,
                            transaction_id: booking.payment.transaction_id,
                            transaction_date: booking.payment.transaction_date,
                            transaction_status: booking.payment.transaction_status,
                            transaction_response: booking.payment.transaction_response
                        };

                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: true }, async function (err, doc) {
                            if (err) {
                                res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Error",
                                    responseData: err
                                });
                            }
                            else {
                                // return res.json(doc.services[req.body.service_index])
                                businessFunctions.serviceAdd(doc.services[req.body.service_index], doc._id);
                                var logsss = "";
                                for (i = 0; i < doc.services.length; i++) {

                                    logsss = logsss + " \n " + doc.services[i].service + " :- \n"
                                    partsss = doc.services[i].parts
                                    labour = doc.services[i].labour
                                    // console.log(partsss)
                                    for (j = 0; j < partsss.length; j++) {
                                        logsss = logsss + "\n PARTS Updates:-  " + partsss[j].item + " - " + partsss[j].quantity + "/ Price: " + partsss[j].amount
                                    }
                                    for (j = 0; j < labour.length; j++) {
                                        logsss = logsss + "\n Labour Updates:- " + labour[j].item + " - " + labour[j].quantity + "/ Price: " + labour[j].amount
                                    }
                                    // console.log(logsss)
                                }

                                // for (i = 0; i < doc.services.length; i++) {

                                //     logsss = logsss + "\n" + doc.services[i].service + " :- \n"
                                //     labour = doc.services[i].labour
                                // console.log(labour)
                                //     for (j = 0; j < labour.length; j++) {
                                //         logsss = logsss + "\n Labour Updates:- " + labour[j].item + " - " + labour[j].quantity + "/ Price: " + labour[j].amount
                                //     }
                                // }
                                // var activity = {
                                //     user: loggedInDetails._id,
                                //     name: loggedInDetails.name,
                                //     stage: "Stock Issue Updates",
                                //     activity: logsss
                                //     // activity: parts[k].item + "(" + parts[k].part_no + ") has been issued.\n" + parts[k].quantity + "" + businessProduct.unit + "/ Price: " + parts[k].amount,
                                // }

                                // fun.bookingLog(booking._id, activity);
                                var update = await Booking.findById(booking.id).exec();

                                res.status(200).json({
                                    responseCode: 200,
                                    responseMessage: "Parts has been added",
                                    responseData: update
                                });
                            }
                        });
                    }
                    else {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Services not found",
                            responseData: {}
                        });
                    }
                }

            });

            /*
                        if (services.source != null) {
                            bookingService = {
                                source: services.source,
                                part_cost: issue_part_cost,
                                labour_cost: services.labour_cost,
                                exceeded_cost: exceeded_cost,
                                of_cost: services.of_cost,
                                part_rate: services.part_rate,
                                cost: issue_part_cost + services.labour_cost + services.of_cost,
                                labour_rate: services.labour_rate,
                                quantity: services.quantity,
                                of_rate: services.of_rate,
                                parts: updated_parts,
                                labour: services.labour,
                                discount: _.sumBy(services.labour, x => x.discount) + _.sumBy(updated_parts, x => x.discount) + _.sumBy(services.opening_fitting, x => x.discount),
                                opening_fitting: services.opening_fitting,
                                part_cost_editable: services.part_cost_editable,
                                labour_cost_editable: services.part_cost_editable,
                                of_cost_editable: services.part_cost_editable,
                                description: services.description,
                                service: services.service,
                                type: services.type,
                                claim: services.claim,
                                custom: services.custom,
                                customer_approval: services.customer_approval,
                                surveyor_approval: services.claim,
                            }
                        }
                        else {
                            bookingService = {
                                source: services.source,
                                part_cost: issue_part_cost,
                                labour_cost: services.labour_cost,
                                exceeded_cost: exceeded_cost,
                                of_cost: services.of_cost,
                                part_rate: services.part_rate,
                                cost: issue_part_cost + services.labour_cost + services.of_cost,
                                labour_rate: services.labour_rate,
                                quantity: services.quantity,
                                of_rate: services.of_rate,
                                parts: updated_parts,
                                labour: services.labour,
                                discount: _.sumBy(services.labour, x => x.discount) + _.sumBy(updated_parts, x => x.discount) + _.sumBy(services.opening_fitting, x => x.discount),
                                opening_fitting: services.opening_fitting,
                                part_cost_editable: services.part_cost_editable,
                                labour_cost_editable: services.part_cost_editable,
                                of_cost_editable: services.part_cost_editable,
                                description: services.description,
                                service: services.service,
                                type: services.type,
                                claim: services.claim,
                                custom: services.custom,
                                customer_approval: services.customer_approval,
                                surveyor_approval: services.claim,
                            }
                        }
             
             
            */
            // serviceAdd(bookingService, booking._id);
            // var updated_booking = await Booking.findById(booking._id).exec();
            // serviceAdd(updated_booking.services[req.body.service_index], updated_booking._id);
            // res.status(200).json({
            //     responseCode: 200,
            //     responseMessage: "Part Added To Booking ",
            //     // responseData: bookingService
            //     responseData: updated_booking.services[i]
            // })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "No Service found",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.post('/job/item/remove/', xAccessToken.token, async function (req, res, next) {
    // console.log("Booking  " + req.body.booking)
    var rules = {
        booking: 'required',
    };
    // console.log("New Item API Called")
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var discount_total = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var parts = [];
        var labours = [];
        var opening_fitting = [];
        var activity_remove = "";
        var stage_remove = "";
        var customer_approval = false;

        if (req.body.customer_approval == true) {
            customer_approval = true
        }
        var loggedInDetails = await User.findById(user).exec();
        var booking = await Booking.findById(req.body.booking).exec();
        // console.log("Service Length " + booking.services.length)
        // parts=booking.services
        var i = 0;
        var isExists = false;
        var removeOne = {};
        if (booking) {
            // booking.services.length > req.body.index
            // for (let i = 0; i < booking.services.length; i++) {
            i = req.body.service_index
            // console.log("Index  " + i)

            if (booking.services[i].service == req.body.service) {
                // console.log(booking.services[i].service + "= Index= " + req.body.service)
                // var package = await q.all(getPackageDiscount(getDiscount));
                // return res.json(booking.services[i].parts)

                if (req.body.new == "part") {
                    for (j = 0; j < booking.services[i].parts.length; j++) {
                        if (booking.services[i].parts[j]._id.equals(req.body.itemId)) {
                            // console.log("Item Matched")
                            isExists = true;
                        }
                        // console.log(isExists)
                    }
                    if (isExists) {
                        // for (let j = 0; j < partsAll.length; j++) {
                        // console.log("Parts Item  " + partsAll[j].item)
                        //     if (partsAll[j].item == req.body.item) {

                        //         var json = ({
                        //             responseCode: 200,
                        //             responseMessage: "Item is Already Added",
                        //             responseData: {}
                        //         });
                        //         return res.status(400).json(json)
                        //     }
                        // }                    //     else {
                        // returnconsole.log(req.body.item_index)
                        activity_remove = "|--> " + booking.services[i].parts[req.body.item_index].item + "  has been removed from [ " + booking.services[i].service + " ] \n  |----> Price = " + booking.services[i].parts[req.body.item_index].amount + "( "
                            + booking.services[i].parts[req.body.item_index].quantity + " * " + booking.services[i].parts[req.body.item_index].rate + " )"
                        stage_remove = "Parts"
                        removeOne = {
                            "services.$.parts": { _id: req.body.itemId }
                        }
                    }
                }
                else if (req.body.new == "labour") {

                    for (j = 0; j < booking.services[i].labour.length; j++) {
                        if (booking.services[i].labour[j]._id.equals(req.body.itemId)) {
                            isExists = true
                        }
                    }
                    activity_remove = "|-->   " + booking.services[i].labour[req.body.item_index].item + "  has been removed from [ " + booking.services[i].service + " ] \n  |---->   Price = " + booking.services[i].labour[req.body.item_index].amount + "( "
                        + booking.services[i].labour[req.body.item_index].quantity + " * " + booking.services[i].labour[req.body.item_index].rate + " )"
                    stage_remove = "Labours"
                    removeOne =
                    {
                        "services.$.labour": { _id: req.body.itemId }
                    }

                }
                else if (req.body.new == "others") {


                    for (j = 0; j < booking.services[i].opening_fitting.length; j++) {
                        if (booking.services[i].opening_fitting[j]._id.equals(req.body.itemId)) {
                            isExists = true
                        }
                    }
                    activity_remove = "|-->  " + booking.services[i].opening_fitting[req.body.item_index].item + "  has been removed from [ " + booking.services[i].service + " ] \n  |---->   Price = " + booking.services[i].opening_fitting[req.body.item_index].amount + "( "
                        + booking.services[i].opening_fitting[req.body.item_index].quantity + " * " + booking.services[i].opening_fitting[req.body.item_index].rate + " )"
                    stage_remove = "Opening Fittings"
                    removeOne = {
                        "services.$.opening_fitting": { _id: req.body.itemId }
                    }
                }
                // console.log("Item ID= " + req.body.itemId + " \n Booking= " + req.body.booking + " \n Service= " + req.body.service)
                if (isExists) {
                    // console.log("Inside Exists")
                    // update({'_id': ObjectId("5150a1199fac0e6910000002")}, {$pull: {id: 23}});  //, "services.service": req.body.service  //"services._id": req.body.serviceId
                    await Booking.findOneAndUpdate({ _id: req.body.booking, "services.service": req.body.service }, {
                        $pull: removeOne
                    }, { new: true }, async function (err, doc) {
                        if (err) {
                            var json = ({
                                responseCode: 400,
                                responseMessage: "Error occured",
                                responseData: {}
                            });
                            res.status(400).json(json)
                        }
                        else {
                            // return res.json(doc.services)
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: stage_remove,
                                activity: activity_remove,
                            }
                            fun.bookingLog(booking._id, activity);

                            // var labour_cos = _.sumBy(doc.services[i].parts, x => x.part_cost);
                            // console.log("labourrr" + labour_cos)
                            // return res.json({
                            //     doc: doc.services,

                            // })
                            // return res.json(doc.services)
                            // console.log("After Header")



                            /////////////////////////////////////////

                            var tax_type = "GST";

                            var bookingService = [];



                            var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                            var services = doc.services;


                            for (var i = 0; i < services.length; i++) {
                                var part = [];
                                var labours = [];
                                var opening_fitting = [];

                                var part_list = services[i].parts;
                                var labour_list = services[i].labour;
                                var of_list = services[i].opening_fitting;

                                if (part_list) {
                                    for (var p = 0; p < part_list.length; p++) {
                                        var total = 0;
                                        var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                                        var tax = [];
                                        var rate = part_list[p].rate;
                                        var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                                        var tax_rate = tax_info.detail;
                                        var discount_total = 0;
                                        var base = amount;

                                        var dep = 0;

                                        /*if(services[i].claim==true)
                                        {
                                            if(parseFloat(part_list[p].insurance_dep)<=0 && parseFloat(part_list[p].customer_dep)<=0)
                                            {
                                                dep = 0
                                            }
                                            else
                                            {
                                                if(parseFloat(part_list[p].customer_dep) <= 0 && parseFloat(part_list[p].insurance_dep<=100))
                                                {
                                                    dep = 100
                                                }
                                                else
                                                {
                                                    dep = 100-parseFloat(part_list[p].customer_dep);
                                                }
                                            }
                    
                                            amount = amount-(amount*dep/100);
                                            dep = base - amount;
                                        }*/

                                        if (part_list[p].discount) {
                                            discount_total = part_list[p].discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                        }


                                        if (part_list[p].amount_is_tax == "exclusive") {
                                            var tax_on_amount = amount;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t; parseFloat
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t;
                                                        tax.push({
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }
                                            total = total + amount;
                                        }

                                        if (part_list[p].amount_is_tax == "inclusive") {
                                            var x = (100 + tax_info.rate) / 100;
                                            var tax_on_amount = amount / x;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = amount - tax_on_amount;
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }

                                            //base = base - discount_total - dep; 
                                            total = total + amount;
                                        }

                                        var tax_amount = total - parseFloat(base.toFixed(2));

                                        var tax_details = {
                                            tax: tax_info.tax,
                                            tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: total,
                                            detail: tax
                                        }

                                        if (parseFloat(part_list[p].customer_dep) == 0 && parseFloat(part_list[p].insurance_dep) == 0) {
                                            var customer_dep = 100;
                                            var insurance_dep = 0;
                                        }
                                        else {
                                            var customer_dep = parseFloat(part_list[p].customer_dep);
                                            var insurance_dep = parseFloat(part_list[p].insurance_dep);
                                        }

                                        part.push({
                                            _id: part_list[p]._id,
                                            item: part_list[p].item,
                                            source: part_list[p].source,
                                            hsn_sac: part_list[p].hsn_sac,
                                            part_no: part_list[p].part_no,
                                            rate: parseFloat(part_list[p].rate),
                                            quantity: parseFloat(part_list[p].quantity),
                                            base: parseFloat(base.toFixed(2)),
                                            amount: total,
                                            discount: part_list[p].discount,
                                            issued: part_list[p].issued,
                                            customer_dep: customer_dep,
                                            insurance_dep: insurance_dep,
                                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                            amount_is_tax: part_list[p].amount_is_tax,
                                            tax: tax_info.tax,
                                            tax_rate: tax_info.rate,
                                            tax_info: tax_details
                                        });
                                    }
                                }

                                if (labour_list) {
                                    for (var l = 0; l < labour_list.length; l++) {
                                        var total = 0;
                                        var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                                        var tax = [];
                                        var rate = labour_list[l].rate;
                                        var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                        var tax_rate = tax_info.detail;
                                        var discount_total = 0;
                                        var base = amount;
                                        var dep = 0;

                                        /* if(services[i].claim==true)
                                         {       
                                             if(parseFloat(labour_list[l].insurance_dep)<=0 && parseFloat(labour_list[l].customer_dep)<=0)
                                             {
                                                 dep = 0
                                             }
                                             else
                                             {
                                                 if(parseFloat(labour_list[l].customer_dep) <= 0 && parseFloat(labour_list[l].insurance_dep<=100) )
                                                 {
                                                     dep = 100
                                                 }
                                                 else
                                                 {
                                                     dep = 100-parseFloat(labour_list[l].customer_dep);
                                                 }
                                             }
                     
                                             amount = amount-(amount*dep/100);
                                             dep = base- amount;
                                         }*/

                                        if (labour_list[l].discount) {
                                            discount_total = labour_list[l].discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                        }


                                        if (labour_list[l].amount_is_tax == "exclusive") {
                                            var tax_on_amount = amount;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t; parseFloat
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t;
                                                        tax.push({
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }
                                            //total = total+amount;
                                        }

                                        if (labour_list[l].amount_is_tax == "inclusive") {
                                            var x = (100 + tax_info.rate) / 100;
                                            var tax_on_amount = amount / x;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = amount - tax_on_amount;
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_info.tax,
                                                            tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }

                                            //base = base - discount_total - dep; 


                                            total = total + amount;
                                        }

                                        var tax_amount = total - parseFloat(base.toFixed(2));

                                        var tax_details = {
                                            tax: tax_info.tax,
                                            rate: tax_info.rate,
                                            amount: total,
                                            detail: tax
                                        };

                                        labours.push({
                                            item: labour_list[l].item,
                                            source: labour_list[l].source,
                                            rate: parseFloat(labour_list[l].rate),
                                            quantity: parseFloat(labour_list[l].quantity),
                                            base: parseFloat(base.toFixed(2)),
                                            amount: amount,
                                            discount: labour_list[l].discount,
                                            customer_dep: parseFloat(labour_list[l].customer_dep),
                                            insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                            amount_is_tax: labour_list[l].amount_is_tax,
                                            tax: tax_info.tax,
                                            tax_rate: tax_info.rate,
                                            tax_info: tax_details
                                        });
                                    }
                                }

                                if (of_list) {
                                    for (var o = 0; o < of_list.length; o++) {
                                        var total = 0;
                                        var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                                        var tax = [];
                                        var rate = of_list[o].rate;
                                        var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                                        var tax_rate = tax_info.detail;
                                        var discount_total = 0;
                                        var base = amount;
                                        var dep = 0;


                                        /*if(services[i].claim == true)
                                        {
                                            if(parseFloat(of_list[o].insurance_dep)<=0 && parseFloat(of_list[o].customer_dep)<=0)
                                            {
                                                dep = 0
                                            }
                                            else
                                            {
                                                if(parseFloat(of_list[o].customer_dep) <= 0 && parseFloat(of_list[o].insurance_dep<=100) )
                                                {
                                                    dep = 100
                                                }
                                                else
                                                {
                                                    dep = 100-parseFloat(of_list[o].customer_dep);
                                                }
                                            }
                    
                                            amount = amount-(amount*dep/100);
                                            dep = base - amount;
                                        }*/

                                        if (of_list[o].discount) {
                                            var discount_total = of_list[o].discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                        }



                                        if (of_list[o].amount_is_tax == "exclusive") {
                                            var tax_on_amount = amount;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t; parseFloat
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        amount = amount + t;
                                                        tax.push({
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }
                                            total = total + amount;
                                        }

                                        if (of_list[o].amount_is_tax == "inclusive") {
                                            var x = (100 + tax_info.rate) / 100;
                                            var tax_on_amount = amount / x;
                                            if (tax_rate.length > 0) {
                                                for (var r = 0; r < tax_rate.length; r++) {
                                                    if (tax_rate[r].rate != tax_info.rate) {
                                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_rate[r].tax,
                                                            rate: tax_rate[r].rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                    else {
                                                        var t = amount - tax_on_amount;
                                                        base = base - t;
                                                        tax.push({
                                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                                            rate: tax_info.rate,
                                                            amount: parseFloat(t.toFixed(2))
                                                        });
                                                    }
                                                }
                                            }

                                            //base = base - discount_total - dep; 

                                            total = total + amount;
                                        }

                                        var tax_details = {
                                            tax: tax_info.tax,
                                            rate: tax_info.rate,
                                            amount: total,
                                            detail: tax
                                        }

                                        var tax_amount = total - parseFloat(base.toFixed(2));

                                        opening_fitting.push({
                                            item: of_list[o].item,
                                            source: of_list[o].source,
                                            rate: parseFloat(of_list[o].rate),
                                            quantity: parseFloat(of_list[o].quantity),
                                            base: parseFloat(base.toFixed(2)),
                                            amount: total,
                                            discount: parseFloat(of_list[o].discount),
                                            customer_dep: parseFloat(of_list[o].customer_dep),
                                            insurance_dep: parseFloat(of_list[o].insurance_dep),
                                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                            amount_is_tax: of_list[o].amount_is_tax,
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            tax_info: tax_details
                                        });
                                    }
                                }

                                var parts_visible = true;

                                var cost = _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount);
                                // if (services[i].customer_approval == true) {
                                //     logged_remark = logged_remark + " - " + services[i].service + " Rs/-" + cost + " \n ";
                                // }

                                // services_added = services_added + " - " + services[i].service + " Rs/- " + cost + " \n ( Labour Charges" + total_labour_cost + " \n Parts Charges" + total_part_cost + ") \n ";

                                bookingService.push({
                                    source: services[i].source,
                                    service: services[i].service,
                                    mileage: services[i].mileage,
                                    parts: part,
                                    labour: labours,
                                    opening_fitting: opening_fitting,
                                    hours: services[i].hours,
                                    parts_visible: parts_visible,
                                    // quantity: quantity,
                                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                                    description: services[i].description,
                                    // cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                    cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.discount),
                                    // labour_cost: parseFloat(services[i].labour_cost),
                                    labour_cost: _.sumBy(labours, x => x.amount),
                                    // of_cost: _.sumBy(of_cost, x => x.discount),
                                    of_cost: _.sumBy(opening_fitting, x => x.amount),
                                    // part_cost: parseFloat(services[i].part_cost),
                                    part_cost: _.sumBy(part, x => x.amount),
                                    exceeded_cost: parseFloat(services[i].exceeded_cost),
                                    part_cost_editable: services[i].part_cost_editable,
                                    labour_cost_editable: services[i].labour_cost_editable,
                                    of_cost_editable: services[i].of_cost_editable,
                                    type: services[i].type,
                                    sub_category: services[i].sub_category,
                                    customer_approval: services[i].customer_approval,
                                    surveyor_approval: services[i].surveyor_approval,
                                    claim: services[i].claim,
                                    custom: services[i].custom,
                                });
                            }
                            var policy_clause = booking.payment.policy_clause;
                            if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
                                policy_clause = req.body.policy_clause;
                            }

                            var salvage = booking.payment.salvage;
                            if (req.body.salvage >= 0 && req.body.salvage != null) {
                                salvage = req.body.salvage;
                            }

                            var pick_up_charges = booking.payment.pick_up_charges;
                            if (req.body.pick_up_charge >= 0) {
                                pick_up_charges = req.body.pick_up_charge;
                            }

                            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                            var paid_total = booking.payment.paid_total;
                            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                            var part_cost = _.sumBy(bookingService, x => x.part_cost);

                            // console.log("Part cost  " + part_cost)
                            var of_cost = _.sumBy(bookingService, x => x.of_cost);
                            var discount_total = _.sumBy(bookingService, x => x.discount);

                            var careager_cash = booking.payment.careager_cash;

                            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                            var due = {
                                due: Math.ceil(due_amount.toFixed(2))
                            }

                            var payment = {
                                total: parseFloat(payment_total.toFixed(2)),
                                estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                                careager_cash: careager_cash,
                                of_cost: of_cost,
                                labour_cost: labour_cost,
                                part_cost: part_cost,
                                payment_mode: booking.payment.payment_mode,
                                payment_status: booking.payment.payment_status,
                                discount_type: booking.payment.discount_type,
                                coupon: booking.payment.coupon,
                                coupon_type: booking.payment.coupon_type,
                                discount_by: booking.payment.discount_by,
                                discount: booking.payment.discount,
                                discount_total: discount_total,
                                policy_clause: policy_clause,
                                salvage: salvage,
                                terms: booking.payment.terms,
                                pick_up_limit: booking.payment.pick_up_limit,
                                pick_up_charges: pick_up_charges,
                                paid_total: parseFloat(booking.payment.paid_total),
                                discount_applied: booking.payment.discount_applied,
                                transaction_id: booking.payment.transaction_id,
                                transaction_date: booking.payment.transaction_date,
                                transaction_status: booking.payment.transaction_status,
                                transaction_response: booking.payment.transaction_response
                            };

                            var date = new Date();

                            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, convenience: req.body.convenience, payment: payment, due: due, advance: req.body.advance, updated_at: date } }, { new: true }, async function (err, doc) {
                                if (err) {
                                    // console.log(err)
                                }
                                else {
                                    // console.log("service index = " + req.body.service_index)
                                    businessFunctions.serviceAdd(doc.services[req.body.service_index], booking._id)

                                    // var activity = {
                                    //     user: loggedInDetails._id,
                                    //     name: loggedInDetails.name,
                                    //     stage: "Estimation",
                                    //     activity: services_added,
                                    // }

                                    // fun.bookingLog(booking._id, activity);

                                    // var activity = {
                                    //     user: loggedInDetails._id,
                                    //     name: loggedInDetails.name,
                                    //     stage: "Job Labour Updates",
                                    //     activity: labour_log,
                                    // }
                                    // fun.bookingLog(booking._id, activity);
                                    // var activity = {
                                    //     user: loggedInDetails._id,
                                    //     name: loggedInDetails.name,
                                    //     stage: "Job Parts Updates",
                                    //     activity: parts_log,
                                    // }

                                    // fun.bookingLog(booking._id, activity);


                                    // if (logged_remark) {
                                    //     var activity = {
                                    //         user: loggedInDetails._id,
                                    //         name: loggedInDetails.name,
                                    //         stage: "Approval",
                                    //         activity: logged_remark,
                                    //     }

                                    //     fun.bookingLog(booking._id, activity);
                                    // }

                                    // event.zohoLead(booking._id);

                                    var updated = await Booking.findById(booking.id).exec();
                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Service has been added...",
                                        responseData: doc
                                    });
                                }
                            });
                            // res.json({
                            //     booking: bookingService
                            // })



                        }
                        //////////////////////////////////////////////
                    });
                } else {
                    res.status(202).json({
                        responseCode: 202,
                        responseMessage: "Item not found",
                        responseData: {}
                    })
                }
                // }
                // }
                // }
                //End For loop Services
                // res.status(400).json({
                //     responseCode: 400,
                //     responseMessage: "Service Not Matched",
                //     responseData: {}
                // });
            }


            //     }
            // }

            // res.status(200).json({
            //     responseCode: 200,
            //     responseMessage: "",
            //     responseData: {
            //         part_cost: _.sumBy(parts, x => x.amount),
            //         labour_cost: parseFloat(_.sumBy(labours, x => x.amount).toFixed(2)),
            //         of_cost: _.sumBy(opening_fitting, x => x.amount),
            //         part_rate: _.sumBy(parts, x => x.base),
            //         labour_rate: _.sumBy(labours, x => x.base),
            //         of_rate: _.sumBy(opening_fitting, x => x.base),
            //         parts: parts,
            //         labour: labours,
            //         opening_fitting: opening_fitting,
            //         part_cost_editable: true,
            //         labour_cost_editable: true,
            //         of_cost_editable: true,
            //         cost: _.sumBy(parts, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
            //         description: req.body.description,
            //         service: req.body.service,
            //         type: req.body.type,
            //         discount: _.sumBy(labours, x => x.discount) + _.sumBy(parts, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
            //         customer_approval: customer_approval,
            //         surveyor_approval: false,
            //         custom: true,
            //         exceeded_cost: 0,
            //         claim: claim
            //     }
            // });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.post('/item/cost/edit', xAccessToken.token, async function (req, res, next) {
    // console.log("Booking  " + req.body.booking)
    var rules = {
        booking: 'required',
    };
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var discount_total = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var parts = [];
        var labours = [];
        var opening_fitting = [];
        var logged_remark = "";
        var services_added = ""
        var customer_approval = true;

        // console.log("Customer Approval = " + customer_approval)
        var loggedInDetails = await User.findById(user);
        var booking = await Booking.findById(req.body.booking).exec();
        // console.log("Service Length " + booking.services.length)
        // parts=booking.services
        if (req.body.customer_approval) {
            customer_approval = req.body.customer_approval
        } else {
            customer_approval = booking.services[req.body.service_index].customer_approval
        }
        // customer_approval = true
        // customer_approval = false
        // console.log("Customer Approval = " + customer_approval)

        var i = 0;
        var index = req.body.service_index;
        var addNew = {};
        var stage1 = ""
        var activity1 = ""
        if (booking) {
            // booking.services.length > req.body.index
            // for (let i = 0; i < booking.services.length; i++) {
            i = req.body.service_index
            // console.log("Index  " + i)

            if (booking.services[i].service == req.body.service) {
                var partsAll = booking.services[i].parts
                labours = booking.services[i].labour
                opening_fitting = booking.services[i].opening_fitting


                var claim = false;
                if (req.body.claim == true) {
                    claim = true
                }

                var getDiscount = {
                    booking: booking._id,
                    package: booking.package,
                    car: booking.car,
                    category: req.body.type,
                    service: req.body.service,
                    claim: req.body.claim,
                    tz: req.headers['tz']
                };

                var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                // return res.json(booking.services[i].parts)
                oldName = ''
                oldCost = ''
                if (req.body.new == "part") {
                    // console.log("Inside Parts")
                    // for (let j = 0; j < partsAll.length; j++) {
                    // console.log("Parts Item  " + partsAll[j].item)
                    //     if (partsAll[j].item == req.body.item) {

                    //         var json = ({
                    //             responseCode: 200,
                    //             responseMessage: "Item is Already Added",
                    //             responseData: {}
                    //         });
                    //         return res.status(400).json(json)
                    //     }
                    // }                    //     else {

                    // var removed = parts.splice(req.body.itemIndex, req.body.itemIndex);
                    // return res.json(parts)


                    // console.log("Service  " + booking.services[i].service)


                    // var part_list = req.body.parts;
                    // var labour_list = req.body.labour;
                    // var of_list = req.body.opening_fitting;



                    // if (part_list) {
                    //     for (var p = 0; p < part_list.length; p++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = (parseFloat(req.body.rate) * parseFloat(req.body.quantity));
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (parseFloat(req.body.discount)) {
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }

                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        total = total + amount;
                    }
                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        //base = base - discount_total;
                        total = total + amount;
                    }

                    var tax_amount = total - parseFloat(base.toFixed(2));

                    var tax_details = {
                        tax: tax_info.tax,
                        tax_rate: tax_info.rate,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    }
                    parts = booking.services[i].parts

                    for (var a = 0; a < parts.length; a++) {
                        if (parts[a]._id.equals(req.body.item_id)) {
                            oldCost = parts[a].amount
                            oldName = parts[a].item

                            // if (booking.services[i].parts[a].issued == true) {
                            // console.log("Issued Item")
                            //     booking.services[i].parts[a].item = "Abhinav"
                            // }
                            // else {
                            // console.log("Item Matcehd")
                            booking.services[i].parts[a].item = req.body.item
                            // booking.services[i].parts[a].source = req.body.source
                            // booking.services[i].parts[a].hsn_sac = req.body.hsn_sac
                            // booking.services[i].parts[a].part_no = req.body.part_no
                            booking.services[i].parts[a].rate = parseFloat(req.body.rate)
                            booking.services[i].parts[a].quantity = parseFloat(req.body.quantity)
                            booking.services[i].parts[a].base = parseFloat(base.toFixed(2))
                            booking.services[i].parts[a].amount = total
                            booking.services[i].parts[a].customer_dep = parseFloat(req.body.customer_dep)
                            booking.services[i].parts[a].insurance_dep = parseFloat(req.body.insurance_dep)
                            booking.services[i].parts[a].tax_amount = parseFloat(_.sumBy(tax, x => x.amount).toFixed(2))
                            booking.services[i].parts[a].amount_is_tax = req.body.amount_is_tax
                            booking.services[i].parts[a].tax = tax_info.tax
                            booking.services[i].parts[a].discount = req.body.discount
                            // booking.services[i].parts[a].issued = req.body.issued
                            booking.services[i].parts[a].tax_rate = tax_info.rate
                            booking.services[i].parts[a].tax_info = tax_details


                            break;
                        }
                    }
                    // }
                    // var a = "abhi"
                    await booking.markModified('parts');
                    await booking.save()
                        .then(res => {
                            // console.log("Data saved...")
                            activity1 = " Parts Item edited  to Service :  " + booking.services[i].service + "   \n  --> " + req.body.item + "  <---  " + oldName + " \n  " + total + " <--- " + oldCost;
                            stage1 = "Edits";
                        })
                        .catch(err => {
                            // console.log("Error...", err)
                        })
                    // return res.json(booking.services)
                    // parts.push({
                    //     item: req.body.item,
                    //     source: req.body.source,
                    //     hsn_sac: req.body.hsn_sac,
                    //     part_no: req.body.part_no,
                    //     rate: parseFloat(req.body.rate),
                    //     quantity: parseFloat(req.body.quantity),
                    //     base: parseFloat(base.toFixed(2)),
                    //     amount: total,
                    //     customer_dep: parseFloat(req.body.customer_dep),
                    //     insurance_dep: parseFloat(req.body.insurance_dep),
                    //     tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                    //     amount_is_tax: req.body.amount_is_tax,
                    //     discount: req.body.discount,
                    //     tax: tax_info.tax,
                    //     issued: req.body.issued,
                    //     tax_rate: tax_info.rate,
                    //     tax_info: tax_details
                    // })



                    // var activity = {
                    //     user: loggedInDetails._id,
                    //     name: loggedInDetails.name,
                    //     stage: "Parts",
                    //     activity: "New part added to Service :  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " )"
                    // }

                    // fun.bookingLog(booking._id, activity);

                    // addNew = {
                    //     "services.$.parts": parts

                    // }
                }
                else if (req.body.new == "labour") {
                    discount_eligible_labour_cost = _.sumBy(labours, x => x.rate * x.quantity);

                    // for (var l = 0; l < labour_list.length; l++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = parseFloat(req.body.rate) * parseFloat(req.body.quantity);
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (package.discount_type == "percent") {
                        discount = parseFloat(package.discount);
                        if (!isNaN(discount) && package.discount > 0) {
                            discount_total = amount * (discount / 100);
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }
                    }
                    else if (package.discount_type == "fixed") {
                        discount_type = "value";
                        discount = parseFloat(package.discount);
                        discount_total = (amount / discount_eligible_labour_cost) * discount;
                        discount = amount - discount_total;
                        amount = parseFloat(discount_total.toFixed(2));
                    }
                    else if (package.discount_type == "price") {
                        discount_type = "value";
                        discount = parseFloat(package.discount);
                        if (!isNaN(discount) && discount > 0) {
                            discount_total = (amount / discount_eligible_labour_cost) * discount;
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }
                    }
                    else {
                        // console.log("Discount  = " + req.body.discount)
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }


                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t; parseFloat
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        total = total + amount;
                    }

                    // console.log("Exclusive amount  = " + amount)

                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        //base = base - discount_total;
                        total = total + amount;
                    }
                    // console.log("Total  = " + total)
                    var tax_amount = total - parseFloat(base.toFixed(2));

                    var tax_details = {
                        tax: tax_info.tax,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    };
                    labours = booking.services[i].labour
                    for (var a = 0; a < labours.length; a++) {
                        // console.log("Loop = " + a + " ItemIndex = " + req.body.item_index + " Tax = " + tax_info.tax)
                        if (a == req.body.item_index)

                        // if (labours[a]._id.equals(req.body.item_id))
                        {
                            oldName = labours[a].item
                            oldCost = labours[a].amount
                            // booking.services[i].labour[a]._id = req.body.item_id
                            booking.services[i].labour[a].item = req.body.item
                            booking.services[i].labour[a].rate = parseFloat(req.body.rate)
                            booking.services[i].labour[a].quantity = parseFloat(req.body.quantity)
                            booking.services[i].labour[a].base = parseFloat(base.toFixed(2))
                            booking.services[i].labour[a].amount = total
                            booking.services[i].labour[a].customer_dep = parseFloat(req.body.customer_dep)
                            booking.services[i].labour[a].insurance_dep = parseFloat(req.body.insurance_dep)
                            booking.services[i].labour[a].tax_amount = parseFloat(_.sumBy(tax, x => x.amount).toFixed(2))
                            booking.services[i].labour[a].amount_is_tax = req.body.amount_is_tax
                            booking.services[i].labour[a].tax = tax_info.tax
                            booking.services[i].labour[a].discount = req.body.discount
                            // booking.services[i].labour[a].issued = req.body.issued
                            // booking.services[i].labour[a].tax_rate = tax_info.rate
                            booking.services[i].labour[a].tax_info = tax_details
                            break;

                        }
                    }
                    // var a = "abhi"
                    // console.log("Toatl Amount  = " + total)
                    await booking.markModified('labour');
                    await booking.save()
                        .then(res => {
                            // console.log("Data saved...")
                            activity1 = " Labours Item edited  to Service :  " + booking.services[i].service + "   \n   --> " + oldName + " --->  " + req.body.item + " \n  " + oldCost + " ---> " + total;
                            stage1 = "Edits";
                        })
                        .catch(err => {

                        })

                }
                else if (req.body.new == "others") {
                    // for (var o = 0; o < of_list.length; o++) {
                    var total = 0;
                    var tax_info = await Tax.findOne({ tax: req.body.tax }).exec();
                    var tax = [];
                    var rate = req.body.rate;
                    var amount = (parseFloat(req.body.rate) * parseFloat(req.body.quantity));
                    var tax_rate = tax_info.detail;
                    var discount_total = 0;
                    var base = amount;

                    if (parseFloat(req.body.discount)) {
                        discount_total = parseFloat(req.body.discount);
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }


                    if (req.body.amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t; parseFloat
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        total = total + amount;
                    }

                    if (req.body.amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                        //base = base - discount_total;
                        total = total + amount;
                    }

                    var tax_details = {
                        tax: tax_info.tax,
                        rate: tax_info.rate,
                        amount: total,
                        detail: tax
                    }

                    var tax_amount = total - parseFloat(base.toFixed(2));
                    opening_fitting = booking.services[i].opening_fitting
                    oldName = ''
                    oldCost = ''
                    for (var a = 0; a < opening_fitting.length; a++) {
                        // console.log(i + ",,,Index = " + a + " = " + req.body.item_index)
                        // console.log("total = " + total + " tax_info.tax " + tax_info.tax)

                        if (a == req.body.item_index)
                        // if (opening_fitting[a]._id.equals(req.body.item_id)) 
                        {
                            var a = req.body.item_index
                            oldName = opening_fitting[a].item
                            oldCost = opening_fitting[a].amount
                            // console.log(i + "  = Inside OF Cost  = " + a)
                            booking.services[i].opening_fitting[a].item = req.body.item
                            // booking.services[i].opening_fitting[a].source = req.body.source
                            // booking.services[i].opening_fitting[a].hsn_sac = req.body.hsn_sac
                            // booking.services[i].opening_fitting[a].part_no = req.body.part_no;
                            booking.services[i].opening_fitting[a].rate = parseFloat(req.body.rate);
                            booking.services[i].opening_fitting[a].amount = total;
                            booking.services[i].opening_fitting[a].quantity = parseFloat(req.body.quantity);
                            booking.services[i].opening_fitting[a].base = parseFloat(base.toFixed(2));

                            booking.services[i].opening_fitting[a].customer_dep = parseFloat(req.body.customer_dep);
                            booking.services[i].opening_fitting[a].insurance_dep = parseFloat(req.body.insurance_dep);
                            booking.services[i].opening_fitting[a].tax_amount = parseFloat(_.sumBy(tax, x => x.amount).toFixed(2));
                            booking.services[i].opening_fitting[a].amount_is_tax = req.body.amount_is_tax
                            booking.services[i].opening_fitting[a].tax = req.body.tax
                            booking.services[i].opening_fitting[a].discount = req.body.discount
                            // booking.services[i].opening_fitting[a].issued = req.body.issued
                            // booking.services[i].opening_fitting[a].tax_rate = tax_info.rate
                            booking.services[i].opening_fitting[a].tax_info = tax_details

                            // console.log("Total = " + booking.services[i].opening_fitting[a].amount)

                            // var upnoo = await Booking.findById(booking._id).exec();
                            // console.log('upnoo = ' + upnoo.services[i].opening_fitting[req.body.item_index].amount)
                            break;

                        }
                    }
                    // var a = "abhi"
                    // console.log("LoOOoOoO " + booking.services[i].opening_fitting[0].amount)
                    // await booking.markModified('services');
                    await booking.markModified('opening_fitting');
                    await booking.save()
                        .then(res => {
                            // console.log("Data saved...")
                            // console.log("res.booking_no... = " + res.booking_no)

                            activity1 = " Others Item edited  to Service :  " + booking.services[i].service + "   \n  --> " + oldName + "   ^  " + req.body.item + " \n  " + oldCost + " ---> " + total;
                            stage1 = "Edits";
                        })
                        .catch(err => {
                            // console.log("Error...", err)
                        })


                } else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Item Category Not found",
                        responseData: {}
                    });
                }


                await Booking.findOneAndUpdate({ _id: req.body.booking/*, "services.service": req.body.service*/ }, {
                    update_at: new Date()
                }, { new: true }, async function (err, doc) {
                    if (err) {
                        var json = ({
                            responseCode: 400,
                            responseMessage: "Error occured",
                            responseData: {}
                        });
                        res.status(400).json(json)
                    }
                    else {


                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: stage1,
                            activity: activity1
                        }

                        fun.bookingLog(booking._id, activity);
                        // return res.json(doc.services[i])

                        var services_added = "";
                        /////////////////////////////////////////
                        var tax_type = "GST";
                        var bookingService = [];
                        var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));
                        var services = doc.services;
                        for (var i = 0; i < services.length; i++) {
                            var part = [];
                            var labours = [];
                            var opening_fitting = [];
                            var part_list = services[i].parts;
                            var labour_list = services[i].labour;
                            var of_list = services[i].opening_fitting;
                            // var customer_approval = customer_approval;
                            if (i == index) {
                                services[i].customer_approval = customer_approval
                            }
                            if (part_list) {
                                for (var p = 0; p < part_list.length; p++) {
                                    var total = 0;

                                    // console.log("Tax  = " + req.body.tax)
                                    var tax_info = await Tax.findOne({ tax: part_list[p].tax }).exec();
                                    var tax = [];
                                    var rate = part_list[p].rate;
                                    var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;

                                    var dep = 0;

                                    /*if(services[i].claim==true)
                                    {
                                        if(parseFloat(part_list[p].insurance_dep)<=0 && parseFloat(part_list[p].customer_dep)<=0)
                                        {
                                            dep = 0
                                        }
                                        else
                                        {
                                            if(parseFloat(part_list[p].customer_dep) <= 0 && parseFloat(part_list[p].insurance_dep<=100))
                                            {
                                                dep = 100
                                            }
                                            else
                                            {
                                                dep = 100-parseFloat(part_list[p].customer_dep);
                                            }
                                        }
                 
                                        amount = amount-(amount*dep/100);
                                        dep = base - amount;
                                    }*/

                                    if (part_list[p].discount) {
                                        discount_total = part_list[p].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }


                                    if (part_list[p].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (part_list[p].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }

                                        //base = base - discount_total - dep; 
                                        total = total + amount;
                                    }

                                    var tax_amount = total - parseFloat(base.toFixed(2));

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    if (parseFloat(part_list[p].customer_dep) == 0 && parseFloat(part_list[p].insurance_dep) == 0) {
                                        var customer_dep = 100;
                                        var insurance_dep = 0;
                                    }
                                    else {
                                        var customer_dep = parseFloat(part_list[p].customer_dep);
                                        var insurance_dep = parseFloat(part_list[p].insurance_dep);
                                    }

                                    part.push({
                                        _id: part_list[p]._id,
                                        item: part_list[p].item,
                                        source: part_list[p].source,
                                        hsn_sac: part_list[p].hsn_sac,
                                        part_no: part_list[p].part_no,
                                        rate: parseFloat(part_list[p].rate),
                                        quantity: parseFloat(part_list[p].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: total,
                                        discount: part_list[p].discount,
                                        issued: part_list[p].issued,
                                        customer_dep: customer_dep,
                                        insurance_dep: insurance_dep,
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: part_list[p].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }
                            if (labour_list) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();
                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;
                                    var dep = 0;

                                    /* if(services[i].claim==true)
                                     {       
                                         if(parseFloat(labour_list[l].insurance_dep)<=0 && parseFloat(labour_list[l].customer_dep)<=0)
                                         {
                                             dep = 0
                                         }
                                         else
                                         {
                                             if(parseFloat(labour_list[l].customer_dep) <= 0 && parseFloat(labour_list[l].insurance_dep<=100) )
                                             {
                                                 dep = 100
                                             }
                                             else
                                             {
                                                 dep = 100-parseFloat(labour_list[l].customer_dep);
                                             }
                                         }
                 
                                         amount = amount-(amount*dep/100);
                                         dep = base- amount;
                                     }*/

                                    if (labour_list[l].discount) {
                                        discount_total = labour_list[l].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }


                                    if (labour_list[l].amount_is_tax == "exclusive") {
                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        //total = total+amount;
                                    }
                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax,
                                                        tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        //base = base - discount_total - dep; 
                                        total = total + amount;
                                    }
                                    var tax_amount = total - parseFloat(base.toFixed(2));
                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    };
                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: parseFloat(labour_list[l].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: amount,
                                        discount: labour_list[l].discount,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax,
                                        tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            if (of_list) {
                                for (var o = 0; o < of_list.length; o++) {
                                    var total = 0;

                                    var tax_info = await Tax.findOne({ tax: of_list[o].tax }).exec();
                                    var tax = [];
                                    var rate = of_list[o].rate;
                                    var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                                    var tax_rate = tax_info.detail;
                                    var discount_total = 0;
                                    var base = amount;
                                    var dep = 0;


                                    /*if(services[i].claim == true)
                                    {
                                        if(parseFloat(of_list[o].insurance_dep)<=0 && parseFloat(of_list[o].customer_dep)<=0)
                                        {
                                            dep = 0
                                        }
                                        else
                                        {
                                            if(parseFloat(of_list[o].customer_dep) <= 0 && parseFloat(of_list[o].insurance_dep<=100) )
                                            {
                                                dep = 100
                                            }
                                            else
                                            {
                                                dep = 100-parseFloat(of_list[o].customer_dep);
                                            }
                                        }
                 
                                        amount = amount-(amount*dep/100);
                                        dep = base - amount;
                                    }*/

                                    if (of_list[o].discount) {
                                        var discount_total = of_list[o].discount;
                                        amount = amount - parseFloat(discount_total.toFixed(2))
                                    }



                                    if (of_list[o].amount_is_tax == "exclusive") {
                                        // console.log(i + ", tax_info.rate----- = " + tax_info.tax)

                                        var tax_on_amount = amount;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t; parseFloat
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    amount = amount + t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }
                                        total = total + amount;
                                    }

                                    if (of_list[o].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }
                                        }

                                        //base = base - discount_total - dep; 

                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }

                                    var tax_amount = total - parseFloat(base.toFixed(2));

                                    opening_fitting.push({
                                        item: of_list[o].item,
                                        source: of_list[o].source,
                                        rate: parseFloat(of_list[o].rate),
                                        quantity: parseFloat(of_list[o].quantity),
                                        base: parseFloat(base.toFixed(2)),
                                        amount: total,
                                        discount: parseFloat(of_list[o].discount),
                                        customer_dep: parseFloat(of_list[o].customer_dep),
                                        insurance_dep: parseFloat(of_list[o].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: of_list[o].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            var parts_visible = true;


                            var cost = _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount);
                            // to be checked
                            if (services[i].customer_approval == true) {
                                logged_remark = logged_remark + " - " + services[i].service + " Rs/-" + cost + " \n ";
                            }

                            services_added = services_added + " |-> " + services[i].service + " Rs/- " + cost + " \n |--->  Labour Charges = " + _.sumBy(labours, x => x.amount) + " \n |--->  Parts Charges = " + _.sumBy(part, x => x.amount) + "\n ";

                            bookingService.push({
                                source: services[i].source,
                                service: services[i].service,
                                mileage: services[i].mileage,
                                parts: part,
                                labour: labours,
                                opening_fitting: opening_fitting,
                                hours: services[i].hours,
                                parts_visible: parts_visible,
                                // quantity: quantity,
                                discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                                description: services[i].description,
                                // cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                                cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + _.sumBy(opening_fitting, x => x.amount),
                                // labour_cost: parseFloat(services[i].labour_cost),
                                labour_cost: _.sumBy(labours, x => x.amount),
                                // of_cost: _.sumBy(of_cost, x => x.discount),
                                // of_cost: parseFloat(services[i].of_cost),
                                of_cost: _.sumBy(opening_fitting, x => x.amount),
                                // part_cost: parseFloat(services[i].part_cost),
                                part_cost: _.sumBy(part, x => x.amount),
                                exceeded_cost: parseFloat(services[i].exceeded_cost),
                                part_cost_editable: services[i].part_cost_editable,
                                labour_cost_editable: services[i].labour_cost_editable,
                                of_cost_editable: services[i].of_cost_editable,
                                type: services[i].type,
                                customer_approval: services[i].customer_approval,
                                surveyor_approval: services[i].surveyor_approval,
                                claim: services[i].claim,
                                custom: services[i].custom,
                                sub_category: services[i].sub_category
                            });
                        }

                        var policy_clause = booking.payment.policy_clause;
                        if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
                            policy_clause = req.body.policy_clause;
                        }

                        var salvage = booking.payment.salvage;
                        if (req.body.salvage >= 0 && req.body.salvage != null) {
                            salvage = req.body.salvage;
                        }

                        var pick_up_charges = booking.payment.pick_up_charges;
                        if (req.body.pick_up_charge >= 0) {
                            pick_up_charges = req.body.pick_up_charge;
                        }

                        var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

                        var paid_total = booking.payment.paid_total;
                        var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                        var part_cost = _.sumBy(bookingService, x => x.part_cost);

                        // console.log("Part cost  " + part_cost)
                        var of_cost = _.sumBy(bookingService, x => x.of_cost);
                        // console.log("Of Cost  " + of_cost)
                        var discount_total = _.sumBy(bookingService, x => x.discount);

                        var careager_cash = booking.payment.careager_cash;

                        var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                        var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                        var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                        var due = {
                            due: Math.ceil(due_amount.toFixed(2))
                        }

                        var payment = {
                            total: parseFloat(payment_total.toFixed(2)),
                            estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                            careager_cash: careager_cash,
                            of_cost: of_cost,
                            labour_cost: labour_cost,
                            part_cost: part_cost,
                            payment_mode: booking.payment.payment_mode,
                            payment_status: booking.payment.payment_status,
                            discount_type: booking.payment.discount_type,
                            coupon: booking.payment.coupon,
                            coupon_type: booking.payment.coupon_type,
                            discount_by: booking.payment.discount_by,
                            discount: booking.payment.discount,
                            discount_total: discount_total,
                            policy_clause: policy_clause,
                            salvage: salvage,
                            terms: booking.payment.terms,
                            pick_up_limit: booking.payment.pick_up_limit,
                            pick_up_charges: pick_up_charges,
                            paid_total: parseFloat(booking.payment.paid_total),
                            discount_applied: booking.payment.discount_applied,
                            transaction_id: booking.payment.transaction_id,
                            transaction_date: booking.payment.transaction_date,
                            transaction_status: booking.payment.transaction_status,
                            transaction_response: booking.payment.transaction_response
                        };

                        var date = new Date();

                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, convenience: req.body.convenience, payment: payment, due: due, advance: req.body.advance, updated_at: date } }, { new: true }, async function (err, doc) {
                            if (err) {
                                // console.log(err)
                            }
                            else {
                                // return res.json({ ser: doc.services[index] })
                                businessFunctions.serviceAdd(doc.services[index], booking._id)
                                // var activity = {
                                //     user: loggedInDetails._id,
                                //     name: loggedInDetails.name,
                                //     stage: "Estimation",
                                //     activity: "Estimation Updated",
                                // }

                                // fun.bookingLog(booking._id, activity)
                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "Estimation",
                                    activity: services_added,
                                }

                                fun.bookingLog(booking._id, activity);

                                if (logged_remark) {
                                    var activity = {
                                        user: loggedInDetails._id,
                                        name: loggedInDetails.name,
                                        stage: "Approval",
                                        activity: logged_remark,
                                    }

                                    fun.bookingLog(booking._id, activity);
                                }

                                event.zohoLead(booking._id);

                                // var updated = await Booking.findById(booking.id).exec();
                                res.status(200).json({
                                    responseCode: 200,
                                    responseMessage: "Successfully Edit..",
                                    // responseData: updated
                                    responseData: doc
                                });
                            }
                            // var activity = {
                            //     user: loggedInDetails._id,
                            //     name: loggedInDetails.name,
                            //     stage: "Job Labour Updates",
                            //     activity: labour_log,
                            // }
                            // fun.bookingLog(booking._id, activity);
                            // var activity = {
                            //     user: loggedInDetails._id,
                            //     name: loggedInDetails.name,
                            //     stage: "Job Parts Updates",
                            //     activity: parts_log,
                            // }

                            // fun.bookingLog(booking._id, activity);


                            // if (logged_remark) {
                            //     var activity = {
                            //         user: loggedInDetails._id,
                            //         name: loggedInDetails.name,
                            //         stage: "Approval",
                            //         activity: logged_remark,
                            //     }

                            //     fun.bookingLog(booking._id, activity);
                            // }

                            // event.zohoLead(booking._id);
                        });
                    }
                    //////////////////////////////////////////////
                });

                // }
            }//End For loop Services
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Service  not found",
                    responseData: {}
                });
            }

        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.get('/job/payment/logs', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);

    var booking = await Booking.findById(req.query.booking).exec();
    if (booking) {
        var logs = [];
        await TransactionLog.find({ source: req.query.booking })
            .sort({ updated_at: -1 })
            .cursor().eachAsync(async (log) => {
                logs.push({
                    _id: log._id,
                    id: log._id,
                    activity: log.activity,
                    payment_mode: log.payment_mode,
                    paid_total: log.paid_total,
                    payment_status: log.payment_status,
                    transaction_id: log.transaction_id,
                    transaction_date: log.transaction_date,
                    transaction_status: log.transaction_status,
                    transaction_response: log.transaction_response,
                    user: log.user,
                    source: log.source,
                    paid_total: log.paid_total,
                    total: log.total,
                    paid_by: log.paid_by,
                    created_at: moment(log.created_at).tz(req.headers['tz']).format('lll'),
                    updated_at: moment(log.updated_at).tz(req.headers['tz']).format('lll'),
                });
            });
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Transaction Log",
            responseData: logs
        });
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.post('/estimate/settlement', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];

        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];

        var booking = await Booking.findById(req.body.booking).populate('user').populate('lead').exec();
        var loggedInDetails = await User.findById(decoded.user).exec();

        if (booking) {
            if (booking.sub_status == "") {

                // console.log("IF= " + booking.sub_status)

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: "Approval", updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error Occurred",
                            responseData: err
                        });
                    }
                    else {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Estimation",
                            activity: "Approval",
                        }

                        fun.bookingLog(booking._id, activity);

                        if (booking.manager) {
                            var notify = {
                                receiver: [booking.manager],
                                activity: "booking",
                                tag: "EstimateSendManager",
                                source: booking._id,
                                sender: loggedInDetails._id,
                                points: 0
                            };
                            fun.newNotification(notify);
                        }

                        var notify = {
                            receiver: [booking.user],
                            activity: "booking",
                            tag: "EstimateSendUser",
                            source: booking._id,
                            sender: loggedInDetails._id,
                            points: 0
                        };

                        fun.newNotification(notify);
                        event.estimateMail(booking._id, req.headers['tz']);

                        //event.jobSms(notify);
                        let userBooking = await User.findOne({ _id: booking.user }).exec()
                        await Lead.findOneAndUpdate({ _id: booking.lead._id }, {
                            $set: {
                                "remark.status": "Approval",
                                updated_at: new Date()
                            }
                        }).exec()
                        // console.log("Lead Id = " + booking.lead._id)
                        //await whatsAppEvent.estimateApproval(userBooking.contact_no, booking.car)
                        await whatsAppEvent.sendEstimate(userBooking.contact_no, booking.car, business)
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Estimation has been sent",
                            responseData: {}
                        });
                    }
                });
            }
            else {
                // console.log("Else= " + booking.sub_status)
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: "Approval", updated_at: new Date() } }, { new: false }, async function (err, doc) {

                    if (err) {
                        return res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error",
                            responseData: err
                        });
                    }
                    else {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Estimation",
                            activity: "CustomerApproval",
                        };

                        fun.bookingLog(booking._id, activity);
                        event.zohoLead(booking._id);


                        var notify = {
                            receiver: [booking.user],
                            activity: "booking",
                            tag: "ApprovalAwaited",
                            source: booking._id,
                            sender: loggedInDetails._id,
                            points: 0
                        };
                        fun.newNotification(notify);
                        event.estimateMail(booking._id, req.headers['tz']);
                        event.jobSms(notify);

                        let userBooking = await User.findOne({ _id: mongoose.Types.ObjectId(booking.user) }).exec()
                        whatsAppEvent.sendEstimate(userBooking.contact_no, booking.car, business);

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Estimation has been sent",
                            responseData: {}
                        });
                    }
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
})

router.post('/service/approve/surveyor', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var booking = await Booking.findById(req.body.booking).exec();
    if (booking) {
        if (booking.services[req.body.service_index]) {
            var services = booking.services[req.body.service_index]
            // return res.json(services)

            await Booking.findOneAndUpdate({ _id: booking._id, "services._id": services._id }, { $set: { "services.$.surveyor_approval": req.body.status, "services.$.customer_approval": req.body.status } }, { new: true }, async function (err, doc) {
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "success",
                    responseData: doc.services[req.body.service_index]
                });
            });
        } else {
            res.status(402).json({
                responseCode: 200,
                responseMessage: "Service Not Found ",
                responseData: {}
            });
        }
    } else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: 'booking not found',
            responseData: {},
        });
    }

    // res.status(200).json({
    //     responseCode: 200,
    //     responseMessage: "success",
    //     responseData: doc.services[req.body.service_index
    // });
});
// estimation/service/add
router.put('/booking/info/update', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var booking = await Booking.findOne({ _id: req.body.booking }).exec();

    if (booking) {
        var estimation_requested = false;
        if (req.body.estimation_requested == "Yes") {
            estimation_requested = true;
        }

        var date = null;
        var status = booking.status;

        if (req.body.date) {
            status = "Confirmed";
            date = new Date(req.body.date).toISOString();
        }

        var time_slot = booking.time_slot;
        if (req.body.time_slot) {
            time_slot = req.body.time_slot;
        }

        var convenience = booking.convenience;
        if (req.body.convenience) {
            convenience = req.body.convenience
        }

        var address = null;
        if (req.body.address) {
            address = req.body.address;
        }



        var pick_up_charges = booking.payment.pick_up_charges;
        if (req.body.pick_up_charges >= 0) {
            pick_up_charges = parseFloat(req.body.pick_up_charges);
        }

        var policy_clause = booking.payment.policy_clause;
        if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
            policy_clause = parseFloat(req.body.policy_clause);
        }

        var salvage = booking.payment.salvage;
        if (req.body.salvage >= 0 && req.body.salvage != null) {
            salvage = parseFloat(req.body.salvage);
        }

        var bookingService = booking.services;

        var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);


        var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
        var part_cost = _.sumBy(bookingService, x => x.part_cost);
        var of_cost = _.sumBy(bookingService, x => x.of_cost);
        var discount_total = _.sumBy(bookingService, x => x.discount);
        var pick_up_charges = pick_up_charges;
        var paid_total = booking.payment.paid_total;


        var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));


        var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

        var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
        var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

        var due = {
            due: Math.ceil(due_amount.toFixed(2))
        }

        var payment = {
            total: payment_total,
            estimate_cost: estimate_cost,
            careager_cash: careager_cash,
            of_cost: of_cost,
            labour_cost: labour_cost,
            part_cost: part_cost,
            payment_mode: booking.payment.payment_mode,
            payment_status: booking.payment.payment_status,
            coupon: booking.payment.coupon,
            coupon_type: booking.payment.coupon_type,
            discount_by: booking.payment.discount_by,
            discount_type: booking.payment.discount_type,
            discount: discount_total,
            discount_total: discount_total,
            policy_clause: policy_clause,
            salvage: salvage,
            terms: booking.payment.terms,
            pick_up_limit: booking.payment.pick_up_limit,
            pick_up_charges: pick_up_charges,
            paid_total: parseFloat(booking.payment.paid_total),
            discount_applied: booking.payment.discount_applied,
            transaction_id: booking.payment.transaction_id,
            transaction_date: booking.payment.transaction_date,
            transaction_status: booking.payment.transaction_status,
            transaction_response: booking.payment.transaction_response
        };


        await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, date: date, time_slot: time_slot, convenience: convenience, address: address, payment: payment, due: due, updated_at: new Date() } }, { new: false }, async function (err, doc) {
            if (err) {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Error Occurred Try again",
                    responseData: err
                });
            }
            else {
                if (req.body.requirements) {
                    var customer_requirement = {
                        added_by: loggedInDetails.name,
                        requirement: req.body.requirements,
                        user: loggedInDetails._id,
                        created_at: new Date(),
                        updated_at: new Date(),
                    }

                    Booking.findOneAndUpdate({ _id: booking._id }, { $push: { customer_requirements: customer_requirement } }, { new: false }, async function (err, doc) { })
                }

                if (date) {
                    var notify = {
                        receiver: [booking.user],
                        activity: "booking",
                        tag: "bookingConfirmation",
                        source: booking._id,
                        sender: booking.user,
                        points: 0
                    }
                    fun.newNotification(notify);
                }
                // var activity = "Booking"
                let myBooking = await Booking.findOne(booking._id)
                    .populate({ path: 'user', select: 'name contact_no address _id' })
                    .populate({ path: 'car', select: 'registration_no title' }).exec()
                var activity = "Booking"
                fun.webNotification(activity, myBooking);

                var updated = await Booking.findById(booking._id).exec();
                await whatsAppEvent.bookingWhatsApp(booking._id)
                await whatsAppEvent.newBookingAdvisor(booking._id);


                event.bookingStatusMail(booking.user, booking._id, business)
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Booking Updated",
                    responseData: updated
                });
            }
        });
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.put('/booking/address/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        address: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Address is required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = await User.findById(req.headers['business']).exec();

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var address = await Address.findOne({ _id: req.body.address, user: booking.user }).exec();
            if (address) {
                if (address.state == business.address.state) {
                    var tax_type = "GST";
                }
                else {
                    var tax_type = "IGST";
                }

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { tax_type: tax_type, address: req.body.address, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Error",
                            responseData: {}
                        })
                    }
                    else {
                        await Invoice.findOneAndUpdate({ booking: booking._id, status: "Active" }, { $set: { address: req.body.address, updated_at: new Date() } }, { new: true }, async function (err, doc) {
                            if (err) {
                                res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Error",
                                    responseData: {}
                                })
                            }
                            else {


                            }
                        })

                        var update = await Booking.findById(booking._id).exec();
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Updated Successfully",
                            responseData: update
                        })
                    }
                });
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Address not found",
                    responseData: {},
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.get('/technicians/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var business = req.headers['business'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);

    var loggedInDetails = await User.findById(decoded.user).exec();

    var technicians = [];
    await Management.find({ business: business, role: { $in: ["Denter", "Painter", "Electrician", "Technician", "Washing Technician", "DryCleaner", "Admin"] } })
        .populate({ path: "user" })
        .cursor().eachAsync(async (v) => {
            technicians.push({
                _id: v.user._id,
                id: v.user.id,
                name: v.user.name + " (" + v.role + ")",
                username: v.user.username,
                email: v.user.email,
                contact_no: v.user.contact_no,
            });
        });

    res.status(200).json({
        responseCode: 200,
        responseMessage: "Technicians",
        responseData: technicians
    })
});

router.get('/service-advisors/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var business = req.headers['business'];


    var technicians = [];
    await Management.find({ business: business, role: "Service Advisor" })
        .populate({ path: "user" })
        .cursor().eachAsync(async (v) => {
            technicians.push({
                _id: v.user._id,
                id: v.user.id,
                name: v.user.name,
                username: v.user.username,
                email: v.user.email,
                contact_no: v.user.contact_no,
            })
        })

    res.status(200).json({
        responseCode: 200,
        responseMessage: "Service Advisors",
        responseData: technicians
    })
});

router.put('/technician/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        technician: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];


        var booking = await Booking.findById(req.body.booking).populate('technician').exec();
        if (booking) {
            var technician = await User.findOne({ _id: req.body.technician }).exec();
            if (technician) {
                var management = await Management.findOne({ user: technician._id, business: business }).exec();
                if (management) {
                    Booking.findOneAndUpdate({ _id: booking._id }, { $set: { technician: technician._id } }, { new: true }, async function (err, doc) {
                        if (err) {
                            res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err,
                            });
                        }
                        else {
                            if (booking.technician) {
                                var s = booking.technician.name + " to " + technician.name;
                            }
                            else {
                                var s = technician.name;
                            }

                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Updates",
                                activity: s
                            };

                            fun.bookingLog(booking._id, activity);

                            var updated = await Booking.findById(booking._id).exec();

                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Details updated...",
                                responseData: updated,
                            });
                        }
                    });
                }
                else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Technician not found",
                        responseData: {},
                    })
                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Technician not found",
                    responseData: {},
                })
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/advisor/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        advisor: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];


        var booking = await Booking.findById(req.body.booking).populate('advisor').exec();
        if (booking) {
            var advisor = await User.findOne({ _id: req.body.advisor }).exec();
            if (advisor) {
                var management = await Management.findOne({ user: advisor._id, business: business }).exec();
                if (management) {
                    Booking.findOneAndUpdate({ _id: booking._id }, { $set: { advisor: advisor._id } }, { new: true }, async function (err, doc) {
                        if (err) {
                            res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err,
                            });
                        }
                        else {
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Updates",
                                activity: booking.advisor.name + " to " + advisor.name,
                            };

                            fun.bookingLog(booking._id, activity);

                            var updated = await Booking.findById(booking._id).exec();

                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Details updated...",
                                responseData: updated,
                            });
                        }
                    });
                }
                else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Advisor not found",
                        responseData: {},
                    })
                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Advisor not found",
                    responseData: {},
                })
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/job/delivery-date/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = await User.findById(req.headers['business']).exec();
        var driver = null;

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {


            var data = {
                delivery_date: new Date(req.body.delivery_date).toISOString(),
                delivery_time: req.body.delivery_time,
            }

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: true }, function (err, doc) { });

            var activity = {
                user: loggedInDetails._id,
                name: loggedInDetails.name,
                stage: "Updates",
                activity: "Delivery date updated " + moment(new Date(req.body.delivery_date).toISOString()).tz(req.headers['tz']).format('lll'),
            };

            fun.bookingLog(booking._id, activity);

            var updated = await Booking.findById(booking._id).exec();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Asset",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/job/insurance-info/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var insurance_company = await InsuranceCompany.findOne({ company: req.body.insurance_company }).exec();
            var expire = null;
            if (req.body.expire) {
                expire = new Date(req.body.expire).toISOString()
            }
            let ins_company_id = null;
            let insuranceCompanyDetails = await InsuranceCompany.findOne({ company: req.body.insurance_company }).populate({ path: 'user', select: 'contact_no' }).lean();
            if (insuranceCompanyDetails) {
                ins_company_id = insuranceCompanyDetails.user
            }
            var insurance_info = {
                policy_holder: req.body.policy_holder,
                insurance_company: req.body.insurance_company,
                ins_company_id: ins_company_id,
                branch: req.body.branch,
                state: req.body.state,
                contact_no: insuranceCompanyDetails.user.contact_no,
                gstin: req.body.gstin,
                policy_no: req.body.policy_no,
                premium: req.body.premium,
                expire: expire,
                claim: booking.insurance_info.claim,
                cashless: booking.insurance_info.cashless,
                policy_type: booking.insurance_info.policy_type,
                claim_no: booking.insurance_info.claim_no,
                driver_accident: booking.insurance_info.driver_accident,
                accident_place: booking.insurance_info.accident_place,
                accident_date: booking.insurance_info.accident_date,
                accident_time: booking.insurance_info.accident_time,
                accident_cause: booking.insurance_info.accident_cause,
                spot_survey: booking.insurance_info.spot_survey,
                fir: booking.insurance_info.fir,
                manufacture_year: booking.insurance_info.manufacture_year
            };

            await Car.findOneAndUpdate({ _id: booking.car }, { $set: { insurance_info: insurance_info } }, { new: false }, function (err, doc) { });

            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { insurance_info: insurance_info, updated_at: new Date() } }, { new: false }, function (err, doc) { });

            var activity = {
                user: loggedInDetails._id,
                name: loggedInDetails.name,
                stage: "Job",
                activity: "InsuranceDetailsUpdate",
            };

            fun.bookingLog(booking._id, activity);
            var leadAdded = await q.all(businessFunctions.outboundLeadAdd(booking, 'Insurance'));
            if (leadAdded) {
                // console.log("Lead Added  = " + JSON.stringify(leadAdded))
            }

            var updated = await Booking.findById(booking._id).exec();
            // "Insurance"
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Insurance details updated...",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/job/insurance/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var insurance_company = await InsuranceCompany.findOne({ company: req.body.insurance_company }).exec();
            var expire = "";
            var accident_date = "";
            if (req.body.expire) {
                expire = new Date(req.body.expire).toISOString()
            }
            if (req.body.accident_date) {
                accident_date = new Date(req.body.accident_date).toISOString()
            }
            var insurance_info = {
                policy_holder: req.body.policy_holder,
                insurance_company: req.body.insurance_company,
                branch: req.body.branch,
                state: req.body.state,
                contact_no: req.body.contact_no,
                gstin: req.body.gstin,
                policy_no: req.body.policy_no,
                premium: req.body.premium,
                expire: expire,
                claim: req.body.claim,
                cashless: req.body.cashless,
                policy_type: req.body.policy_type,
                claim_no: req.body.claim_no,
                driver_accident: req.body.driver_accident,
                accident_place: req.body.accident_place,
                accident_date: accident_date,
                accident_time: req.body.accident_time,
                accident_cause: req.body.accident_cause,
                spot_survey: req.body.spot_survey,
                fir: req.body.fir,
                manufacture_year: req.body.manufacture_year
            };

            Car.findOneAndUpdate({ _id: booking.car }, { $set: { insurance_info: insurance_info } }, { new: false }, function (err, doc) { });

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: { insurance_info: insurance_info, updated_at: new Date() } }, { new: false }, function (err, doc) { });

            var updated = await Booking.findById(booking._id).exec();

            let user = await User.findOne({ _id: mongoose.Types.ObjectId(booking.user) }).exec()

            await whatsAppEvent.insuranceClaimIntimated(user.contact_no, booking.car, business);

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Insurance details updated...",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.get('/insurance/invoice', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];

        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findById(req.query.booking).populate('address').populate('business').exec();
        // console.log("Business  =  " + business)
        var invoices_count = await Invoice.findOne({ business: business }).count().exec();
        var limit = await q.all(businessFunctions.businessPlanLimit(business, req.headers['tz']));

        // console.log(limit.invoices + " - - " + invoices_count)
        if (limit.invoices > invoices_count) {
            if (booking) {
                var tax_type = "GST";

                var policy_clause = 0;
                var salvage = 0;
                var pick_up_charges = 0;
                var careager_cash = 0;
                var paid_total = 0;

                if (booking.insurance_info.state) {
                    if (booking.insurance_info.state.toLowerCase() == booking.business.address.state.toLowerCase()) {
                        var tax_type = "GST";
                    }
                    else {
                        var tax_type = "IGST";
                    }
                }

                var services = _.filter(booking.services, customer_approval => customer_approval.customer_approval == true && customer_approval.claim == true);

                for (var i = 0; i < services.length; i++) {
                    var part = [];
                    var labours = [];
                    var opening_fitting = [];

                    var part_list = services[i].parts;
                    var labour_list = services[i].labour;
                    var of_list = services[i].opening_fitting;

                    if (part_list) {
                        for (var p = 0; p < part_list.length; p++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = part_list[p].rate;
                            var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                            var tax_rate = tax_info.detail;
                            var base = amount;

                            var dep = 0;

                            if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(part_list[p].insurance_dep);
                                }
                            }

                            amount = amount - (amount * dep / 100);
                            dep = base - amount;


                            if (part_list[p].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (part_list[p].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            part.push({
                                item: part_list[p].item,
                                source: part_list[p].source,
                                hsn_sac: part_list[p].hsn_sac,
                                part_no: part_list[p].part_no,
                                rate: parseFloat(part_list[p].rate),
                                quantity: parseFloat(part_list[p].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: 0,
                                //discount: part_list[p].discount,
                                issued: part_list[p].issued,
                                customer_dep: parseFloat(part_list[p].customer_dep),
                                insurance_dep: parseFloat(part_list[p].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: part_list[p].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (labour_list) {
                        discount_eligible_labour_cost = _.sumBy(labour_list, x => x.rate * x.quantity);

                        for (var l = 0; l < labour_list.length; l++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = labour_list[l].rate;
                            var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                            var tax_rate = tax_info.detail;
                            var base = amount;
                            var dep = 0;


                            if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(labour_list[l].insurance_dep);
                                }
                            }


                            amount = amount - (amount * dep / 100);
                            dep = base - amount;


                            if (labour_list[l].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                //total = total+amount;
                            }

                            if (labour_list[l].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            };

                            labours.push({
                                item: labour_list[l].item,
                                source: labour_list[l].source,
                                rate: parseFloat(labour_list[l].rate),
                                quantity: parseFloat(labour_list[l].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: amount,
                                discount: 0,
                                //discount: labour_list[l].discount,
                                customer_dep: parseFloat(labour_list[l].customer_dep),
                                insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: labour_list[l].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (of_list) {
                        for (var o = 0; o < of_list.length; o++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = of_list[o].rate;
                            var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                            var tax_rate = tax_info.detail;
                            var base = amount;
                            var dep = 0;


                            if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(of_list[o].insurance_dep);
                                }
                            }

                            amount = amount - (amount * dep / 100);
                            dep = base - amount;

                            if (of_list[o].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (of_list[o].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            opening_fitting.push({
                                item: of_list[o].item,
                                source: of_list[o].source,
                                rate: parseFloat(of_list[o].rate),
                                quantity: parseFloat(of_list[o].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: 0,
                                //discount: parseFloat(of_list[o].discount),
                                customer_dep: parseFloat(of_list[o].customer_dep),
                                insurance_dep: parseFloat(of_list[o].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: of_list[o].amount_is_tax,
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    var parts_visible = true;

                    bookingService.push({
                        source: services[i].source,
                        service: services[i].service,
                        mileage: services[i].mileage,
                        parts: part,
                        labour: labours,
                        opening_fitting: opening_fitting,
                        hours: services[i].hours,
                        parts_visible: parts_visible,
                        quantity: services[i].quantity,
                        discount: 0,
                        //discount: _.sumBy(labours, x => x.discount)+_.sumBy(part, x => x.discount)+_.sumBy(opening_fitting, x => x.discount),
                        description: services[i].description,
                        cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                        labour_cost: _.sumBy(labours, x => x.amount),
                        of_cost: _.sumBy(opening_fitting, x => x.amount),
                        part_cost: _.sumBy(part, x => x.amount),
                        exceeded_cost: parseFloat(services[i].exceeded_cost),
                        part_cost_editable: services[i].part_cost_editable,
                        labour_cost_editable: services[i].labour_cost_editable,
                        of_cost_editable: services[i].of_cost_editable,
                        type: services[i].type,
                        customer_approval: services[i].customer_approval,
                        surveyor_approval: services[i].surveyor_approval,
                        claim: services[i].claim,
                        custom: services[i].custom,
                    });

                    // console.log(bookingService)
                }

                var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                var part_cost = _.sumBy(bookingService, x => x.part_cost);
                var of_cost = _.sumBy(bookingService, x => x.of_cost);
                var discount_total = _.sumBy(bookingService, x => x.discount);

                var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

                var due = {
                    due: Math.ceil(due_amount.toFixed(2))
                }

                var payment = {
                    total: parseFloat(payment_total.toFixed(2)),
                    estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                    careager_cash: 0,
                    of_cost: of_cost,
                    labour_cost: labour_cost,
                    part_cost: part_cost,
                    payment_mode: "",
                    payment_status: "",
                    discount_type: "",
                    coupon: "",
                    coupon_type: "",
                    discount_by: "",
                    discount: 0,
                    discount_total: discount_total,
                    policy_clause: policy_clause,
                    salvage: salvage,
                    terms: booking.payment.terms,
                    pick_up_limit: booking.payment.pick_up_limit,
                    pick_up_charges: pick_up_charges,
                    paid_total: paid_total,
                    discount_applied: booking.payment.discount_applied,
                    transaction_id: "",
                    transaction_date: "",
                    transaction_status: "",
                    transaction_response: "",
                    ins_company_id: ''

                };
                if (booking.insurance_info) {
                    let insurance_info = booking.insurance_info;
                    if (insurance_info.insurance_company) {
                        let insuranceCompanyDetails = await InsuranceCompany.findOne({
                            company: insurance_info.insurance_company,
                        })
                            .populate({ path: "user", select: "contact_no" })
                            .lean();
                        if (insuranceCompanyDetails) {
                            insurance_info.contact_no = insuranceCompanyDetails.user.contact_no;
                            insurance_info.ins_company_id = insuranceCompanyDetails.user._id;
                        }
                    }
                }
                var data = {
                    booking: booking._id,
                    user: booking.user,
                    car: booking.car,
                    business: booking.business._id,
                    advisor: booking.advisor,
                    address: booking.address._id,
                    job_no: booking.job_no,
                    with_tax: booking.with_tax,
                    booking_no: booking.booking_no,
                    insurance_info: booking.insurance_info,
                    delivery_date: booking.delivery_date,
                    note: booking.note,
                    due: due,
                    odometer: booking.odometer,
                    services: bookingService,
                    payment: payment,
                    invoice_type: "Insurance",
                    status: "Active",
                    tax_type: tax_type,
                    started_at: booking.started_at,
                    created_at: new Date(),
                    updated_at: new Date(),
                };


                var invoice = await Invoice.findOne({ booking: req.query.booking, invoice_type: "Insurance", status: "Active" }).exec()
                if (invoice) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: 'Insurance already generated #Invoice No : ' + invoice.invoice_no,
                        responseData: {},
                    });

                    /*
                        await Invoice.findOneAndUpdate({ _id: invoice._id }, { $set: data }, { new: true }, async function (err, inv) {
                            if (err) {
                                res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: err
                                });
                            }
                            else {
                                var updated = await q.all(fun.invoice(invoice._id, req.headers['tz']));
                                invoice.user = invoice.insurance_info.ins_company_id
                                var transactionData = {
                                    user: invoice.user,
                                    business: invoice.business,
                                    status: "Sale Cancelled",
                                    type: "Sale Cancelled",
                                    paid_by: "-",
                                    activity: "Invoice",
                                    source: invoice._id,
                                    bill_id: invoice.invoice_no,
                                    bill_amount:
                                        parseFloat(invoice.payment.total) -
                                        (parseFloat(invoice.payment.discount_total) +
                                            parseFloat(invoice.payment.additionalDiscount)),
                                    transaction_amount:
                                        parseFloat(invoice.payment.total) -
                                        (parseFloat(invoice.payment.discount_total) +
                                            parseFloat(invoice.payment.additionalDiscount)),
                                    balance:
                                        parseFloat(invoice.payment.total) -
                                        (parseFloat(invoice.payment.discount_total) +
                                            parseFloat(invoice.payment.additionalDiscount)),
                                    total:
                                        parseFloat(invoice.payment.total) -
                                        (parseFloat(invoice.payment.discount_total) +
                                            parseFloat(invoice.payment.additionalDiscount)),
                                    paid_total: 0,
                                    due: 0,
                                    payment_status: "Cancelled",
                                    payment_mode: "-",
                                    received_by: loggedInDetails.name,
                                    transaction_id: "-",
                                    transaction_date: new Date(),
                                    transaction_status: "Success",
                                    transaction_response: "-",
                                    transaction_type: "Sale Cancelled",
                                };
                                q.all(businessFunctions.addTransaction(transactionData)).then(async () => {
                                    let bill_amount = inv.payment.total.toFixed(2) - (
                                        inv.payment.discount_total +
                                        inv.payment.additionalDiscount
                                    ).toFixed(2);
                                    console.log("BillAMOUNT" + bill_amount)
                                    var transactionData1 = {
                                        user: inv.insurance_info.ins_company_id,
                                        business: inv.business,
                                        status: "Sale Created",
                                        type: "Sale",
                                        paid_by: "-",
                                        activity: "Invoice",
                                        source: inv._id,
                                        bill_id: invoice.invoice_no,
                                        // (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2)
                                        bill_amount: bill_amount,
    
                                        transaction_amount:
                                            bill_amount,
                                        balance:
                                            bill_amount,
                                        total:
                                            bill_amount,
                                        paid_total: 0,
                                        due: 0,
                                        payment_status: "Pending",
                                        payment_mode: "-",
                                        received_by: loggedInDetails.name,
                                        transaction_id: "-",
                                        transaction_date: new Date(),
                                        transaction_status: "Success",
                                        transaction_response: "-",
                                        transaction_type: "Sale",
                                    };
                                    q.all(
                                        businessFunctions.addTransaction(transactionData1)
                                    );
                                })
    
                                res.status(200).json({
                                    responseCode: 200,
                                    responseMessage: "",
                                    responseData: updated
                                })
                            }
                        });
                    */
                }
                else {
                    await Invoice.create(data).then(async function (inv) {

                        //
                        let status = "Completed";
                        let BookingInvoice = await Invoice.findOne({ booking: req.query.booking, invoice_type: "Booking", status: "Active" }).lean()

                        // if (booking.insurance_info && !BookingInvoice) {
                        if (!BookingInvoice) {
                            if (booking.insurance_info.claim == true) {
                                status = booking.status;
                            }
                        } else {
                            event.zohoLead(booking._id);

                        }

                        await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                            if (err) {
                                res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Error",
                                    responseData: err
                                });
                            }
                            else {

                                //Abhinav Tyagi Sprint 5
                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "Invoice",
                                    activity: "Job ", status,
                                };

                                fun.bookingLog(booking._id, activity);
                                //End
                            }
                        })
                        //
                        var count = await Invoice.find({ _id: { $lt: inv._id }, invoice_type: "Insurance", business: business }).count();
                        if (count == 0) {
                            var last_invoice = "";
                            var position = 1;
                        }
                        else {
                            var lv = await Invoice.findOne({ _id: { $lt: inv._id }, invoice_type: "Insurance", business: business }).sort({ _id: -1 }).exec();
                            var ls = lv.invoice_no.split('INS');
                            var last_invoice = ls[1];
                            position = count + 1
                        }

                        var fy = {
                            with_tax: true,
                            last_invoice: last_invoice,
                            position: position,
                        };

                        var assigned_invoice_no = await q.all(fun.fiscalyear(fy));

                        if (assigned_invoice_no) {
                            if (assigned_invoice_no.invoice) {
                                await Invoice.findOneAndUpdate({ _id: inv._id }, { $set: { invoice_no: "INS" + assigned_invoice_no.invoice } }, { new: true }, async function (err, doc) {
                                    if (err) {
                                        res.status(422).json({
                                            responseCode: 422,
                                            responseMessage: "Server Error",
                                            responseData: err
                                        });
                                    }
                                    else {
                                        var updated = await q.all(fun.invoice(inv._id, req.headers['tz']));
                                        var transactionData = {
                                            user: inv.insurance_info.ins_company_id,
                                            business: inv.business,
                                            status: 'Sale Created',
                                            type: 'Sale',
                                            paid_by: '-',
                                            activity: "Invoice",
                                            source: inv._id,
                                            bill_id: assigned_invoice_no.invoice,
                                            // (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2)
                                            bill_amount: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                            transaction_amount: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                            balance: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                            total: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                            paid_total: 0,
                                            due: 0,
                                            payment_status: "Pending",
                                            payment_mode: '-',
                                            received_by: loggedInDetails.name,
                                            transaction_id: '-',
                                            transaction_date: new Date(),
                                            transaction_status: 'Success',
                                            transaction_response: '-',
                                            transaction_type: "Sale",
                                        }
                                        q.all(businessFunctions.addTransaction(transactionData));
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "",
                                            responseInfo: {
                                                fy: fy,
                                                assigned_invoice_no: assigned_invoice_no,
                                            },
                                            responseData: updated
                                        })
                                    }
                                })
                            }
                            else {
                                res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: {}
                                });
                            }
                        }
                        else {
                            res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: {}
                            });
                        }
                    })
                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Booking not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: 'Invoices Limit Exceeded. Upgrade Your Plan',
                responseData: {}
            });
        }
    }
});

router.put('/job/surveyor/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var business = req.headers['business'];
        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            var user = await User.findById(booking.user).exec();
            // console.log("User === " + user.contact_no)
            ///
            if (req.body.surveyor) {
                var surveyor = await User.findById(req.body.surveyor).exec();
                if (surveyor) {
                    User.findOneAndUpdate({ _id: surveyor._id }, { $set: { email: req.body.surveyor_email } }, { new: false }, function (err, doc) { });

                    Booking.findOneAndUpdate({ _id: booking._id }, { $set: { surveyor: surveyor._id, updated_at: new Date() } }, { new: false }, function (err, doc) {
                        whatsAppEvent.insuranceSurveyor(user.contact_no, doc.car, business)
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Estimation",
                            activity: "SurveyorAssigned",
                        };

                        fun.bookingLog(req.body.booking, activity);

                        var notify = {
                            receiver: [booking.user],
                            activity: "jobcard",
                            tag: "SurveyorAssigned",
                            source: booking._id,
                            sender: loggedInDetails._id,
                            points: 0
                        };

                        fun.newNotification(notify);
                        event.jobSms(notify);
                        //let user = User.findOne({ _id: mongoose.Types.ObjectId(doc.user) }).exec()
                        // console.log("-----" + req.body.surveyor_contact_no, doc.car);
                        // whatsAppEvent.insuranceSurveyor(user.contact_no, doc.car,business)
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Surveyor details has been updated...",
                            responseData: {},
                        })

                    });
                }
                else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Surveyor not found",
                        responseData: {},
                    })
                }
            }
            else {
                var user = await User.findOne({ contact_no: req.body.surveyor_contact_no, 'account_info.type': "user" }).count().exec();
                if (user == 0) {
                    var data = {};
                    var country = await Country.findOne({ timezone: req.headers['tz'] }).exec();
                    data.address = {
                        country: country.countryName,
                        timezone: req.headers['tz'],
                        location: data.location,
                    };

                    data.account_info = {
                        type: "user",
                        added_by: null,
                        status: "Complete",
                    };


                    /*var expired_at = new Date();
                    expired_at.setDate(expired_at.getDate() + 365);*/

                    data.agent = {
                        agent: false,
                        commission: 0,
                        started_at: new Date(),
                        expired_at: null,
                    };


                    var name = req.body.surveyor_name;
                    name = name.substring(0, 3);
                    var rand = Math.floor((Math.random() * 100000) + 1);

                    data.username = name + "" + shortid.generate();
                    data.contact_no = req.body.surveyor_contact_no;
                    data.email = req.body.surveyor_email;
                    data.name = req.body.surveyor_name;

                    var firstPart = (Math.random() * 46656) | 0;
                    var secondPart = (Math.random() * 46656) | 0;
                    firstPart = ("000" + firstPart.toString(36)).slice(-3);
                    secondPart = ("000" + secondPart.toString(36)).slice(-3);
                    data.referral_code = firstPart.toUpperCase() + secondPart.toUpperCase();

                    data.geometry = [0, 0];
                    data.device = [];
                    data.otp = Math.floor(Math.random() * 90000) + 10000;

                    data.careager_cash = 0;
                    data.socialite = "";
                    data.optional_info = "";
                    data.business_info = "";
                    req.body.uuid = uuidv1();

                    User.create(data).then(async function (user) {
                        event.signupSMS(user);
                        //event.otpSms(user);
                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { surveyor: user._id, updated_at: new Date() } }, { new: false }, function (err, doc) {

                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Estimation",
                                activity: "SurveyorAssigned",
                            };
                            fun.bookingLog(req.body.booking, activity);

                            var notify = {
                                receiver: [booking.user],
                                activity: "jobcard",
                                tag: "SurveyorAssigned",
                                source: booking._id,
                                sender: loggedInDetails._id,
                                points: 0
                            };

                            fun.newNotification(notify);
                            let user = User.findOne({ _id: mongoose.Types.ObjectId(doc.user) }).exec()
                            whatsAppEvent.insurance_surveyor(user.contact_no, doc.car)
                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Surveyor details has been update",
                                responseData: {},
                            })
                        });
                    });
                }
                else {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Surveyor already exist",
                        responseData: {},
                    })
                }
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/job/claim-info/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];


        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {

            Car.findOneAndUpdate({ _id: booking.car }, { $set: { manufacture_year: req.body.manufacture_year } }, { $new: false }, function (err, doc) { });

            var claim = false;
            if (req.body.claim == "yes") {
                claim = true
            }

            var cashless = false;
            if (req.body.cashless == "yes") {
                cashless = true
            }

            if (!req.body.accident_date) {
                req.body.accident_date = null
            }

            var insurance_info = {
                policy_holder: booking.insurance_info.policy_holder,
                insurance_company: booking.insurance_info.insurance_company,
                branch: booking.insurance_info.branch,
                gstin: booking.insurance_info.gstin,
                policy_no: booking.insurance_info.policy_no,
                premium: booking.insurance_info.premium,
                expire: booking.insurance_info.expire,
                claim: claim,
                cashless: cashless,
                policy_type: booking.insurance_info.policy_type,
                claim_no: booking.insurance_info.claim_no,
                driver_accident: req.body.driver_accident,
                accident_place: req.body.accident_place,
                accident_date: new Date(req.body.accident_date).toISOString(),
                accident_time: req.body.accident_time,
                accident_cause: req.body.accident_cause,
                spot_survey: req.body.spot_survey,
                fir: req.body.fir,
                manufacture_year: req.body.manufacture_year
            };

            var data = {
                insurance_info: insurance_info,
                updated_at: new Date()
            }

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: true }, function (err, doc) { });
            if (claim == true) {
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { "payment.policy_clause": 1000 } }, { new: true }, function (err, doc) { });
            }

            var activity = {
                user: loggedInDetails._id,
                name: loggedInDetails.name,
                stage: "Job",
                activity: "ClaimDetailsUpdate",
            };

            fun.bookingLog(booking._id, activity);

            var updated = await Booking.findById(booking._id).exec();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Claim details updated...",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});;

router.put('/booking/car/update', xAccessToken.token, async function (req, res, next) {
    // console.log("Request body...", req.body)
    var rules = {
        car: "required",
        user: "required",
        booking: "required",
        variant: "required",
        registration_no: "required",
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Car is required",
            responseData: {}
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);

        var checkuser = await User.findOne({ _id: req.body.user }).populate('user').exec();
        if (checkuser) {
            var user = checkuser._id;
            var booking = await Booking.findOne({ _id: req.body.booking }).exec();
            var car = await Car.findOne({ _id: req.body.car }).populate('user').exec();
            var variant = await Variant.findOne({ _id: req.body.variant }).select('-service_schedule').exec();
            if (car) {
                var rg = req.body.registration_no;
                req.body.registration_no = rg.replace(/ /g, '');

                var check_rn = await Car.findOne({ registration_no: req.body.registration_no, _id: { $ne: car._id }, status: true }).exec();

                if (check_rn) {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Car registration no already exist",
                        responseData: {}
                    });
                }
                else {
                    if (variant) {
                        var automaker = await Automaker.findById(variant.model.automaker).exec();
                        if (variant.specification.type) {
                            req.body.transmission = variant.specification.type
                        }

                        req.body.automaker = variant.automaker;
                        req.body._automaker = variant._automaker;
                        req.body._variant = variant.value;
                        req.body.model = variant.model;
                        req.body._model = variant._model;
                        req.body.segment = variant.segment;
                        req.body.title = variant.variant;
                        req.body.fuel_type = variant.specification.fuel_type;
                        req.body.updated_at = new Date();
                        req.body.vin = req.body.vin
                        Car.findOneAndUpdate({ _id: req.body.car, user: user }, { $set: req.body }, { new: false }, async function (err, s) {
                            if (err) {
                                res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Error occured",
                                    responseData: err
                                });
                            }
                            else {
                                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { odometer: req.body.odometer, fuel_level: req.body.fuel_level, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                                    if (err) {
                                        res.status(400).json({
                                            responseCode: 400,
                                            responseMessage: "Error occured",
                                            responseData: err
                                        });
                                    }
                                    else {
                                        res.status(200).json({
                                            responseCode: 200,
                                            responseMessage: "Saved",
                                            responseData: {}
                                        })
                                    }
                                });

                            }
                        });
                    }
                    else {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Unprocessable Entity",
                            responseData: {}
                        });
                    }
                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Unauthorized",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "User not found",
                responseData: {}
            });
        }

    }
});

router.post('/lead/booking/add/', xAccessToken.token, async function (req, res, next) {
    // console.log("Lead Booking Add Api :booking.js")

    var token = req.headers['x-access-token'];
    // req.body['whatsAppChannelId'] = '4f1e778f-9f3b-41e0-8bf4-db6ffb15b0c2';
    // console.log("------" + req.body['whatsAppChannelId']);
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];

    var loggedInDetails = await User.findById(decoded.user).exec();
    var role = await Management.findOne({ user: decoded.user, business: business }).exec();

    var advisor = await q.all(businessFunctions.getAdvisor(loggedInDetails._id, business));
    // console.log("Advisor  = " + advisor)
    var estimation_requested = false;
    if (req.body.estimation_requested == "Yes") {
        estimation_requested = true;
    }

    var date = null;
    if (req.body.date) {
        date = new Date(req.body.date).toISOString();
    }

    var time_slot = "";
    if (req.body.time_slot) {
        time_slot = req.body.time_slot;
    }

    var convenience = "";
    if (req.body.convenience) {
        convenience = req.body.convenience
    }

    var address = null;
    if (req.body.address) {
        address = req.body.address;
    }

    var role = await Management.findOne({ user: user, business: business }).exec();
    var lead = null;
    if (role.role == "CRE") {
        lead = await Lead.findOne({ assignee: user, _id: req.body.lead }).exec();
    }
    else {
        lead = await Lead.findOne({ business: business, _id: req.body.lead }).exec();
    }
    // console.log("req.body.lead 17703 = " + req.body.lead)
    if (lead) {
        if (lead.contact_no) {
            var leadUser = {
                name: lead.name,
                contact_no: lead.contact_no,
                email: lead.email,
                user: lead.user,
            }
            // console.log("leadUser= 17712 " + leadUser)
            var user = await q.all(businessFunctions.getUser(leadUser))
            // console.log("Userr Id 17714 = " + user)
            if (user) {
                var rg = req.body.registration_no;
                req.body.registration_no = rg.replace(/ /g, '');

                var leadCar = {
                    user: user,
                    car: req.body.car,
                    variant: req.body.variant,
                    registration_no: req.body.registration_no,
                }
                // console.log("Car Data = " + JSON.stringify(leadCar))
                var car = await q.all(businessFunctions.getCar(leadCar))
                // console.log("Car 17726 = " + car)
                if (car) {
                    var booking = await Booking.findOne({ car: car._id, user: user, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] }, is_services: true }).exec();

                    if (booking) {
                        return res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Booking already exists for the same registration no. [" + booking.status + "]",
                            responseData: {},
                        });
                    }
                    else {
                        var bookingService = [];
                        var customer_requirements = [];

                        if (req.body.requirement) {
                            customer_requirements.push({
                                requirement: req.body.requirement,
                            });
                        }
                        // console.log("Advisor = 177446 " + advisor)

                        if (req.body.advisor) {
                            // console.log("Advisor = 17749 " + advisor)
                            advisor = req.body.advisor;
                        }
                        else if (lead.advisor) {
                            // console.log("Advisor = 17753 " + advisor)

                            advisor = lead.advisor;
                        } else {
                            // console.log("Advisor ELSE = 17758 " + advisor)

                            advisor = advisor;
                        }


                        var payment = {
                            payment_mode: "",
                            payment_status: "Pending",
                            discount_type: "",
                            coupon: "",
                            coupon_type: "",
                            discount: 0,
                            discount_total: 0,
                            part_cost: 0,
                            labour_cost: 0,
                            paid_total: 0,
                            total: 0,
                            discount_applied: false,
                            transaction_id: "",
                            transaction_date: "",
                            transaction_status: "",
                            transaction_response: ""
                        }

                        var bookingData = {
                            package: null,
                            car: car,
                            advisor: advisor,
                            manager: lead.assignee,
                            business: business,
                            user: user,
                            services: bookingService,
                            customer_requirements: customer_requirements,
                            booking_no: Math.round(+new Date() / 1000),
                            date: date,
                            time_slot: time_slot,
                            estimation_requested: estimation_requested,
                            convenience: convenience,
                            status: "EstimateRequested",
                            payment: payment,
                            address: address,
                            lead: lead,
                            is_services: true,
                            converted: true,
                            created_at: new Date(),
                            updated_at: new Date()
                        };

                        await Booking.create(bookingData).then(async function (b) {
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Approval",
                                activity: "Booking",
                            };

                            fun.bookingLog(b._id, activity);

                            if (role.role == "CRE") {
                                if (estimation_requested) {
                                    var notify = {
                                        receiver: [b.advisor],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        source: b._id,
                                        tag: "EstimateRequested",
                                        points: 0,
                                    }

                                    fun.newNotification(notify);
                                }
                                else {
                                    var notify = {
                                        source: b._id,
                                        receiver: [b.advisor],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        tag: "leadBooking",
                                        points: 0,
                                    }
                                    fun.newNotification(notify);
                                }
                            }
                            else {
                                if (estimation_requested) {
                                    var notify = {
                                        receiver: [b.manager],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        source: b._id,
                                        tag: "EstimateInitiated",
                                        points: 0,
                                    }

                                    fun.newNotification(notify);
                                }
                                else {
                                    var notify = {
                                        source: b._id,
                                        receiver: [b.manager],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        tag: "EstimateInitiated",
                                        points: 0,
                                    }
                                    fun.newNotification(notify);
                                }
                            }


                            // var data = {
                            //     user: user,
                            //     follow_up: {},
                            //     converted: true,
                            //     remark: {
                            //         lead: lead._id,
                            //         status: "EstimateRequested",
                            //         color_code: lead.remark.color_code,
                            //         assignee: user,
                            //         customer_remark: "Estimate requested",
                            //         assignee_remark: "Estimate requested",
                            //         created_at: new Date(),
                            //         updated_at: new Date(),
                            //     },
                            //     // created_at: new Date(),
                            //     updated_at: new Date(),
                            // };


                            // await Lead.findOneAndUpdate({ _id: lead._id }, { $set: data }, { new: true }, async function (err, doc) {
                            //     if (err) {
                            //         return res.status(422).json({
                            //             responseCode: 422,
                            //             responseMessage: "Server Error",
                            //             responseData: err
                            //         });
                            //     }
                            //     else {
                            //         await LeadRemark.create(data.remark).then(async function (newRemark) {
                            //             await Lead.findOneAndUpdate({ _id: lead._id }, { $push: { remarks: newRemark._id } }, { new: true }, async function (err, doc) {
                            //             })
                            //         });;
                            //     }
                            // });


                            var bookings = [];
                            var booking = await Booking.findById(b._id)
                                .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
                                .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                                .populate({ path: 'car', select: '_id id title registration_no ic rc', populate: { path: 'thumbnails' } })
                                .exec();


                            if (booking.address) {
                                var address = await Address.findOne({ _id: booking.address }).exec();
                            }
                            else {
                                var address = {};
                            }
                            if (booking.car) {
                                var car = {
                                    title: booking.car.title,
                                    _id: booking.car._id,
                                    id: booking.car.id,
                                    rc_address: booking.car.rc_address,
                                    ic_address: booking.car.ic_address,
                                    ic: booking.car.ic,
                                    rc: booking.car.rc,
                                    registration_no: booking.car.registration_no,
                                }
                            }

                            var manager = null;
                            if (booking.manager) {
                                manager = {
                                    name: booking.manager.name,
                                    _id: booking.manager._id,
                                    id: booking.manager.id,
                                    contact_no: booking.manager.contact_no,
                                    email: booking.manager.email
                                }
                            }
                            if (booking.user) {
                                user = {
                                    name: booking.user.name,
                                    _id: booking.user._id,
                                    id: booking.user.id,
                                    contact_no: booking.user.contact_no,
                                    email: booking.user.email,
                                    business_info: booking.user.business_info
                                }
                            }
                            bookings.push({
                                _id: booking._id,
                                id: booking._id,
                                car: car,
                                user: user,
                                manager: manager,
                                services: booking.services,
                                convenience: booking.convenience,
                                date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                                time_slot: booking.time_slot,
                                status: booking.status,
                                booking_no: booking.booking_no,
                                job_no: booking.job_no,
                                estimation_requested: booking.estimation_requested,
                                address: address,
                                remarks: booking.remarks,
                                customer_requirements: booking.customer_requirements,
                                payment: booking.payment,
                                txnid: booking.txnid,
                                __v: booking.__v,
                                created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                                updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                            });


                            var activity = "Booking";
                            fun.webNotification(activity, booking);
                            await whatsAppEvent.estiamteBooking(b._id, business)



                            Lead.findOneAndUpdate({ _id: lead._id }, { $set: { user: user, converted: true } }, { new: false }, async function (err, doc) {
                                if (err) {
                                    res.status(422).json({
                                        responseCode: 422,
                                        responseMessage: "Server Error",
                                        responseData: err
                                    });
                                }
                                else {
                                    event.zohoLead(b._id);

                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Booking",
                                        responseData: bookings
                                    });
                                }
                            });
                        });
                    }
                }
                else {
                    res.status(422).json({
                        responseCode: 400,
                        responseMessage: "Car required",
                        responseData: {}
                    });
                }
            }
            else {
                res.status(422).json({
                    responseCode: 400,
                    responseMessage: "Name & Contact_no is required",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Contact No required",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Lead not found",
            responseData: {}
        });
    }
});

router.post('/outbound/lead/estimate/add/', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];

    var loggedInDetails = await User.findById(decoded.user).exec();
    var role = await Management.findOne({ user: decoded.user, business: business }).exec();

    var advisor = await q.all(businessFunctions.getAdvisor(loggedInDetails._id, business));
    // console.log("Advisor  = " + advisor)
    var estimation_requested = false;
    if (req.body.estimation_requested == "Yes") {
        estimation_requested = true;
    }

    var date = null;
    if (req.body.date) {
        date = new Date(req.body.date).toISOString();
    }

    var time_slot = "";
    if (req.body.time_slot) {
        time_slot = req.body.time_slot;
    }

    var convenience = "";
    if (req.body.convenience) {
        convenience = req.body.convenience
    }

    var address = null;
    if (req.body.address) {
        address = req.body.address;
    }

    var role = await Management.findOne({ user: user, business: business }).exec();
    var lead = null;
    if (role.role == "CRE") {
        lead = await OutBoundLead.findOne({ assignee: user, _id: req.body.lead }).exec();
    }
    else {
        lead = await OutBoundLead.findOne({ business: business, _id: req.body.lead }).exec();
    }
    // console.log("req.body.lead 17703 = " + req.body.lead)
    if (lead) {
        if (lead.contact_no) {
            var leadUser = {
                name: lead.name,
                contact_no: lead.contact_no,
                email: lead.email,
                user: lead.user,
            }
            // console.log("leadUser= 17712 " + leadUser)
            var user = await q.all(businessFunctions.getUser(leadUser))
            // console.log("Userr Id 17714 = " + user)
            if (user) {
                var rg = req.body.registration_no;
                req.body.registration_no = rg.replace(/ /g, '');

                var leadCar = {
                    user: user,
                    car: req.body.car,
                    variant: req.body.variant,
                    registration_no: req.body.registration_no,
                }
                // console.log("Car Data = " + JSON.stringify(leadCar))
                var car = await q.all(businessFunctions.getCar(leadCar))
                // console.log("Car 17726 = " + car)
                if (car) {
                    var booking = await Booking.findOne({ car: car._id, user: user, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] }, is_services: true }).exec();

                    if (booking) {
                        return res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Booking already exists for the same registration no. [" + booking.status + "]",
                            responseData: {},
                        });
                    }
                    else {
                        var bookingService = [];
                        var customer_requirements = [];

                        if (req.body.requirement) {
                            customer_requirements.push({
                                requirement: req.body.requirement,
                            });
                        }
                        // console.log("Advisor = 177446 " + advisor)

                        if (req.body.advisor) {
                            // console.log("Advisor = 17749 " + advisor)
                            advisor = req.body.advisor;
                        }
                        else if (lead.advisor) {
                            // console.log("Advisor = 17753 " + advisor)

                            advisor = lead.advisor;
                        } else {
                            // console.log("Advisor ELSE = 17758 " + advisor)

                            advisor = advisor;
                        }
                        var payment = {
                            payment_mode: "",
                            payment_status: "Pending",
                            discount_type: "",
                            coupon: "",
                            coupon_type: "",
                            discount: 0,
                            discount_total: 0,
                            part_cost: 0,
                            labour_cost: 0,
                            paid_total: 0,
                            total: 0,
                            discount_applied: false,
                            transaction_id: "",
                            transaction_date: "",
                            transaction_status: "",
                            transaction_response: ""
                        }

                        var bookingData = {
                            package: null,
                            car: car,
                            advisor: advisor,
                            manager: lead.assignee,
                            business: business,
                            user: user,
                            services: bookingService,
                            customer_requirements: customer_requirements,
                            booking_no: Math.round(+new Date() / 1000),
                            date: date,
                            time_slot: time_slot,
                            estimation_requested: estimation_requested,
                            convenience: convenience,
                            status: "EstimateRequested",
                            payment: payment,
                            address: address,
                            lead: null,
                            outbound_lead: req.body.lead,
                            isOutbound: true,
                            is_services: true,
                            converted: true,
                            created_at: new Date(),
                            updated_at: new Date()
                        };

                        await Booking.create(bookingData).then(async function (b) {
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Approval",
                                activity: "Booking",
                            };

                            fun.bookingLog(b._id, activity);

                            if (role.role == "CRE") {
                                if (estimation_requested) {
                                    var notify = {
                                        receiver: [b.advisor],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        source: b._id,
                                        tag: "EstimateRequested",
                                        points: 0,
                                    }

                                    fun.newNotification(notify);
                                }
                                else {
                                    var notify = {
                                        source: b._id,
                                        receiver: [b.advisor],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        tag: "OutboundLeadBooking",
                                        points: 0,
                                    }
                                    fun.newNotification(notify);
                                }
                            }
                            else {
                                if (estimation_requested) {
                                    var notify = {
                                        receiver: [b.manager],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        source: b._id,
                                        tag: "EstimateInitiated",
                                        points: 0,
                                    }

                                    fun.newNotification(notify);
                                }
                                else {
                                    var notify = {
                                        source: b._id,
                                        receiver: [b.manager],
                                        sender: loggedInDetails._id,
                                        activity: "booking",
                                        tag: "EstimateInitiated",
                                        points: 0,
                                    }
                                    fun.newNotification(notify);
                                }
                            }

                            var activity = "Booking";
                            fun.webNotification(activity, b);
                            // await whatsAppEvent.estiamteBooking(b._id, business)



                            await OutBoundLead.findOneAndUpdate({ _id: lead._id }, {
                                $set: {
                                    user: user,
                                    converted: true,
                                    outbound_booking: b._id,
                                    status: "EstimateRequested",
                                    follow_up: {},
                                    updated_at: new Date(),
                                }
                            }, { new: true }, async function (err, doc) {
                                if (err) {
                                    res.status(422).json({
                                        responseCode: 422,
                                        responseMessage: "Server Error",
                                        responseData: err
                                    });
                                }
                                else {

                                    event.zohoLead(b._id);
                                    // businessFunctions.bookingOutboundLead(b._id)

                                    res.status(200).json({
                                        responseCode: 200,
                                        responseMessage: "Booking",
                                        responseData: {}
                                    });
                                }
                            });
                        });
                    }
                }
                else {
                    res.status(422).json({
                        responseCode: 400,
                        responseMessage: "Car required",
                        responseData: {}
                    });
                }
            }
            else {
                res.status(422).json({
                    responseCode: 400,
                    responseMessage: "Name & Contact_no is required",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Contact No required",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Lead not found",
            responseData: {}
        });
    }
});
async function getAdvisor(user, business) {
    var advisor = business;
    var role = await Management.findOne({ user: user, business: business }).exec();
    if (role.role == "Service Advisor") {
        advisor = role.user;
    } else {
        var advisorBooking = [];
        await Management.find({ business: business, role: "Service Advisor" })
            .cursor().eachAsync(async (a) => {
                var d = await Booking.find({ business: business, advisor: a.user, status: { $in: ["EstimateRequested", "JobInitiated", "JobOpen", "In-Process", "StartWork", "Rework"] } }).count().exec();
                advisorBooking.push({
                    user: a.user,
                    count: d
                })
            });

        if (advisorBooking.length != 0) {
            advisorBooking.sort(function (a, b) {
                return a.count > b.count;
            });

            advisor = advisorBooking[0].user;
        } else {
            advisor = role.business
        }
    }

    return advisor;
}

router.post('/booking/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        registration_no: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var customer_requirements = [];
        var advisor = await q.all(businessFunctions.getAdvisor(loggedInDetails._id, business));

        var check = await User.findOne({ _id: req.body.user }).exec();
        if (check) {
            var date = null;
            if (req.body.date) {
                date = new Date(req.body.date).toISOString();
            }
            if (req.body.requirement) {
                customer_requirements.push({
                    user: loggedInDetails._id,
                    added_by: loggedInDetails.name,
                    requirement: req.body.requirement,
                    created_at: new Date(),
                    updated_at: new Date(),
                });
            }
            var status = "EstimateRequested"
            if (req.body.status) {
                status = req.body.status
            }
            var rg = req.body.registration_no;
            req.body.registration_no = rg.replace(/ /g, '');

            var insurance_info = {
                "driver": null,
                "accident_place": "",
                "accident_date": null,
                "accident_time": "",
                "accident_cause": "",
                "fir": "",
                "branch": "",
                "cashless": "true",
                "claim": "false",
                "contact_no": "",
                "claim_no": "",
                "driver_accident": "",
                "expire": null,
                "gstin": "",
                "insurance_company": "",
                "manufacture_year": "",
                "policy_holder": "",
                "policy_no": "",
                "policy_type": "",
                "premium": 0,
                "spot_survey": "",
                "state": ""
            }

            var getCar = await Car.findOne({ registration_no: req.body.registration_no, status: true }).exec();
            if (getCar) {
                /*if(!getCar.user.equals(check._id))
                {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Registration no authentication error",
                        responseData: {}
                    })
                }
                else
                {*/
                var booking = await Booking.findOne({ car: getCar._id, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] }, is_services: true }).exec();

                if (booking) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Booking already exists for the same registration no. [" + booking.status + "]",
                        responseData: {},
                    });
                }
                else {
                    var pick_up_charges = 0;
                    var bookingService = [];

                    var countBooking = await Booking.find({}).count().exec();

                    if (req.body.charges) {
                        pick_up_charges = parseFloat(req.body.charges);
                    }

                    var due = {
                        due: pick_up_charges
                    };

                    var payment = {
                        payment_mode: "",
                        payment_status: "Pending",
                        discount_type: "",
                        coupon: "",
                        coupon_type: "",
                        discount: 0,
                        discount_total: 0,
                        part_cost: 0,
                        labour_cost: 0,
                        paid_total: 0,
                        pick_up_charges: pick_up_charges,
                        total: pick_up_charges,
                        discount_applied: false,
                        transaction_id: "",
                        transaction_date: "",
                        transaction_status: "",
                        transaction_response: ""
                    }

                    var bookingData = {
                        package: null,
                        car: getCar._id,
                        advisor: advisor,
                        manager: null,
                        business: business,
                        user: check.id,
                        services: bookingService,
                        customer_requirements: customer_requirements,
                        booking_no: Math.round(+new Date() / 1000),
                        date: date,
                        time_slot: req.body.time_slot,
                        convenience: "",
                        status: status,
                        payment: payment,
                        due: due,
                        address: req.body.address,
                        lead: null,
                        insurance_info: insurance_info,
                        is_services: true,
                        created_at: new Date(),
                        updated_at: new Date()
                    };

                    await Booking.create(bookingData).then(async function (b) {
                        var bookings = [];
                        var booking = await Booking.findById(b._id)
                            .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
                            .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                            .populate({ path: 'car', select: '_id id title registration_no ic rc', populate: { path: 'thumbnails' } })
                            .exec();


                        if (booking.address) {
                            var address = await Address.findOne({ _id: booking.address }).exec();
                        }
                        else {
                            var address = {};
                        }
                        if (booking.car) {
                            var car = {
                                title: booking.car.title,
                                _id: booking.car._id,
                                id: booking.car.id,
                                rc_address: booking.car.rc_address,
                                ic_address: booking.car.ic_address,
                                ic: booking.car.ic,
                                rc: booking.car.rc,
                                registration_no: booking.car.registration_no,
                            }
                        }

                        var manager = null;
                        if (booking.manager) {
                            manager = {
                                name: booking.manager.name,
                                _id: booking.manager._id,
                                id: booking.manager.id,
                                contact_no: booking.manager.contact_no,
                                email: booking.manager.email
                            }
                        }
                        bookings.push({
                            _id: booking._id,
                            id: booking._id,
                            car: car,
                            user: {
                                name: booking.user.name,
                                _id: booking.user._id,
                                id: booking.user.id,
                                contact_no: booking.user.contact_no,
                                email: booking.user.email,
                                business_info: booking.user.business_info
                            },
                            manager: manager,
                            services: booking.services,
                            convenience: booking.convenience,
                            date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                            time_slot: booking.time_slot,
                            status: booking.status,
                            booking_no: booking.booking_no,
                            job_no: booking.job_no,
                            estimation_requested: booking.estimation_requested,
                            address: address,
                            remarks: booking.remarks,
                            customer_requirements: booking.customer_requirements,
                            payment: booking.payment,
                            txnid: booking.txnid,
                            __v: booking.__v,
                            created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                            updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                        });

                        event.zohoLead(b._id);

                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "New Booking",
                            activity: "New Booking",
                        };

                        fun.bookingLog(booking._id, activity);

                        var notify = {
                            receiver: [booking.user],
                            activity: "booking",
                            tag: "newBooking",
                            source: booking._id,
                            sender: booking.business,
                            points: 0,
                            tz: req.headers['tz']
                        };
                        fun.newNotification(notify);


                        ;                       // event.bookingMail(b._id);
                        // console.log("SSSSSSSSSSSSSSS" + req.body.status);
                        if (req.body.status !== "Inactive") {
                            // console.log("sumit iiiif");
                            var activity = "Booking";
                            fun.webNotification(activity, booking);
                            // console.log("success")
                            //await whatsAppEvent.bookingWhatsApp(b._id, business);
                            event.bookingStatusMail(b.user, b._id, business);
                        }


                        // await whatsAppEvent.bookingWhatsApp(b._id,business)
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Booking",
                            responseData: bookings[0]
                        });
                    });
                }
                /*}*/
            }
            else {
                var variant = await Variant.findOne({ _id: req.body.variant }).exec();
                if (variant) {
                    var rg = req.body.registration_no;
                    req.body.registration_no = rg.replace(/ /g, '');

                    var reg = await Car.find({ registration_no: req.body.registration_no, status: true }).count().exec();
                    if (reg == 0) {
                        var data = {
                            geometry: [
                                0,
                                0
                            ],
                            registration_no: rg.replace(/ /g, ''),
                            reg_no_copy: rg.replace(/ /g, ''),
                            created_at: new Date(),
                            updated_at: new Date(),
                            title: variant.variant,
                            variant: variant._id,
                            _variant: variant.value,
                            automaker: variant.automaker,
                            _automaker: variant._automaker,
                            model: variant.model,
                            _model: variant._model,
                            segment: variant.segment,
                            user: check._id,
                            vin: req.body.vin,
                            engine_no: req.body.engine_no,
                            fuel_type: variant.specification.fuel_type,
                            transmission: variant.specification.type,
                            carId: Math.round(new Date() / 1000) + Math.round((Math.random() * 9999) + 1),
                        };

                        await Car.create(data).then(async function (car) {
                            var bookingService = [];
                            var countBooking = await Booking.find({}).count().exec();

                            var payment = {
                                payment_mode: "",
                                payment_status: "Pending",
                                discount_type: "",
                                coupon: "",
                                coupon_type: "",
                                discount: 0,
                                discount_total: 0,
                                part_cost: 0,
                                labour_cost: 0,
                                paid_total: 0,
                                total: 0,
                                discount_applied: false,
                                transaction_id: "",
                                transaction_date: "",
                                transaction_status: "",
                                transaction_response: ""
                            }

                            var bookingData = {
                                package: null,
                                car: car,
                                advisor: advisor,
                                business: business,
                                user: check.id,
                                services: bookingService,
                                customer_requirements: customer_requirements,
                                booking_no: Math.round(+new Date() / 1000),
                                date: new Date(),
                                time_slot: "",
                                convenience: "",
                                status: status,
                                payment: payment,
                                address: null,
                                lead: null,
                                insurance_info: insurance_info,
                                is_services: true,
                                created_at: new Date(),
                                updated_at: new Date()
                            };

                            await Booking.create(bookingData).then(async function (b) {
                                var bookings = [];
                                var booking = await Booking.findById(b._id)
                                    .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
                                    .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                                    .populate({ path: 'car', select: '_id id title registration_no ic rc', populate: { path: 'thumbnails' } })
                                    .exec();


                                if (booking.address) {
                                    var address = await Address.findOne({ _id: booking.address }).exec();
                                }
                                else {
                                    var address = {};
                                }
                                if (booking.car) {
                                    var car = {
                                        title: booking.car.title,
                                        _id: booking.car._id,
                                        id: booking.car.id,
                                        rc_address: booking.car.rc_address,
                                        ic_address: booking.car.ic_address,
                                        ic: booking.car.ic,
                                        rc: booking.car.rc,
                                        registration_no: booking.car.registration_no,
                                    }
                                }
                                else {
                                    var car = {
                                        title: "",
                                        _id: null,
                                        id: null,
                                        rc_address: "",
                                        ic_address: "",
                                        ic: "",
                                        rc: "",
                                        registration_no: "",
                                    }

                                }
                                var manager = null;
                                if (booking.manager) {
                                    manager = {
                                        name: booking.manager.name,
                                        _id: booking.manager._id,
                                        id: booking.manager.id,
                                        contact_no: booking.manager.contact_no,
                                        email: booking.manager.email
                                    }
                                }
                                bookings.push({
                                    _id: booking._id,
                                    id: booking._id,
                                    car: car,
                                    user: {
                                        name: booking.user.name,
                                        _id: booking.user._id,
                                        id: booking.user.id,
                                        contact_no: booking.user.contact_no,
                                        email: booking.user.email,
                                        business_info: booking.user.business_info
                                    },
                                    manager: manager,
                                    services: booking.services,
                                    convenience: booking.convenience,
                                    date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                                    time_slot: booking.time_slot,
                                    status: booking.status,
                                    booking_no: booking.booking_no,
                                    job_no: booking.job_no,
                                    estimation_requested: booking.estimation_requested,
                                    address: address,
                                    remarks: booking.remarks,
                                    customer_requirements: booking.customer_requirements,
                                    payment: booking.payment,
                                    txnid: booking.txnid,
                                    __v: booking.__v,
                                    created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                                    updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                                });


                                event.zohoLead(b._id)

                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "New Booking",
                                    activity: "New Booking",
                                };

                                fun.bookingLog(booking._id, activity);

                                var notify = {
                                    receiver: [booking.user],
                                    activity: "booking",
                                    tag: "newBooking",
                                    source: booking._id,
                                    sender: booking.business,
                                    points: 0,
                                    tz: req.headers['tz']
                                };
                                fun.newNotification(notify);
                                // console.log('18744');
                                if (req.body.status !== "Inactive") {
                                    // console.log('in if 187');
                                    var activity = "Booking";
                                    fun.webNotification(activity, booking);


                                    event.bookingMail(b._id, business);
                                }

                                res.status(200).json({
                                    responseCode: 200,
                                    responseMessage: "Booking",
                                    responseData: bookings[0]
                                });
                            });
                        });
                    }
                    else {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "registration no already exist",
                            responseData: {}
                        });
                    }
                }
                else {
                    return res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Car variant not found",
                        responseData: {}
                    })
                }
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "User not found",
                responseData: {}
            });
        }
    }
});
//Abhinav Tygai
router.post('/lead/booking/confirmed/add/', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var role = await Management.findOne({ user: decoded.user, business: business }).exec();

    var advisor = await q.all(businessFunctions.getAdvisor(loggedInDetails._id, business));

    var estimation_requested = false;
    if (req.body.estimation_requested == "Yes") {
        estimation_requested = true;
    }

    var date = null;
    if (req.body.date) {
        date = new Date(req.body.date).toISOString();
    }

    var time_slot = "";
    if (req.body.time_slot) {
        time_slot = req.body.time_slot;
    }

    var convenience = "";
    if (req.body.convenience) {
        convenience = req.body.convenience
    }

    var address = null;
    if (req.body.address) {
        address = req.body.address;
    }

    var role = await Management.findOne({ user: user, business: business }).exec();

    // console.log("18495 req.body.lead = " + req.body.lead)
    if (role.role == "CRE") {
        var lead = await Lead.findOne({ assignee: user, _id: req.body.lead }).exec();
    }
    else {
        var lead = await Lead.findOne({ business: business, _id: req.body.lead }).exec();
    }

    if (lead) {

        var leadUser = {
            name: lead.name,
            contact_no: lead.contact_no,
            email: lead.email,
            user: lead.user,
        }
        // console.log("18511 leadUser.contact_no = " + leadUser.contact_no)
        // var user = await q.all(businessFunctions.getUser(leadUser))
        var user = await User.findOne({ _id: req.body.user }).exec();
        if (user) {
            var rg = req.body.registration_no;
            req.body.registration_no = rg.replace(/ /g, '');

            var leadCar = {
                user: user,
                car: req.body.car,
                variant: req.body.variant,
                registration_no: req.body.registration_no,
            }
            var car = await q.all(businessFunctions.getCar(leadCar))
            if (car) {
                var booking = await Booking.findOne({ car: car._id, user: user, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] }, is_services: true }).exec();
                if (booking) {
                    return res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Booking already exists for the same registration no. [" + booking.status + "]",
                        responseData: {},
                    });
                }
                else {
                    var bookingService = [];
                    var customer_requirements = [];

                    if (req.body.requirement) {
                        customer_requirements.push({
                            requirement: req.body.requirement,
                        });
                    }

                    var payment = {
                        payment_mode: "",
                        payment_status: "Pending",
                        discount_type: "",
                        coupon: "",
                        coupon_type: "",
                        discount: 0,
                        discount_total: 0,
                        part_cost: 0,
                        labour_cost: 0,
                        paid_total: 0,
                        total: 0,
                        discount_applied: false,
                        transaction_id: "",
                        transaction_date: "",
                        transaction_status: "",
                        transaction_response: ""
                    }

                    var bookingData = {
                        package: null,
                        car: car,
                        advisor: advisor,
                        manager: lead.assignee,
                        business: business,
                        user: user,
                        services: bookingService,
                        customer_requirements: customer_requirements,
                        booking_no: Math.round(+new Date() / 1000),
                        date: date,
                        time_slot: time_slot,
                        estimation_requested: estimation_requested,
                        convenience: convenience,
                        status: "Inactive",
                        payment: payment,
                        address: address,
                        lead: lead._id,
                        is_services: true,
                        converted: true,
                        created_at: new Date(),
                        updated_at: new Date()
                    };

                    await Booking.create(bookingData).then(async function (b) {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Inactive",
                            activity: "Booking",
                        };

                        // fun.bookingLog(b._id, activity);

                        if (role.role == "CRE") {
                            if (estimation_requested) {    //False
                                var notify = {
                                    receiver: [b.advisor],
                                    sender: loggedInDetails._id,
                                    activity: "booking",
                                    source: b._id,
                                    tag: "EstimateRequested",
                                    points: 0,
                                }

                                // fun.newNotification(notify);
                            }
                            else {
                                var notify = {
                                    source: b._id,
                                    receiver: [b.advisor],
                                    sender: loggedInDetails._id,
                                    activity: "booking",
                                    tag: "leadBooking",
                                    points: 0,
                                }
                                // fun.newNotification(notify);
                            }
                        }
                        else {
                            if (estimation_requested) { //false
                                var notify = {
                                    receiver: [b.manager],
                                    sender: loggedInDetails._id,
                                    activity: "booking",
                                    source: b._id,
                                    tag: "Inactive",
                                    points: 0,
                                }

                                // fun.newNotification(notify);
                            }
                            else {
                                var notify = {
                                    source: b._id,
                                    receiver: [b.manager],
                                    sender: loggedInDetails._id,
                                    activity: "booking",
                                    tag: "Inactive",
                                    points: 0,
                                }
                                // fun.newNotification(notify);
                            }
                        }
                        var contact_no = lead.contact_no
                        var alternate_no = ''
                        if (lead.optional_info) {
                            alternate_no = lead.optional_info.alternate_no
                        }

                        if (user.contact_no != lead.contact_no) {
                            contact_no: user.contact_no
                            alternate_no = lead.contact_no
                        }
                        // var activity = "Booking";
                        // fun.webNotification(activity, b);

                        var data = {
                            user: user,
                            contact_no: contact_no,
                            "optional_info.alternate_no": alternate_no,
                            follow_up: {},
                            converted: true,
                            remark: {
                                lead: lead._id,
                                status: "Inactive",
                                color_code: lead.remark.color_code,
                                assignee: user,
                                customer_remark: "Inactive",
                                assignee_remark: "Inactive",
                                created_at: new Date(),
                                updated_at: new Date(),
                            },
                            // created_at: new Date(),
                            updated_at: new Date(),
                        };
                        // var activity = "Booking";
                        // fun.webNotification(activity, booking);

                        await Lead.findOneAndUpdate({ _id: lead._id }, { $set: data }, { new: true }, async function (err, doc) {
                            if (err) {
                                return res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: err
                                });
                            }
                            else {
                                LeadRemark.create(data.remark).then(function (newRemark) {
                                    Lead.findOneAndUpdate({ _id: lead._id }, { $push: { remarks: newRemark._id } }, { new: true }, async function (err, doc) {
                                    })
                                });;
                            }
                        });


                        var bookings = [];
                        var booking = await Booking.findById(b._id)
                            .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
                            .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
                            .populate({ path: 'car', select: '_id id title registration_no ic rc', populate: { path: 'thumbnails' } })
                            .exec();


                        if (booking.address) {
                            var address = await Address.findOne({ _id: booking.address }).exec();
                        }
                        else {
                            var address = {};
                        }
                        if (booking.car) {
                            var car = {
                                title: booking.car.title,
                                _id: booking.car._id,
                                id: booking.car.id,
                                rc_address: booking.car.rc_address,
                                ic_address: booking.car.ic_address,
                                ic: booking.car.ic,
                                rc: booking.car.rc,
                                registration_no: booking.car.registration_no,
                            }
                        }

                        var manager = null;
                        if (booking.manager) {
                            manager = {
                                name: booking.manager.name,
                                _id: booking.manager._id,
                                id: booking.manager.id,
                                contact_no: booking.manager.contact_no,
                                email: booking.manager.email
                            }
                        }
                        if (booking.user) {
                            user = {
                                name: booking.user.name,
                                _id: booking.user._id,
                                id: booking.user.id,
                                contact_no: booking.user.contact_no,
                                email: booking.user.email,
                                business_info: booking.user.business_info
                            }
                        }
                        bookings.push({
                            _id: booking._id,
                            id: booking._id,
                            car: car,
                            user: user,
                            manager: manager,
                            services: booking.services,
                            convenience: booking.convenience,
                            date: moment(booking.date).tz(req.headers['tz']).format('ll'),
                            time_slot: booking.time_slot,
                            status: booking.status,
                            booking_no: booking.booking_no,
                            job_no: booking.job_no,
                            estimation_requested: booking.estimation_requested,
                            address: address,
                            remarks: booking.remarks,
                            customer_requirements: booking.customer_requirements,
                            payment: booking.payment,
                            txnid: booking.txnid,
                            __v: booking.__v,
                            created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                            updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
                        });
                        //await whatsAppEvent.bookingWhatsApp(b._id,business)
                        // Lead.findOneAndUpdate({ _id: lead._id }, { $set: { user: user, converted: true } }, { new: false }, async function (err, doc) {
                        //     if (err) {
                        //         res.status(422).json({
                        //             responseCode: 422,
                        //             responseMessage: "Server Error",
                        //             responseData: err
                        //         });
                        //     }
                        //     else {
                        //         event.zohoLead(b._id);

                        //         res.status(200).json({
                        //             responseCode: 200,
                        //             responseMessage: "Booking",
                        //             responseData: bookings
                        //         });
                        //     }
                        // });
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Booking",
                            responseData: bookings[0]
                        });
                    });
                }
            }
            else {
                res.status(422).json({
                    responseCode: 400,
                    responseMessage: "Car required",
                    responseData: {}
                });
            }
        }
        else {
            res.status(422).json({
                responseCode: 400,
                responseMessage: "Name & Contact_no is required",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Lead not found",
            responseData: {}
        });
    }
});
router.post('/lead/booking/services/add', async function (req, res, next) {
    // console.log("Logs body..............................", req.body.status)
    var rules = {
        booking: 'required',
        services: 'required'
    };
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Error",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        if (req.body.package == "") {
            req.body.package = null;
        }

        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var total = 0;
        var labourCost = 0;

        var part_cost = 0;
        var is_services = true;
        var doorstep = true;
        var bookingService = [];
        var checkBooking = await Booking.findOne({ _id: req.body.booking, status: { $in: ["Confirmed", "Pending", "Approval", "Inactive", "Approved", "Failed", "JobInitiated"] }, is_services: true }).exec();
        var services = req.body.services
        // var servicesList = req.body.services
        // var services = []
        // for (var s = 0; s < servicesList.length; s++) {
        //     if (servicesList[s].type == "services") {

        //         services.push(await Booking.findOne({ _id: servicesList[s].id }).exec())
        //     } else if (services[s].type == "collision") {
        //         services.push(await Booking.findOne({ _id: servicesList[s].id }).exec())
        //     } else if (services[s].type == "detailing") {
        //         services.push(await Booking.findOne({ _id: servicesList[s].id }).exec())
        //     } else if (services[s].type == "customization") {
        //         services.push(await Booking.findOne({ _id: servicesList[s].id }).exec())
        //     }
        // }



        if (checkBooking) {
            for (var i = 0; i < services.length; i++) {
                var quantity = 1
                if (services[i].type == "package") {
                    await Package.find({ _id: services[i].id }).cursor().eachAsync(async (service) => {
                        if (service) {
                            var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                            var tax_rate = tax_info.detail;
                            var amount = service.cost;
                            var base = amount;
                            var labour_tax = [];
                            var labours = [];

                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t
                                        labour_tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                            amount: parseFloat(t.toFixed(2))
                                        })
                                    }
                                    else {
                                        base = base - t
                                        labour_tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: parseFloat(tax_info.rate.toFixed(2)),
                                            amount: parseFloat(tax_on_amount.toFixed(2))
                                        })
                                    }
                                }
                            }

                            labours.push({
                                item: service.name,
                                quantity: 1,
                                rate: parseFloat(service.cost),
                                base: parseFloat(base.toFixed(2)),
                                amount: parseFloat(amount),
                                discount: 0,
                                customer_dep: 100,
                                insurance_dep: 0,
                                amount_is_tax: "inclusive",
                                tax_amount: _.sumBy(labour_tax, x => x.amount),
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                tax_info: {
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    rate: tax_info.rate,
                                    base: parseFloat(base.toFixed(2)),
                                    detail: labour_tax
                                }
                            })

                            is_services = false;

                            bookingService.push({
                                source: services[i].id,
                                service: service.name,
                                description: service.description,
                                cost: Math.ceil(service.cost),
                                labour_cost: Math.ceil(service.cost),
                                part_cost: 0,
                                of_cost: 0,
                                discount: 0,
                                parts: [],
                                labour: labours,
                                opening_fitting: [],
                                type: "package",
                                customer_approval: true, surveyor_approval: false,
                            });

                            // console.log(bookingService)

                        }
                        else {
                            res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Service Not Found",
                                responseData: {},
                            });
                        }
                    });
                }
                else if (services[i].type == "addOn") {
                    await Package.find({ _id: services[i].id }).cursor().eachAsync(async (service) => {
                        if (service) {
                            var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                            var tax_rate = tax_info.detail;
                            var amount = service.cost;
                            var base = amount;
                            var labour_tax = [];
                            var labours = [];

                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t
                                        labour_tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                            amount: parseFloat(t.toFixed(2))
                                        })
                                    }
                                    else {
                                        base = base - t
                                        labour_tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: parseFloat(tax_info.rate.toFixed(2)),
                                            amount: parseFloat(tax_on_amount.toFixed(2))
                                        })
                                    }
                                }
                            }

                            labours.push({
                                item: service.name,
                                quantity: 1,
                                rate: parseFloat(service.cost),
                                base: parseFloat(base.toFixed(2)),
                                amount: parseFloat(amount),
                                discount: 0,
                                customer_dep: 100,
                                insurance_dep: 0,
                                amount_is_tax: "inclusive",
                                tax_amount: _.sumBy(labour_tax, x => x.amount),
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                tax_info: {
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    rate: tax_info.rate,
                                    base: parseFloat(base.toFixed(2)),
                                    detail: labour_tax
                                }
                            })

                            is_services = true;

                            bookingService.push({
                                source: service._id,
                                service: service.name,
                                description: service.description,
                                cost: Math.ceil(service.cost),
                                labour_cost: Math.ceil(service.cost),
                                part_cost: 0,
                                of_cost: 0,
                                discount: 0,
                                parts: [],
                                labour: labours,
                                opening_fitting: [],
                                type: "addOn",
                                customer_approval: true, surveyor_approval: false,
                            });

                        }
                        else {
                            res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Service Not Found",
                                responseData: {},
                            });
                        }
                    });
                }
                else if (services[i].type == "services") {
                    is_services = true;
                    await Service.find({ _id: services[i].id, publish: true, })
                        .cursor().eachAsync(async (service) => {
                            var getDiscount = {
                                package: '',
                                car: req.body.car,
                                category: service.type,
                                service: service.service,
                                tz: req.headers['tz'],
                                claim: false,
                            };

                            if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                var quantity = 1
                            }
                            else {
                                var quantity = parseInt(services[i].quantity)
                            }

                            var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                            var labour_list = service.labour;
                            var labours = [];

                            var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                            if (labour_list.length > 0) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].amount) * quantity;
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (Object.keys(package).length > 0) {
                                        if (package.discount_type == "percent") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = amount * (discount / 100);
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else if (package.discount_type == "fixed") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = parseFloat(discount_total.toFixed(2))
                                                discount = amount - discount_total;
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }


                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: quantity,
                                        base: parseFloat(total.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            bookingService.push({
                                service: service.service,
                                labour: labours,
                                labour_cost: _.sumBy(labours, x => x.amount),
                                discount: _.sumBy(labours, x => x.discount),
                                parts: service.parts,
                                part_cost: Math.ceil(service.part_cost),
                                opening_fitting: service.opening_fitting,
                                of_cost: Math.ceil(service.of_cost),
                                exceeded_cost: 0,
                                mrp: Math.ceil(service.mrp),
                                cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                doorstep: service.doorstep,
                                unit: service.unit,
                                quantity: quantity,
                                part_cost_editable: service.part_cost_editable,
                                labour_cost_editable: service.labour_cost_editable,
                                of_cost_editable: service.of_cost_editable,
                                type: service.type,
                                source: service.id,
                                description: service.description,
                                claim: false,
                                customer_approval: true, surveyor_approval: false,
                            });
                        });
                }
                else if (services[i].type == "collision") {
                    is_services = true;
                    await Collision.find({ _id: services[i].id, publish: true, })
                        .cursor().eachAsync(async (service) => {
                            var getDiscount = {
                                package: "",
                                car: req.body.car,
                                category: service.type,
                                service: service.service,
                                tz: req.headers['tz'],
                                claim: false,
                            };

                            if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                var quantity = 1
                            }
                            else {
                                var quantity = parseInt(services[i].quantity)
                            }

                            var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                            var labour_list = service.labour;
                            var labours = [];

                            var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                            if (labour_list.length > 0) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].amount) * quantity;
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (Object.keys(package).length > 0) {
                                        if (package.discount_type == "percent") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = amount * (discount / 100);
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else if (package.discount_type == "fixed") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = parseFloat(discount_total.toFixed(2))
                                                discount = amount - discount_total;
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }


                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: quantity,
                                        base: parseFloat(total.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            bookingService.push({
                                service: service.service,
                                labour: labours,
                                labour_cost: _.sumBy(labours, x => x.amount),
                                discount: _.sumBy(labours, x => x.discount),
                                parts: service.parts,
                                part_cost: Math.ceil(service.part_cost),
                                opening_fitting: service.opening_fitting,
                                of_cost: Math.ceil(service.of_cost),
                                exceeded_cost: 0,
                                mrp: Math.ceil(service.mrp),
                                cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                doorstep: service.doorstep,
                                unit: service.unit,
                                quantity: quantity,
                                part_cost_editable: service.part_cost_editable,
                                labour_cost_editable: service.labour_cost_editable,
                                of_cost_editable: service.of_cost_editable,
                                type: service.type,
                                source: service.id,
                                description: service.description,
                                claim: false,
                                customer_approval: true, surveyor_approval: false,
                            });
                        });
                }
                else if (services[i].type == "detailing") {
                    is_services = true;
                    await Detailing.find({ _id: services[i].id, publish: true, })
                        .cursor().eachAsync(async (service) => {
                            var getDiscount = {
                                package: "",
                                car: req.body.car,
                                category: service.type,
                                service: service.service,
                                tz: req.headers['tz'],
                                claim: false,
                            };

                            if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                var quantity = 1
                            }
                            else {
                                var quantity = parseInt(services[i].quantity)
                            }

                            var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                            var labour_list = service.labour;
                            var labours = [];

                            var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                            if (labour_list.length > 0) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].amount) * quantity;
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (Object.keys(package).length > 0) {
                                        if (package.discount_type == "percent") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = amount * (discount / 100);
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else if (package.discount_type == "fixed") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = parseFloat(discount_total.toFixed(2))
                                                discount = amount - discount_total;
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }


                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: quantity,
                                        base: parseFloat(total.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            bookingService.push({
                                service: service.service,
                                labour: labours,
                                labour_cost: _.sumBy(labours, x => x.amount),
                                discount: _.sumBy(labours, x => x.discount),
                                parts: service.parts,
                                part_cost: Math.ceil(service.part_cost),
                                opening_fitting: service.opening_fitting,
                                of_cost: Math.ceil(service.of_cost),
                                exceeded_cost: 0,
                                mrp: Math.ceil(service.mrp),
                                cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                doorstep: service.doorstep,
                                unit: service.unit,
                                quantity: quantity,
                                part_cost_editable: service.part_cost_editable,
                                labour_cost_editable: service.labour_cost_editable,
                                of_cost_editable: service.of_cost_editable,
                                type: service.type,
                                source: service.id,
                                description: service.description,
                                claim: false,
                                customer_approval: true, surveyor_approval: false,
                            });
                        });
                }
                else if (services[i].type == "customization") {
                    is_services = true;
                    await Customization.find({ _id: services[i].id, publish: true, })
                        .cursor().eachAsync(async (service) => {
                            var getDiscount = {
                                package: "",
                                car: req.body.car,
                                category: service.type,
                                service: service.service,
                                tz: req.headers['tz'],
                                claim: false,
                            };

                            if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                                var quantity = 1
                            }
                            else {
                                var quantity = parseInt(services[i].quantity)
                            }

                            var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                            var labour_list = service.labour;
                            var labours = [];

                            var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount * quantity);
                            if (labour_list.length > 0) {
                                for (var l = 0; l < labour_list.length; l++) {
                                    var discount_total = 0;
                                    var total = 0;
                                    var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                    var tax = [];
                                    var rate = labour_list[l].rate;
                                    var amount = parseFloat(labour_list[l].amount) * quantity;
                                    var tax_rate = tax_info.detail;
                                    var base = amount;

                                    if (Object.keys(package).length > 0) {
                                        if (package.discount_type == "percent") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = amount * (discount / 100);
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else if (package.discount_type == "fixed") {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = parseFloat(discount_total.toFixed(2))
                                                discount = amount - discount_total;
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                        else {
                                            discount = parseFloat(package.discount);
                                            if (!isNaN(discount) && discount > 0) {
                                                var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                                amount = amount - parseFloat(discount_total.toFixed(2))
                                                if (amount < 0) {
                                                    amount = 0
                                                }
                                            }
                                        }
                                    }

                                    if (labour_list[l].amount_is_tax == "inclusive") {
                                        var x = (100 + tax_info.rate) / 100;
                                        var tax_on_amount = amount / x;
                                        if (tax_rate.length > 0) {
                                            for (var r = 0; r < tax_rate.length; r++) {
                                                if (tax_rate[r].rate != tax_info.rate) {
                                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_rate[r].tax,
                                                        rate: tax_rate[r].rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                                else {
                                                    var t = amount - tax_on_amount;
                                                    base = base - t;
                                                    tax.push({
                                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                                        rate: tax_info.rate,
                                                        amount: parseFloat(t.toFixed(2))
                                                    });
                                                }
                                            }

                                            base = base - discount_total;
                                        }
                                        total = total + amount;
                                    }

                                    var tax_details = {
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: total,
                                        detail: tax
                                    }


                                    labours.push({
                                        item: labour_list[l].item,
                                        source: labour_list[l].source,
                                        rate: parseFloat(labour_list[l].rate),
                                        quantity: quantity,
                                        base: parseFloat(total.toFixed(2)),
                                        discount: parseFloat(discount_total.toFixed(2)),
                                        amount: total,
                                        customer_dep: parseFloat(labour_list[l].customer_dep),
                                        insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                        tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                        amount_is_tax: labour_list[l].amount_is_tax,
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        tax_info: tax_details
                                    });
                                }
                            }

                            bookingService.push({
                                service: service.service,
                                labour: labours,
                                labour_cost: _.sumBy(labours, x => x.amount),
                                discount: _.sumBy(labours, x => x.discount),
                                parts: service.parts,
                                part_cost: Math.ceil(service.part_cost),
                                opening_fitting: service.opening_fitting,
                                of_cost: Math.ceil(service.of_cost),
                                exceeded_cost: 0,
                                mrp: Math.ceil(service.mrp),
                                cost: service.part_cost + _.sumBy(labours, x => x.amount) + service.of_cost,
                                doorstep: service.doorstep,
                                unit: service.unit,
                                quantity: quantity,
                                part_cost_editable: service.part_cost_editable,
                                labour_cost_editable: service.labour_cost_editable,
                                of_cost_editable: service.of_cost_editable,
                                type: service.type,
                                source: service.id,
                                description: service.description,
                                claim: false,
                                customer_approval: true, surveyor_approval: false,
                            });
                        });
                }
            }

            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
            var part_cost = _.sumBy(bookingService, x => x.part_cost);
            var of_cost = _.sumBy(bookingService, x => x.of_cost);
            var discount_total = _.sumBy(bookingService, x => x.discount);
            var additionalDiscount = 0;
            var estimate_cost = servicesCost
            var servicesCost = labour_cost + part_cost + of_cost;
            var pick_up_charges = 0;
            var careager_cash = 0;
            // var paid_total = part_cost + labour_cost + of_cost + pick_up_charges - careager_cash;
            var paid_total = 0;
            var total = part_cost + labour_cost + of_cost + discount_total + pick_up_charges + additionalDiscount;

            var payment = {
                servicesCost: servicesCost,
                estimate_cost: servicesCost,
                careager_cash: careager_cash,
                additionalDiscount: additionalDiscount,
                payment_mode: "",
                payment_status: "Pending",
                discount_type: "",
                coupon: "",
                coupon_type: "",
                discount: discount_total.toFixed(2),
                discount_total: discount_total.toFixed(2),
                // terms: checkVendor.business_info.terms,
                // pick_up_limit: checkVendor.business_info.pick_up_limit,
                pick_up_charges: pick_up_charges,
                part_cost: parseFloat(part_cost.toFixed(2)),
                labour_cost: parseFloat(labour_cost.toFixed(2)),
                of_cost: parseFloat(of_cost.toFixed(2)),
                paid_total: 0,
                total: parseFloat(total.toFixed(2)),
                discount_applied: false,
                transaction_id: "",
                transaction_date: "",
                transaction_status: "",
                transaction_response: "",
                policy_clause: 0,
                salvage: 0,
            };



            var data = {
                services: bookingService,
                payment: payment,
                "due.due": Math.ceil(paid_total.toFixed(2)),
                status: "Inactive",
                created_at: new Date(),
                updated_at: new Date(),
                date: new Date(),
            };

            await Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: data }, { new: false }, async function (err, doc) {
                if (!err) {
                }
            });
            // fun.getCarEagerCash(req.body.booking)
            var bookingData = await Booking.findOne({ _id: req.body.booking }).exec();
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Requested Services has been added",
                responseData: bookingData
            });
        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking Not Found",
                responseData: {}
            });
        }
    }
});

router.get('/parts/get/', xAccessToken.token, async function (req, res, next) {
    var rules = {
        query: 'required',
        quantity: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Part/Part No & quantity required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        if (parseFloat(req.query.quantity) > 0) {
            var business = req.headers['business'];
            var token = req.headers['x-access-token'];
            var secret = config.secret;
            var decoded = jwt.verify(token, secret);
            var data = [];
            let regex = req.query.query.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");

            await BusinessProduct.find({
                business: business,
                "stock.available": { $gt: 0 },
                list_type: { $in: ["Offline"] },
                $or:
                    [
                        { part_no: new RegExp(regex, "i") },
                        { title: new RegExp(regex, "i") },
                        {
                            models: { $in: new RegExp(regex, "i") }
                        }
                    ]
                // $or:
                //     [
                //         { part_no: new RegExp(req.query.query, "i") },
                //         { title: new RegExp(req.query.query, "i") },
                //         {
                //             models: { $in: new RegExp(req.query.query, "i") }
                //         }
                //     ]
            })
                .cursor().eachAsync(async (p) => {
                    var quantity = parseFloat(req.query.quantity);
                    if (p.stock.available >= quantity) {
                        // var rate = p.price.sell_price;
                        // var base = p.price.sell_price * quantity;
                        // var amount = p.price.sell_price * quantity;

                        // var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        // var tax_rate = tax_info.detail;
                        // var tax = [];

                        // var x = (100 + p.tax_info.rate) / 100;
                        // var tax_on_amount = amount / x;
                        // if (tax_rate.length > 0) {
                        //     for (var r = 0; r < tax_rate.length; r++) {
                        //         if (tax_rate[r].rate != tax_info.rate) {
                        //             var t = tax_on_amount * (tax_rate[r].rate / 100);
                        //             base = base - t
                        //             tax.push({
                        //                 tax: tax_rate[r].tax,
                        //                 rate: tax_rate[r].rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //         else {
                        //             var t = amount - tax_on_amount;
                        //             base = base - t
                        //             tax.push({
                        //                 tax: tax_info.tax,
                        //                 rate: tax_info.rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //     }
                        // }

                        // var tax_details = {
                        //     tax: tax_info.tax,
                        //     rate: tax_info.rate,
                        //     amount: p.price.sell_price,
                        //     detail: tax
                        // }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            item: p.title,
                            sku: p.sku,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            unit: p.unit,
                            issued: false,
                            quantity: quantity,
                            mrp: parseFloat(p.price.mrp.toFixed(2)),
                            selling_price: parseFloat(p.price.sell_price.toFixed(2)),
                            rate: parseFloat(p.price.rate.toFixed(2)),
                            base: parseFloat(p.price.base.toFixed(2)),
                            amount: parseFloat(p.price.amount.toFixed(2)),
                            discount: p.price.discount,
                            discount_type: p.price.discount_type,
                            amount_is_tax: p.amount_is_tax,
                            tax_amount: p.price.tax_amount,
                            // tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: p.tax_details,
                            out_of_stock: false,
                            stock_available: p.stock.available,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }
                    else if (p.stock.available < quantity && p.stock.available > 0) {
                        quantity = p.stock.available;
                        // var rate = p.price.sell_price;
                        // var base = p.price.sell_price * quantity;
                        // var amount = p.price.sell_price * quantity;

                        // var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        // var tax_rate = tax_info.detail;
                        // var tax = [];

                        // var x = (100 + p.tax_info.rate) / 100;
                        // var tax_on_amount = amount / x;
                        // if (tax_rate.length > 0) {
                        //     for (var r = 0; r < tax_rate.length; r++) {
                        //         if (tax_rate[r].rate != tax_info.rate) {
                        //             var t = tax_on_amount * (tax_rate[r].rate / 100);
                        //             base = base - t
                        //             tax.push({
                        //                 tax: tax_rate[r].tax,
                        //                 rate: tax_rate[r].rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //         else {
                        //             var t = amount - tax_on_amount;
                        //             base = base - t
                        //             tax.push({
                        //                 tax: tax_info.tax,
                        //                 rate: tax_info.rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //     }
                        // }

                        // var tax_details = {
                        //     tax: tax_info.tax,
                        //     rate: tax_info.rate,
                        //     amount: p.price.sell_price,
                        //     detail: tax
                        // }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            sku: p.sku,
                            item: p.title,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            quantity: quantity,
                            mrp: parseFloat(p.price.mrp.toFixed(2)),
                            selling_price: parseFloat(p.price.sell_price.toFixed(2)),
                            rate: parseFloat(p.price.rate.toFixed(2)),
                            base: parseFloat(p.price.base.toFixed(2)),
                            amount: parseFloat(p.price.amount.toFixed(2)),
                            discount: p.price.discount,
                            discount_type: p.price.discount_type,
                            amount_is_tax: p.amount_is_tax,
                            tax_amount: p.price.tax_amount,
                            unit: p.unit,
                            amount_is_tax: p.amount_is_tax,
                            // tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: p.tax_info,
                            out_of_stock: false,
                            stock_available: p.stock.available,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }
                    else if (p.stock.available <= 0) {
                        quantity = 1;
                        // var rate = p.price.sell_price;
                        // var base = p.price.sell_price * quantity;
                        // var amount = p.price.sell_price * quantity;

                        // var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        // var tax_rate = tax_info.detail;
                        // var tax = [];

                        // var x = (100 + p.tax_info.rate) / 100;
                        // var tax_on_amount = amount / x;
                        // if (tax_rate.length > 0) {
                        //     for (var r = 0; r < tax_rate.length; r++) {
                        //         if (tax_rate[r].rate != tax_info.rate) {
                        //             var t = tax_on_amount * (tax_rate[r].rate / 100);
                        //             base = base - t
                        //             tax.push({
                        //                 tax: tax_rate[r].tax,
                        //                 rate: tax_rate[r].rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //         else {
                        //             var t = amount - tax_on_amount;
                        //             //base = base - discount_total
                        //             tax.push({
                        //                 tax: tax_info.tax,
                        //                 rate: tax_info.rate,
                        //                 amount: parseFloat(t.toFixed(2))
                        //             });
                        //         }
                        //     }
                        // }

                        // var tax_details = {
                        //     tax: tax_info.tax,
                        //     rate: tax_info.rate,
                        //     amount: p.price.sell_price,
                        //     detail: tax
                        // }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            sku: p.sku,
                            item: p.title,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            quantity: quantity,
                            mrp: parseFloat(p.price.mrp.toFixed(2)),
                            selling_price: parseFloat(p.price.sell_price.toFixed(2)),
                            rate: parseFloat(p.price.rate.toFixed(2)),
                            base: parseFloat(p.price.base.toFixed(2)),
                            amount: parseFloat(p.price.amount.toFixed(2)),
                            discount: p.price.discount,
                            discount_type: p.price.discount_type,
                            amount_is_tax: p.amount_is_tax,
                            tax_amount: p.price.tax_amount,
                            unit: p.unit,
                            amount_is_tax: p.amount_is_tax,
                            // tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: p.tax_info,
                            out_of_stock: true,
                            stock_available: 0,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }

                });

            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: data
            })
        }
        else {
            res.status(422).json({
                responseCode: 422,
                responseMessage: "Part/Part No & quantity required",
                responseData: {}
            })
        }
    }
});
router.get('/parts/get/OLD', xAccessToken.token, async function (req, res, next) {
    var rules = {
        query: 'required',
        quantity: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Part/Part No & quantity required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        if (parseFloat(req.query.quantity) > 0) {
            var business = req.headers['business'];
            var token = req.headers['x-access-token'];
            var secret = config.secret;
            var decoded = jwt.verify(token, secret);
            var data = [];
            await BusinessProduct.find({ business: business, "stock.available": { $gt: 0 }, list_type: { $in: ["Offline"] }, $or: [{ part_no: new RegExp(req.query.query, "i") }, { title: new RegExp(req.query.query, "i") }, { models: { $in: new RegExp(req.query.query, "i") } }] })
                .cursor().eachAsync(async (p) => {
                    var quantity = parseFloat(req.query.quantity);
                    if (p.stock.available >= quantity) {
                        var rate = p.price.sell_price;
                        var base = p.price.sell_price * quantity;
                        var amount = p.price.sell_price * quantity;

                        var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        var tax_rate = tax_info.detail;
                        var tax = [];

                        var x = (100 + p.tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t
                                    tax.push({
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: p.price.sell_price,
                            detail: tax
                        }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            item: p.title,
                            sku: p.sku,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            unit: p.unit,
                            issued: false,
                            quantity: quantity,
                            mrp: parseFloat(rate.toFixed(2)),
                            selling_price: parseFloat(rate.toFixed(2)),
                            rate: parseFloat(rate.toFixed(2)),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount.toFixed(2)),
                            discount: 0,
                            amount_is_tax: p.amount_is_tax,
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: tax_details,
                            out_of_stock: false,
                            stock_available: p.stock.available,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }
                    else if (p.stock.available < quantity && p.stock.available > 0) {
                        quantity = p.stock.available;
                        var rate = p.price.sell_price;
                        var base = p.price.sell_price * quantity;
                        var amount = p.price.sell_price * quantity;

                        var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        var tax_rate = tax_info.detail;
                        var tax = [];

                        var x = (100 + p.tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t
                                    tax.push({
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: p.price.sell_price,
                            detail: tax
                        }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            sku: p.sku,
                            item: p.title,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            quantity: quantity,
                            mrp: parseFloat(rate.toFixed(2)),
                            selling_price: parseFloat(rate.toFixed(2)),
                            rate: parseFloat(rate.toFixed(2)),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount.toFixed(2)),
                            issued: false,
                            discount: 0,
                            unit: p.unit,
                            amount_is_tax: p.amount_is_tax,
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: tax_details,
                            out_of_stock: false,
                            stock_available: p.stock.available,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }
                    else if (p.stock.available <= 0) {
                        quantity = 1;
                        var rate = p.price.sell_price;
                        var base = p.price.sell_price * quantity;
                        var amount = p.price.sell_price * quantity;

                        var tax_info = await Tax.findOne({ tax: p.tax_info.tax }).exec();
                        var tax_rate = tax_info.detail;
                        var tax = [];

                        var x = (100 + p.tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    //base = base - discount_total
                                    tax.push({
                                        tax: tax_info.tax,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: p.price.sell_price,
                            detail: tax
                        }

                        data.push({
                            _id: mongoose.Types.ObjectId(),
                            sku: p.sku,
                            item: p.title,
                            part_no: p.part_no,
                            hsn_sac: p.hsn_sac,
                            source: p._id,
                            quantity: quantity,
                            mrp: parseFloat(rate.toFixed(2)),
                            selling_price: parseFloat(rate.toFixed(2)),
                            rate: parseFloat(rate.toFixed(2)),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount.toFixed(2)),
                            discount: 0,
                            issued: false,
                            unit: p.unit,
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: p.amount_is_tax,
                            tax: p.tax_info.tax,
                            tax_rate: p.tax_info.rate,
                            tax_info: tax_details,
                            out_of_stock: true,
                            stock_available: 0,
                            business: p.business,
                            customer_dep: 100,
                            insurance_dep: 0,
                        });
                    }

                });

            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: data
            })
        }
        else {
            res.status(422).json({
                responseCode: 422,
                responseMessage: "Part/Part No & quantity required",
                responseData: {}
            })
        }
    }
});

router.post('/job/parts/add/', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var booking = await Booking.findById(req.body.booking).exec();
    if (booking) {
        var updated_parts = [];
        var exceeded_cost = 0;
        var services = req.body.service;
        var bookingService = {};
        if (services) {
            var service_part = services.parts;
            if (service_part.length > 0) {
                for (var p = 0; p < service_part.length; p++) {
                    parts_visible = false;
                    var tax_info = await Tax.findOne({ tax: service_part[p].tax }).exec();
                    var quantity = service_part[p].quantity;
                    var tax_rate = tax_info.detail;
                    var amount = service_part[p].amount;
                    var discount_total = 0;
                    var base = amount;
                    var part_tax = [];


                    if (service_part[p].discount) {
                        discount_total = service_part[p].discount;
                        amount = amount - parseFloat(discount_total.toFixed(2))
                    }

                    if (service_part[p].amount_is_tax == "exclusive") {
                        var tax_on_amount = amount;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t; parseFloat
                                    part_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    amount = amount + t;
                                    part_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }
                    }

                    if (service_part[p].amount_is_tax == "inclusive") {
                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t;
                                    part_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    part_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                            }
                        }

                        //base = base - discount_total; 
                    }

                    var tax_detail = {
                        tax: tax_info.tax,
                        tax_rate: tax_info.rate,
                        rate: tax_info.rate,
                        base: parseFloat(base.toFixed(2)),
                        detail: part_tax
                    }



                    updated_parts.push({
                        _id: service_part[p]._id,
                        item: service_part[p].item,
                        source: service_part[p].source,
                        quantity: service_part[p].quantity,
                        hsn_sac: service_part[p].hsn_sac,
                        part_no: service_part[p].part_no,
                        rate: parseFloat(service_part[p].rate),
                        base: parseFloat(base.toFixed(2)),
                        amount: parseFloat(amount),
                        customer_dep: parseFloat(service_part[p].customer_dep),
                        insurance_dep: parseFloat(service_part[p].insurance_dep),
                        tax_amount: _.sumBy(part_tax, x => x.amount),
                        amount_is_tax: service_part[p].amount_is_tax,
                        discount: service_part[p].discount,
                        tax: tax_info.tax,
                        tax_rate: tax_info.rate,
                        issued: service_part[p].issued,
                        tax_info: tax_detail
                    });
                }
            }



            var issue_part_cost = _.sumBy(updated_parts, x => x.amount);
            var issue_labour_cost = _.sumBy(services.labour, x => x.amount);
            if (services.source != null) {
                bookingService = {
                    source: services.source,
                    part_cost: issue_part_cost,
                    labour_cost: services.labour_cost,
                    exceeded_cost: exceeded_cost,
                    of_cost: services.of_cost,
                    part_rate: services.part_rate,
                    cost: issue_part_cost + services.labour_cost + services.of_cost,
                    labour_rate: services.labour_rate,
                    quantity: services.quantity,
                    of_rate: services.of_rate,
                    parts: updated_parts,
                    labour: services.labour,
                    discount: _.sumBy(services.labour, x => x.discount) + _.sumBy(updated_parts, x => x.discount) + _.sumBy(services.opening_fitting, x => x.discount),
                    opening_fitting: services.opening_fitting,
                    part_cost_editable: services.part_cost_editable,
                    labour_cost_editable: services.part_cost_editable,
                    of_cost_editable: services.part_cost_editable,
                    description: services.description,
                    service: services.service,
                    type: services.type,
                    claim: services.claim,
                    custom: services.custom,
                    customer_approval: services.customer_approval,
                    surveyor_approval: services.claim,
                }
            }
            else {
                bookingService = {
                    source: services.source,
                    part_cost: issue_part_cost,
                    labour_cost: services.labour_cost,
                    exceeded_cost: exceeded_cost,
                    of_cost: services.of_cost,
                    part_rate: services.part_rate,
                    cost: issue_part_cost + services.labour_cost + services.of_cost,
                    labour_rate: services.labour_rate,
                    quantity: services.quantity,
                    of_rate: services.of_rate,
                    parts: updated_parts,
                    labour: services.labour,
                    discount: _.sumBy(services.labour, x => x.discount) + _.sumBy(updated_parts, x => x.discount) + _.sumBy(services.opening_fitting, x => x.discount),
                    opening_fitting: services.opening_fitting,
                    part_cost_editable: services.part_cost_editable,
                    labour_cost_editable: services.part_cost_editable,
                    of_cost_editable: services.part_cost_editable,
                    description: services.description,
                    service: services.service,
                    type: services.type,
                    claim: services.claim,
                    custom: services.custom,
                    customer_approval: services.customer_approval,
                    surveyor_approval: services.claim,
                }
            }



            businessFunctions.serviceAdd(bookingService, booking._id);
            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: bookingService
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "No Service found",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.post('/job/parts/issue/', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var booking = await Booking.findById(req.body.booking).exec();
    if (booking) {
        var bookingService = [];
        var services = req.body.services;
        if (services.length > 0) {
            for (var i = 0; i < services.length; i++) {
                var update_parts = [];
                var parts = services[i].parts;
                if (parts.length > 0) {
                    for (var k = 0; k < parts.length; k++) {
                        if (parseFloat(parts[k].customer_dep) == 0 && parseFloat(parts[k].insurance_dep) == 0) {
                            var customer_dep = 100;
                            var insurance_dep = 0;
                        }
                        else {
                            var customer_dep = parseFloat(parts[k].customer_dep);
                            var insurance_dep = parseFloat(parts[k].insurance_dep);
                        }

                        if (parts[k].source != null && parts[k].issued == false) {
                            var businessProduct = await BusinessProduct.findById(parts[k].source).exec();

                            if (businessProduct.stock.available >= parts[k].quantity) {
                                var stockTotal = parseFloat(businessProduct.stock.total);
                                var stockAvailable = parseFloat(businessProduct.stock.available) - parts[k].quantity;
                                var stockConsumed = parseFloat(businessProduct.stock.consumed) + parts[k].quantity;

                                if (stockAvailable < 0) {
                                    stockAvailable = 0
                                }

                                if (stockConsumed < 0) {
                                    stockConsumed = 0
                                }

                                var stock = {
                                    total: stockTotal,
                                    available: stockAvailable,
                                    consumed: stockConsumed
                                };

                                update_parts.push({
                                    _id: parts[k]._id,
                                    source: parts[k].source,
                                    quantity: parts[k].quantity,
                                    issued: true,
                                    item: parts[k].item,
                                    hsn_sac: parts[k].hsn_sac,
                                    part_no: parts[k].part_no,
                                    quantity: parts[k].quantity,
                                    rate: parts[k].rate,
                                    base: parts[k].base,
                                    amount: parts[k].amount,
                                    customer_dep: customer_dep,
                                    insurance_dep: insurance_dep,
                                    tax_amount: parts[k].tax_amount,
                                    amount_is_tax: parts[k].amount_is_tax,
                                    discount: parts[k].discount,
                                    tax_rate: parts[k].tax_rate,
                                    tax: parts[k].tax,
                                    tax_info: parts[k].tax_info,
                                });

                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "Parts Updates",
                                    activity: parts[k].item + "(" + parts[k].part_no + ") has been issued.\n" + parts[k].quantity + "" + businessProduct.unit + "/ Price: " + parts[k].amount,
                                }

                                fun.bookingLog(booking._id, activity);

                                BusinessProduct.findOneAndUpdate({ _id: parts[k].source }, { $set: { stock: stock } }, { new: false }, async function (err, doc) {
                                    if (err) {
                                        // console.log(err)
                                    }
                                    else {

                                    }
                                });
                            }
                            else {
                                update_parts.push({
                                    _id: parts[k]._id,
                                    source: parts[k].source,
                                    quantity: parts[k].quantity,
                                    issued: parts[k].issued,
                                    item: parts[k].item,
                                    hsn_sac: parts[k].hsn_sac,
                                    part_no: parts[k].part_no,
                                    quantity: parts[k].quantity,
                                    rate: parts[k].rate,
                                    base: parts[k].base,
                                    amount: parts[k].amount,
                                    customer_dep: customer_dep,
                                    insurance_dep: insurance_dep,
                                    tax_amount: parts[k].tax_amount,
                                    amount_is_tax: parts[k].amount_is_tax,
                                    discount: parts[k].discount,
                                    tax_rate: parts[k].tax_rate,
                                    tax: parts[k].tax,
                                    tax_info: parts[k].tax_info,
                                });
                            }
                        }
                        else {
                            update_parts.push({
                                _id: parts[k]._id,
                                source: parts[k].source,
                                quantity: parts[k].quantity,
                                issued: parts[k].issued,
                                item: parts[k].item,
                                hsn_sac: parts[k].hsn_sac,
                                part_no: parts[k].part_no,
                                quantity: parts[k].quantity,
                                rate: parts[k].rate,
                                base: parts[k].base,
                                amount: parts[k].amount,
                                customer_dep: customer_dep,
                                insurance_dep: insurance_dep,
                                tax_amount: parts[k].tax_amount,
                                amount_is_tax: parts[k].amount_is_tax,
                                discount: parts[k].discount,
                                tax_rate: parts[k].tax_rate,
                                tax: parts[k].tax,
                                tax_info: parts[k].tax_info,
                            })
                        }
                    }
                }
                else {
                    update_parts = parts;
                }

                bookingService.push({
                    part_cost: services[i].part_cost,
                    labour_cost: services[i].labour_cost,
                    of_cost: services[i].of_cost,
                    exceeded_cost: services[i].exceeded_cost,
                    quantity: services[i].quantity,
                    parts: update_parts,
                    labour: services[i].labour,
                    cost: _.sumBy(services[i].labour, x => x.amount) + _.sumBy(update_parts, x => x.amount) + _.sumBy(services[i].opening_fitting, x => x.amount),
                    discount: _.sumBy(services[i].labour, x => x.discount) + _.sumBy(update_parts, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount),
                    opening_fitting: services[i].opening_fitting,
                    part_cost_editable: services[i].part_cost_editable,
                    labour_cost_editable: services[i].part_cost_editable,
                    of_cost_editable: services[i].part_cost_editable,
                    description: services[i].description,
                    service: services[i].service,
                    type: services[i].type,
                    claim: services[i].claim,
                    custom: services[i].custom,
                    customer_approval: services[i].customer_approval,
                    surveyor_approval: services[i].surveyor_approval,
                    source: services[i].source,
                });
            }

            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

            var policy_clause = 0
            if (booking.payment.policy_clause) {
                policy_clause = booking.payment.policy_clause;
            }
            var salvage = 0
            if (booking.payment.salvage) {
                salvage = booking.payment.salvage;
            }

            var paid_total = booking.payment.paid_total;
            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
            var part_cost = _.sumBy(bookingService, x => x.part_cost);
            var of_cost = _.sumBy(bookingService, x => x.of_cost);
            var discount_total = _.sumBy(bookingService, x => x.discount);
            var pick_up_charges = booking.payment.pick_up_charges;
            var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));
            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;
            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

            var due = {
                due: Math.ceil(due_amount.toFixed(2))
            }

            var payment = {
                estimate_cost: estimate_cost,
                total: payment_total,
                careager_cash: careager_cash,
                of_cost: of_cost,
                labour_cost: labour_cost,
                part_cost: part_cost,
                payment_mode: booking.payment.payment_mode,
                payment_status: booking.payment.payment_status,
                coupon: booking.payment.coupon,
                coupon_type: booking.payment.coupon_type,
                discount_by: booking.payment.discount_by,
                discount_type: booking.payment.discount_type,
                discount: booking.payment.discount,
                discount_total: discount_total,
                policy_clause: policy_clause,
                salvage: salvage,
                terms: booking.payment.terms,
                pick_up_limit: booking.payment.pick_up_limit,
                pick_up_charges: pick_up_charges,
                paid_total: parseFloat(booking.payment.paid_total),
                discount_applied: booking.payment.discount_applied,
                transaction_id: booking.payment.transaction_id,
                transaction_date: booking.payment.transaction_date,
                transaction_status: booking.payment.transaction_status,
                transaction_response: booking.payment.transaction_response
            };

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, payment: payment, due: due, updated_at: new Date() } }, { new: true }, async function (err, doc) {
                if (err) {
                    res.status(400).json({
                        responseCode: 400,
                        responseMessage: "Error",
                        responseData: err
                    });
                }
                else {
                    var logsss = "";
                    for (i = 0; i < doc.services.length; i++) {

                        logsss = logsss + " \n " + doc.services[i].service + " :- \n"
                        partsss = doc.services[i].parts
                        labour = doc.services[i].labour
                        // console.log(partsss)
                        for (j = 0; j < partsss.length; j++) {
                            logsss = logsss + "\n PARTS Updates:-  " + partsss[j].item + " - " + partsss[j].quantity + "/ Price: " + partsss[j].amount
                        }
                        for (j = 0; j < labour.length; j++) {
                            logsss = logsss + "\n Labour Updates:- " + labour[j].item + " - " + labour[j].quantity + "/ Price: " + labour[j].amount
                        }
                        // console.log(logsss)
                    }

                    // for (i = 0; i < doc.services.length; i++) {

                    //     logsss = logsss + "\n" + doc.services[i].service + " :- \n"
                    //     labour = doc.services[i].labour
                    // console.log(labour)
                    //     for (j = 0; j < labour.length; j++) {
                    //         logsss = logsss + "\n Labour Updates:- " + labour[j].item + " - " + labour[j].quantity + "/ Price: " + labour[j].amount
                    //     }
                    // }
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: "Stock Issue Updates",
                        activity: logsss
                        // activity: parts[k].item + "(" + parts[k].part_no + ") has been issued.\n" + parts[k].quantity + "" + businessProduct.unit + "/ Price: " + parts[k].amount,
                    }

                    fun.bookingLog(booking._id, activity);
                    var update = await Booking.findById(booking.id).exec();

                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Parts has been added",
                        responseData: update
                    });
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Services not found",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.put('/job/part/return/', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);

    var loggedInDetails = await User.findById(decoded.user).exec();
    var booking = await Booking.findById(req.body.booking).exec();
    if (booking) {
        var product = await BusinessProduct.findById(req.body.source).exec();
        if (product) {
            var stockTotal = parseFloat(product.stock.total)
            var stockConsumed = parseFloat(product.stock.consumed) - parseFloat(req.body.quantity);
            var stockAvailable = parseFloat(product.stock.available) + parseFloat(req.body.quantity);

            if (stockConsumed < 0) {
                stockConsumed = 0;
            }

            if (stockAvailable > stockTotal) {
                stockAvailable = stockTotal;
            }

            var stock = {
                total: stockTotal,
                consumed: stockTotal - stockAvailable,
                available: stockAvailable,
            };

            await BusinessProduct.findOneAndUpdate({ _id: product._id, business: business }, { $set: { stock: stock } }, { new: true }, async function (err, doc) {

                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err
                    });
                }
                else {
                    var bookingServices = [];
                    var services = booking.services;
                    var item_price = 0;
                    for (var i = 0; i < services.length; i++) {
                        var update_parts = [];
                        var parts = services[i].parts;
                        if (parts.length > 0) {
                            for (var k = 0; k < parts.length; k++) {
                                if (parts[k]._id.equals(req.body._id)) {
                                    // console.log(req.body._id + 'Return')
                                    item_price = parts[k].rate
                                    update_parts.push({
                                        _id: parts[k]._id,
                                        source: null,
                                        quantity: parts[k].quantity,
                                        issued: false,
                                        item: parts[k].item,
                                        hsn_sac: parts[k].hsn_sac,
                                        part_no: parts[k].part_no,
                                        quantity: parts[k].quantity,
                                        rate: parts[k].rate,
                                        base: parts[k].base,
                                        amount: parts[k].amount,
                                        customer_dep: parts[k].customer_dep,
                                        insurance_dep: parts[k].insurance_dep,
                                        tax_amount: parts[k].tax_amount,
                                        amount_is_tax: parts[k].amount_is_tax,
                                        discount: parts[k].discount,
                                        tax_rate: parts[k].tax_rate,
                                        tax: parts[k].tax,
                                        tax_info: parts[k].tax_info,
                                    })
                                }
                                else {
                                    update_parts.push({
                                        _id: parts[k]._id,
                                        source: parts[k].source,
                                        quantity: parts[k].quantity,
                                        issued: parts[k].issued,
                                        item: parts[k].item,
                                        hsn_sac: parts[k].hsn_sac,
                                        part_no: parts[k].part_no,
                                        quantity: parts[k].quantity,
                                        rate: parts[k].rate,
                                        base: parts[k].base,
                                        amount: parts[k].amount,
                                        customer_dep: parts[k].customer_dep,
                                        insurance_dep: parts[k].insurance_dep,
                                        tax_amount: parts[k].tax_amount,
                                        amount_is_tax: parts[k].amount_is_tax,
                                        discount: parts[k].discount,
                                        tax_rate: parts[k].tax_rate,
                                        tax: parts[k].tax,
                                        tax_info: parts[k].tax_info,
                                    })
                                }
                            }
                        }

                        bookingServices.push({
                            part_cost: services[i].part_cost,
                            labour_cost: services[i].labour_cost,
                            of_cost: services[i].of_cost,
                            exceeded_cost: services[i].exceeded_cost,
                            part_rate: services[i].part_rate,
                            labour_rate: services[i].labour_rate,
                            quantity: services[i].quantity,
                            of_rate: services[i].of_rate,
                            parts: update_parts,
                            labour: services[i].labour,
                            cost: services[i].cost,
                            discount: _.sumBy(services[i].labour, x => x.discount) + _.sumBy(services[i].opening_fitting, x => x.discount) + _.sumBy(update_parts, x => x.discount),
                            opening_fitting: services[i].opening_fitting,
                            part_cost_editable: services[i].part_cost_editable,
                            labour_cost_editable: services[i].part_cost_editable,
                            of_cost_editable: services[i].part_cost_editable,
                            description: services[i].description,
                            service: services[i].service,
                            type: services[i].type,
                            claim: services[i].claim,
                            custom: services[i].custom,
                            customer_approval: services[i].customer_approval,
                            surveyor_approval: services[i].surveyor_approval,
                            source: services[i].source,
                        });
                    }

                    Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingServices, updated_at: new Date() } }, { new: true }, async function (err, doc11) {
                        if (err) {
                            res.status(400).json({
                                responseCode: 400,
                                responseMessage: "Error",
                                responseData: err
                            });
                        }
                        else {
                            if (req.body.remark) {
                                var remarks = [];
                                remarks = booking.remarks;

                                remarks.push({
                                    remark: req.body.remark,
                                    added_by: loggedInDetails._id,
                                    date: moment().format('YYYY-MM-DD'),
                                    created_at: new Date(),
                                    updated_at: new Date()
                                })

                                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { remarks: remarks, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                                })
                            }

                            // var activity = {
                            //     user: loggedInDetails._id,
                            //     name: loggedInDetails.name,
                            //     stage: "Parts Updates",
                            //     activity: product.title + "(" + product.part_no + ") has been returned",
                            // }

                            // fun.bookingLog(booking._id, activity);
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Stock Updates",
                                // activities: "New part has Issued From Stock to Service :  " + booking.services[i].service + "   \n   --> " + req.body.item + " ( " + req.body.quantity + " * " + req.body.rate + " = " + total + " ) \n |------>  Details :> \n |--------->  Part No = " + req.body.part_no
                                activity: "|--->  " + req.body.quantity + "  " + product.title + "(" + product.part_no + ") has been returned",
                            }

                            fun.bookingLog(booking._id, activity);

                            var update = await Booking.findById(booking.id).exec();

                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Part return successfully",
                                responseData: update
                            });
                        }
                    });
                    var customer_details = await Booking.findById(booking._id).populate('user').populate('car').exec();

                    var price_amount = req.body.quantity * item_price;
                    var product_activity = {
                        vendor_name: customer_details.user.name,
                        // quantity: product.stock,
                        // quantity: parts[k].quantity,
                        quantity: req.body.quantity,
                        // unit_price: product.unit_price,
                        // price: product.mrp,
                        // price: parts[k].amount,
                        booking: booking._id,
                        price: price_amount,
                        received_by: loggedInDetails.name,
                        // purchase: purchase,
                        business: business,
                        activity: "Uninstalled",
                        created_at: new Date()
                    };
                    // console.log("Product activity", products[p].product, activity)
                    fun.productLog(doc._id, product_activity);
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Part not found",
                responseData: {}
            });
        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.get('/jobs/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var bookings = [];
    var filters = [];
    var totalResult = 0;

    var role = await Management.findOne({ user: user, business: business }).exec();

    var date = new Date();
    var to = new Date();
    to.setDate(date.getDate() - 1);
    to.setHours(23, 59, 58)



    var thumbnail = [];

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "user",
        foreignField: "_id",
        as: "user",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$user",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);

    var specification = {};
    specification['$lookup'] = {
        from: "Car",
        localField: "car",
        foreignField: "_id",
        as: "car",
    };
    filters.push(specification);

    /*var specification = {};
    specification['$unwind']= {
        path: "$car",
        preserveNullAndEmptyArrays : false
    };
    filters.push(specification);*/

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "advisor",
        foreignField: "_id",
        as: "advisor",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$advisor",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);

    var page = 0;

    if (req.query.page == undefined) {
        page = 0;
    }
    else {
        page = req.query.page;
    }

    var page = Math.max(0, parseInt(page));

    if (role.role == "Service Advisor") {
        var specification = {};
        specification['$match'] = {
            "advisor._id": mongoose.Types.ObjectId(role.user),

        }
        filters.push(specification);
    }

    var queries = new Object();
    var sortBy = new Object();


    if (req.query.query) {
        req.query.query = req.query.query.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");

        var specification = {};
        specification['$match'] = {
            business: mongoose.Types.ObjectId(business),
            status: { $in: ["In-Process", "Rework", "JobInitiated", "JobOpen", "CompleteWork", "QC", "StoreApproval", "Ready", "Completed", "Closed"] },
            $or: [
                { 'status': { $regex: req.query.query, $options: 'i' } },
                { 'booking_no': { $eq: req.query.query } },
                { 'user.name': { $regex: req.query.query, $options: 'i' } },
                { 'user.contact_no': { $regex: req.query.query, $options: 'i' } },
                { 'car.title': { $regex: req.query.query, $options: 'i' } },
                { 'car.registration_no': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.name': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.contact_no': { $regex: req.query.query, $options: 'i' } },
                { 'insurance_info.insurance_company': { $regex: req.query.query, $options: 'i' } },
                {
                    "logs": {
                        $elemMatch: {
                            "status": { $regex: req.query.query, $options: 'i' }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "service": { $regex: req.query.query, $options: 'i' }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "parts": {
                                $elemMatch: {
                                    "item": { $regex: req.query.query, $options: 'i' },
                                }
                            }
                        }
                    }
                },
                {
                    "services": {
                        $elemMatch: {
                            "parts": {
                                $elemMatch: {
                                    "part_no": { $regex: req.query.query, $options: 'i' },
                                }
                            }
                        }
                    }
                },
            ]
        };
        filters.push(specification);


        var specification = {};
        specification['$sort'] = {
            updated_at: -1,
        };
        filters.push(specification);
    }
    else {
        if (req.query.status == "NewJob") {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                status: { $in: ["JobInitiated", "JobOpen"] }
            };
            filters.push(specification);
        }

        else if (req.query.status == "In-Process") {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                status: { $in: ["In-Process", "StartWork", "Rework"] }
            };
            filters.push(specification);
        }

        else if (req.query.status == "QC") {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                status: { $in: ["QC", "CompleteWork"] }
            };
            filters.push(specification);
        }

        else if (req.query.status == "StoreApproval") {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                status: { $in: ["StoreApproval"] }
            };
            filters.push(specification);
        }

        else if (req.query.status == "Ready") {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                status: { $in: ["Ready"] }
            };
            filters.push(specification);

        }

        var specification = {};
        specification['$sort'] = {
            updated_at: -1,
        };
        filters.push(specification);
    }


    totalResult = await Booking.aggregate(filters);

    var specification = {};
    specification['$skip'] = config.perPage * page;
    filters.push(specification);

    var specification = {};
    specification['$limit'] = config.perPage;
    filters.push(specification);

    await Booking.aggregate(filters)
        .allowDiskUse(true)
        .cursor({ batchSize: 10 })
        .exec()
        .eachAsync(async function (booking) {
            if (booking.car.length > 0) {
                var car = {
                    title: booking.car[0]._automaker + " " + booking.car[0]._model,
                    _id: booking.car[0]._id,
                    id: booking.car[0]._id,
                    registration_no: booking.car[0].registration_no,
                }
            }
            else {
                var car = {
                    title: "",
                    _id: null,
                    id: null,
                    rc_address: "",
                    ic_address: "",
                    ic: "",
                    rc: "",
                    registration_no: "",
                }
            }

            var serverTime = moment.tz(new Date(), req.headers['tz']);

            var startDate = moment(serverTime, "DD.MM.YYYY");
            var endDate = moment(booking.delivery_date, "DD.MM.YYYY");

            var days_left = endDate.diff(startDate, 'days');

            bookings.push({
                _id: booking._id,
                id: booking._id,
                car: car,
                user: {
                    name: booking.user.name,
                    _id: booking.user._id,
                    id: booking.user.id,
                    contact_no: booking.user.contact_no,
                    email: booking.user.email,
                },
                advisor: {
                    name: booking.advisor.name,
                    _id: booking.advisor._id,
                    id: booking.advisor.id,
                    contact_no: booking.advisor.contact_no,
                    email: booking.advisor.email,
                },
                time_left: moment(booking.delivery_date).tz(req.headers['tz']).endOf('day').fromNow(),
                days_left: days_left,
                delivery_date: moment(booking.delivery_date).tz(req.headers['tz']).format('ll'),
                delivery_time: booking.delivery_time,
                status: _.startCase(booking.status),
                _status: booking.status,
                sub_status: booking.sub_status,
                job_no: booking.job_no,
                booking_no: booking.booking_no,
                created_at: moment(booking.created_at).tz(req.headers['tz']).format('lll'),
                updated_at: moment(booking.updated_at).tz(req.headers['tz']).format('lll'),
            });
        });

    res.status(200).json({
        responseCode: 200,
        responseMessage: to,
        responseInfo: {
            //role: role.role,
            //filters: filters,
            totalResult: totalResult.length
        },
        responseData: bookings,
    });
});

//With Date Filter
router.get('/booking/invoices/get-Current', xAccessToken.token, async function (req, res) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var invoices = [];
    var filters = [];
    var totalResult = 0;
    // console.log("Invoices Get")
    var role = await Management.findOne({ user: user, business: business }).exec();

    // console.log("Rorle = " + role.role)
    if (req.query.page == undefined) {
        var page = 0;
    }
    else {
        var page = req.query.page;
    }

    var date = new Date();
    var to = new Date();
    to.setDate(date.getDate() - 1);
    to.setHours(23, 59, 58)

    var page = Math.max(0, parseInt(page));
    var queries = new Object();
    var sortBy = new Object();

    var thumbnail = [];

    var specification = {};
    specification['$lookup'] = {
        from: "Booking",
        localField: "booking",
        foreignField: "_id",
        as: "booking",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$booking",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "user",
        foreignField: "_id",
        as: "user",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$user",
        preserveNullAndEmptyArrays: false
    };
    filters.push(specification);

    var specification = {};
    specification['$lookup'] = {
        from: "Car",
        localField: "car",
        foreignField: "_id",
        as: "car",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$car",
        preserveNullAndEmptyArrays: true
    };

    var specification = {};
    specification['$lookup'] = {
        from: "User",
        localField: "advisor",
        foreignField: "_id",
        as: "advisor",
    };
    filters.push(specification);

    var specification = {};
    specification['$unwind'] = {
        path: "$advisor",
        preserveNullAndEmptyArrays: true
    };
    filters.push(specification);


    //  else {
    //     var specification = {};
    //     specification["business"] = mongoose.Types.ObjectId(business)
    //     filters.push(specification);
    // }



    if (role.role == "Service Advisor") {
        // console.log("Service Advisor = " + role.user)
        var specification = {};
        specification['$match'] = {
            business: mongoose.Types.ObjectId(business),
            'advisor._id': mongoose.Types.ObjectId(role.user),
        };
        filters.push(specification);

    } else {
        var specification = {};
        specification['$match'] = {
            business: mongoose.Types.ObjectId(business),
        };
        filters.push(specification);
    }

    if (req.query.query) {
        req.query.query = req.query.query.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        var specification = {};
        specification['$match'] = {
            business: mongoose.Types.ObjectId(business),
            $or: [
                { 'status': { $regex: req.query.query, $options: 'i' } },
                { 'booking_no': { $eq: req.query.query } },
                { 'invoice_no': { $regex: req.query.query, $options: 'i' } },
                { 'user.name': { $regex: req.query.query, $options: 'i' } },
                { 'user.business_info.gstin': { $regex: req.query.query, $options: 'i' } },
                { 'user.contact_no': { $regex: req.query.query, $options: 'i' } },
                { 'car.title': { $regex: req.query.query, $options: 'i' } },
                { 'car.registration_no': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.name': { $regex: req.query.query, $options: 'i' } },
                { 'insurance_info.insurance_company': { $regex: req.query.query, $options: 'i' } },
                { 'insurance_info.branch': { $regex: req.query.query, $options: 'i' } },
                { 'advisor.contact_no': { $regex: req.query.query, $options: 'i' } },
            ]
        };
        filters.push(specification);
    }
    // else {
    //     var specification = {};
    //     specification['$match'] = {
    //         business: mongoose.Types.ObjectId(business),
    //         'advisor._id': mongoose.Types.ObjectId(role.user),
    //     };
    //     filters.push(specification);
    // }
    if (req.query.from && req.query.to) {
        console.log("Date1 = " + req.query.from, " EndDate = " + req.query.to)
        var from = new Date(req.query.from)
        from = from.setDate(from.getDate() + 1);
        var to = new Date(req.query.to);
        to = to.setDate(to.getDate() + 1);
        var specification = {};
        console.log("Date = " + new Date(from), " EndDate = " + new Date(to))
        specification["$match"] = {
            "created_at": { $gte: new Date(from), $lte: new Date(to) },
        };
        filters.push(specification);
    }


    totalResult = await Invoice.aggregate(filters);
    // console.log("Total length  = " + totalResult.length)
    var specification = {};
    specification['$sort'] = {
        _id: -1,
    };
    filters.push(specification);


    //totalResult = await Invoice.aggregate(filters);

    var all = _.filter(totalResult, x => x.status == "Active");
    var map_due = _.map(all, 'due');

    var due = parseFloat(_.sumBy(map_due, x => x.due).toFixed(2));

    var specification = {};
    specification['$skip'] = config.perPage * page;
    filters.push(specification);

    var specification = {};
    specification['$limit'] = config.perPage;
    filters.push(specification);
    await Invoice.aggregate(filters)
        .allowDiskUse(true)
        .cursor({ batchSize: 10 })
        .exec()
        .eachAsync(async function (invoice) {
            invoices.push({
                _id: invoice._id,
                id: invoice._id,
                car: {
                    _id: invoice.car[0]._id,
                    id: invoice.car[0]._id,
                    title: invoice.car[0].title,
                    registration_no: invoice.car[0].registration_no,
                },
                user: {
                    _id: invoice.user._id,
                    id: invoice.user._id,
                    name: invoice.user.name,
                    contact_no: invoice.user.contact_no,
                    email: invoice.user.email,
                    account_info: invoice.user.account_info,
                    business_info: invoice.user.business_info,
                },
                business: {
                    _id: invoice.business._id,
                    id: invoice.business._id,
                    name: invoice.business.name,
                    contact_no: invoice.business.contact_no,
                    email: invoice.business.email,
                    account_info: invoice.business.account_info,
                    business_info: invoice.business.business_info,
                    address: invoice.business.address,
                },
                /*advisor: {
                    _id: invoice.advisor._id,
                    id: invoice.advisor._id,
                    name: invoice.advisor.name,
                    contact_no: invoice.advisor.contact_no,
                    email: invoice.advisor.email
                },*/
                advisor: invoice.advisor,
                booking: invoice.booking._id,
                services: invoice.services,
                status: _.startCase(invoice.status),
                invoice_no: invoice.invoice_no,
                job_no: invoice.job_no,
                booking_no: invoice.booking_no,
                address: invoice.address,
                payment: invoice.payment,
                due: invoice.due,
                odometer: invoice.odometer,
                insurance_info: invoice.booking.insurance_info,
                invoice_type: invoice.invoice_type,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                delivery_date: moment(invoice.delivery_date).tz(req.headers['tz']).format('ll'),
                delivery_time: invoice.delivery_time,
                status: invoice.status,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                created_at: moment(invoice.created_at).tz(req.headers['tz']).format('lll'),
                updated_at: moment(invoice.updated_at).tz(req.headers['tz']).format('lll'),
            });
        });
    res.status(200).json({
        responseCode: 200,
        responseMessage: to,
        responseInfo: {
            due: due,
            totalResult: totalResult.length
        },
        responseData: invoices
    });
});

router.get('/invoice/get', xAccessToken.token, async function (req, res, next) {
    var rules = {
        invoice: 'required',
    };
    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Invoice is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();
        var discount = 0;
        var code = "";
        var discount_type = "";
        var bookingService = [];


        var invoice = await Invoice.findOne({ _id: req.query.invoice })
            .populate({ path: 'booking' })
            .populate({ path: 'address' })
            .populate({ path: 'advisor', select: "_id id name contact_no email" })
            .populate({ path: 'user', select: "_id id name contact_no email business_info" })
            .populate({ path: 'business', select: "_id id name contact_no email business_info bank_details address" })
            .populate({ path: 'car', select: '_id id title registration_no ic rc vin engine_no insurance_info' })
            .exec();

        if (invoice) {
            var booking = invoice.booking;
            var tax_type = invoice.tax_type;
            var services = invoice.services;
            var qcarray = invoice.booking.qc;
            var qcarray = _.filter(qcarray, data => data.remark !== "");
            if (invoice.invoice_type == "Insurance") {
                if (invoice.insurance_info.insurance_company && invoice.insurance_info.branch && invoice.insurance_info.state && invoice.insurance_info.gstin) {
                    if (booking.insurance_info.state.toLowerCase() == booking.business.address.state.toLowerCase()) {
                        tax_type = "GST";
                    }
                    else {
                        tax_type = "IGST";
                    }
                }

                for (var i = 0; i < services.length; i++) {
                    var part = [];
                    var labours = [];
                    var opening_fitting = [];

                    var part_list = services[i].parts;
                    var labour_list = services[i].labour;
                    var of_list = services[i].opening_fitting;

                    if (part_list) {
                        for (var p = 0; p < part_list.length; p++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = part_list[p].rate;
                            var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;

                            var dep = 0;

                            if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(part_list[p].insurance_dep);
                                }
                            }

                            amount = amount - (amount * dep / 100);

                            var dep = base - amount;

                            if (part_list[p].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (part_list[p].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            part.push({
                                item: part_list[p].item,
                                source: part_list[p].source,
                                hsn_sac: part_list[p].hsn_sac,
                                part_no: part_list[p].part_no,
                                rate: parseFloat(part_list[p].rate),
                                quantity: parseFloat(part_list[p].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: 0,
                                //discount: part_list[p].discount,
                                issued: part_list[p].issued,
                                customer_dep: parseFloat(part_list[p].customer_dep),
                                insurance_dep: parseFloat(part_list[p].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: part_list[p].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (labour_list) {
                        for (var l = 0; l < labour_list.length; l++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = labour_list[l].rate;
                            var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;
                            var dep = 0;


                            if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(labour_list[l].insurance_dep);
                                }
                            }

                            amount = amount - (amount * dep / 100);
                            var dep = base - amount;

                            if (labour_list[l].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                //total = total+amount;
                            }

                            if (labour_list[l].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax,
                                                tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;

                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            };

                            labours.push({
                                item: labour_list[l].item,
                                source: labour_list[l].source,
                                rate: parseFloat(labour_list[l].rate),
                                quantity: parseFloat(labour_list[l].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: amount,
                                discount: 0,
                                //discount: labour_list[l].discount,
                                customer_dep: parseFloat(labour_list[l].customer_dep),
                                insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: labour_list[l].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (of_list) {
                        for (var o = 0; o < of_list.length; o++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = of_list[o].rate;
                            var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;
                            var dep = 0;


                            if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep) <= 0) {
                                dep = 100
                            }
                            else {
                                if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep <= 100)) {
                                    dep = 100
                                }
                                else {
                                    dep = 100 - parseFloat(of_list[o].insurance_dep);
                                }
                            }

                            amount = amount - (amount * dep / 100);
                            var dep = base - amount;

                            if (of_list[o].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (of_list[o].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            opening_fitting.push({
                                item: of_list[o].item,
                                source: of_list[o].source,
                                rate: parseFloat(of_list[o].rate),
                                quantity: parseFloat(of_list[o].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: 0,
                                //discount: parseFloat(of_list[o].discount),
                                customer_dep: parseFloat(of_list[o].customer_dep),
                                insurance_dep: parseFloat(of_list[o].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: of_list[o].amount_is_tax,
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    var parts_visible = true;

                    bookingService.push({
                        source: services[i].source,
                        service: services[i].service,
                        mileage: services[i].mileage,
                        parts: part,
                        labour: labours,
                        opening_fitting: opening_fitting,
                        hours: services[i].hours,
                        parts_visible: parts_visible,
                        quantity: services[i].quantity,
                        discount: 0,
                        //discount: _.sumBy(labours, x => x.discount)+_.sumBy(part, x => x.discount)+_.sumBy(opening_fitting, x => x.discount),
                        description: services[i].description,
                        cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                        labour_cost: _.sumBy(labours, x => x.amount),
                        of_cost: _.sumBy(opening_fitting, x => x.amount),
                        part_cost: _.sumBy(part, x => x.amount),
                        exceeded_cost: parseFloat(services[i].exceeded_cost),
                        part_cost_editable: services[i].part_cost_editable,
                        labour_cost_editable: services[i].labour_cost_editable,
                        of_cost_editable: services[i].of_cost_editable,
                        type: services[i].type,
                        customer_approval: services[i].customer_approval,
                        surveyor_approval: services[i].surveyor_approval,
                        claim: services[i].claim,
                        custom: services[i].custom,
                    });
                }
            }
            else {
                if (invoice.address) {
                    if (invoice.address.state.toLowerCase() == invoice.business.address.state.toLowerCase()) {
                        tax_type = "GST";
                    }
                    else {
                        tax_type = "IGST";
                    }
                }

                for (var i = 0; i < services.length; i++) {
                    var part = [];
                    var labours = [];
                    var opening_fitting = [];

                    var part_list = services[i].parts;
                    var labour_list = services[i].labour;
                    var of_list = services[i].opening_fitting;

                    if (part_list) {
                        for (var p = 0; p < part_list.length; p++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = part_list[p].rate;
                            var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;

                            var dep = 0;

                            if (services[i].claim == true) {
                                if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep) <= 0) {
                                    dep = 0
                                }
                                else {
                                    if (parseFloat(part_list[p].customer_dep) <= 0 && parseFloat(part_list[p].insurance_dep <= 100)) {
                                        dep = 100
                                    }
                                    else {
                                        dep = 100 - parseFloat(part_list[p].customer_dep);
                                    }
                                }

                                amount = amount - (amount * dep / 100);
                                dep = base - amount;
                            }

                            if (part_list[p].discount) {
                                discount_total = part_list[p].discount;
                                amount = amount - parseFloat(discount_total.toFixed(2))
                            }

                            if (part_list[p].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (part_list[p].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            part.push({
                                item: part_list[p].item,
                                source: part_list[p].source,
                                hsn_sac: part_list[p].hsn_sac,
                                part_no: part_list[p].part_no,
                                rate: parseFloat(part_list[p].rate),
                                quantity: parseFloat(part_list[p].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: part_list[p].discount,
                                issued: part_list[p].issued,
                                customer_dep: parseFloat(part_list[p].customer_dep),
                                insurance_dep: parseFloat(part_list[p].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: part_list[p].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (labour_list) {
                        for (var l = 0; l < labour_list.length; l++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = labour_list[l].rate;
                            var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;
                            var dep = 0;

                            if (services[i].claim == true) {
                                if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep) <= 0) {
                                    dep = 0
                                }
                                else {
                                    if (parseFloat(labour_list[l].customer_dep) <= 0 && parseFloat(labour_list[l].insurance_dep <= 100)) {
                                        dep = 100
                                    }
                                    else {
                                        dep = 100 - parseFloat(labour_list[l].customer_dep);
                                    }
                                }

                                amount = amount - (amount * dep / 100);
                                dep = base - amount;
                            }

                            if (labour_list[l].discount) {
                                discount_total = labour_list[l].discount;
                                amount = amount - parseFloat(discount_total.toFixed(2))
                            }


                            if (labour_list[l].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                //total = total+amount;
                            }

                            if (labour_list[l].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax,
                                                tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;

                                total = total + amount;
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            };

                            labours.push({
                                item: labour_list[l].item,
                                source: labour_list[l].source,
                                rate: parseFloat(labour_list[l].rate),
                                quantity: parseFloat(labour_list[l].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: amount,
                                discount: labour_list[l].discount,
                                customer_dep: parseFloat(labour_list[l].customer_dep),
                                insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: labour_list[l].amount_is_tax,
                                tax: tax_info.tax,
                                tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    if (of_list) {
                        for (var o = 0; o < of_list.length; o++) {
                            var total = 0;
                            var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                            var tax = [];
                            var rate = of_list[o].rate;
                            var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                            var tax_rate = tax_info.detail;
                            var discount_total = 0;
                            var base = amount;
                            var dep = 0;


                            if (services[i].claim == true) {
                                if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep) <= 0) {
                                    dep = 0
                                }
                                else {
                                    if (parseFloat(of_list[o].customer_dep) <= 0 && parseFloat(of_list[o].insurance_dep <= 100)) {
                                        dep = 100
                                    }
                                    else {
                                        dep = 100 - parseFloat(of_list[o].customer_dep);
                                    }
                                }

                                amount = amount - (amount * dep / 100);
                                dep = base - amount;
                            }

                            if (of_list[o].discount) {
                                var discount_total = of_list[o].discount;
                                amount = amount - parseFloat(discount_total.toFixed(2))
                            }



                            if (of_list[o].amount_is_tax == "exclusive") {
                                var tax_on_amount = amount;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t; parseFloat
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            amount = amount + t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }
                                total = total + amount;
                            }

                            if (of_list[o].amount_is_tax == "inclusive") {
                                var x = (100 + tax_info.rate) / 100;
                                var tax_on_amount = amount / x;
                                if (tax_rate.length > 0) {
                                    for (var r = 0; r < tax_rate.length; r++) {
                                        if (tax_rate[r].rate != tax_info.rate) {
                                            var t = tax_on_amount * (tax_rate[r].rate / 100);
                                            base = base - t;
                                            tax.push({
                                                tax: tax_rate[r].tax,
                                                rate: tax_rate[r].rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                        else {
                                            var t = amount - tax_on_amount;
                                            base = base - t;
                                            tax.push({
                                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                                rate: tax_info.rate,
                                                amount: parseFloat(t.toFixed(2))
                                            });
                                        }
                                    }
                                }

                                base = base - dep;
                                total = total + amount;
                            }

                            var tax_details = {
                                tax: tax_info.tax,
                                rate: tax_info.rate,
                                amount: total,
                                detail: tax
                            }

                            var tax_amount = total - parseFloat(base.toFixed(2));

                            opening_fitting.push({
                                item: of_list[o].item,
                                source: of_list[o].source,
                                rate: parseFloat(of_list[o].rate),
                                quantity: parseFloat(of_list[o].quantity),
                                base: parseFloat(base.toFixed(2)),
                                amount: total,
                                discount: parseFloat(of_list[o].discount),
                                customer_dep: parseFloat(of_list[o].customer_dep),
                                insurance_dep: parseFloat(of_list[o].insurance_dep),
                                tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                amount_is_tax: of_list[o].amount_is_tax,
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                tax_info: tax_details
                            });
                        }
                    }

                    var parts_visible = true;

                    bookingService.push({
                        source: services[i].source,
                        service: services[i].service,
                        mileage: services[i].mileage,
                        parts: part,
                        labour: labours,
                        opening_fitting: opening_fitting,
                        hours: services[i].hours,
                        parts_visible: parts_visible,
                        quantity: services[i].quantity,
                        discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                        description: services[i].description,
                        cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                        labour_cost: _.sumBy(labours, x => x.amount),
                        of_cost: _.sumBy(opening_fitting, x => x.amount),
                        part_cost: _.sumBy(part, x => x.amount),
                        exceeded_cost: parseFloat(services[i].exceeded_cost),
                        part_cost_editable: services[i].part_cost_editable,
                        labour_cost_editable: services[i].labour_cost_editable,
                        of_cost_editable: services[i].of_cost_editable,
                        type: services[i].type,
                        customer_approval: services[i].customer_approval,
                        surveyor_approval: services[i].surveyor_approval,
                        claim: services[i].claim,
                        custom: services[i].custom,
                    });
                }
            }

            var approved = invoice.services;

            var paid_total = invoice.payment.paid_total;
            var labour_cost = _.sumBy(approved, x => x.labour_cost);
            var part_cost = _.sumBy(approved, x => x.part_cost);
            var of_cost = _.sumBy(approved, x => x.of_cost);
            var discount_total = _.sumBy(approved, x => x.discount);

            var pick_up_charges = invoice.payment.pick_up_charges;
            var policy_clause = invoice.payment.policy_clause;
            var salvage = invoice.payment.salvage;

            var careager_cash = invoice.payment.careager_cash;

            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - booking.payment.additionalDiscount;

            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash + booking.payment.additionalDiscount);

            var due = {
                due: Math.ceil(due_amount.toFixed(2))
            }

            var payment = {
                estimate_cost: estimate_cost,
                total: payment_total,
                careager_cash: careager_cash,
                of_cost: of_cost,
                labour_cost: labour_cost,
                part_cost: part_cost,
                payment_mode: invoice.payment.payment_mode,
                payment_status: invoice.payment.payment_status,
                coupon: invoice.payment.coupon,
                coupon_type: invoice.payment.coupon_type,
                discount_by: invoice.payment.discount_by,
                discount_type: invoice.payment.discount_type,
                discount: invoice.payment.discount,
                discount_total: discount_total,
                additionalDiscount: booking.payment.additionalDiscount,
                policy_clause: policy_clause,
                salvage: salvage,
                terms: invoice.payment.terms,
                pick_up_limit: invoice.payment.pick_up_limit,
                pick_up_charges: pick_up_charges,
                paid_total: parseFloat(invoice.payment.paid_total),
                discount_applied: invoice.payment.discount_applied,
                transaction_id: invoice.payment.transaction_id,
                transaction_date: invoice.payment.transaction_date,
                transaction_status: invoice.payment.transaction_status,
                transaction_response: invoice.payment.transaction_response
            };



            var show = {
                _id: invoice._id,
                id: invoice._id,
                car: invoice.car,
                user: invoice.user,
                business: invoice.business,
                advisor: invoice.advisor,
                services: bookingService,
                status: _.startCase(invoice.status),
                invoice_no: invoice.invoice_no,
                job_no: invoice.job_no,
                job_date: invoice.booking.created_at,
                booking: invoice.booking,
                booking_no: invoice.booking_no,
                address: invoice.address,
                payment: payment,
                due: invoice.due,
                qcarray: qcarray,
                booking_date: new Date(invoice.booking.created_at),
                odometer: invoice.odometer,
                insurance_info: invoice.booking.insurance_info,
                invoice_type: invoice.invoice_type,
                with_tax: invoice.with_tax,
                note: invoice.note,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                delivery_date: moment(invoice.delivery_date).tz(req.headers['tz']).format('ll'),
                delivery_time: invoice.delivery_time,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                created_at: moment(invoice.created_at).tz(req.headers['tz']).format('lll'),
                updated_at: moment(invoice.updated_at).tz(req.headers['tz']).format('lll'),
            };

            res.status(200).json({
                responseCode: 200,
                responseMessage: 'Success',
                responseData: show,
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {}
            });
        }
    }
});

router.get('/my/booking/invoice/get', xAccessToken.token, async function (req, res, next) {
    var rules = {
        invoice: 'required',
    };
    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Invoice is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();
        var discount = 0;
        var code = "";
        var discount_type = "";


        var invoice = await Invoice.findOne({ booking: req.query.invoice })
            .populate({ path: 'advisor', populate: { path: 'user', select: "_id id name contact_no email" } })
            .populate({ path: 'user', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
            .populate({ path: 'business', populate: { path: 'user', select: "_id id name contact_no email business_info" } })
            .populate({ path: 'car', select: '_id id title registration_no ic rc vin engine_no insurance_info' })
            .exec();

        if (invoice) {
            var car = null;
            var advisor = null;
            var customer_requirements = [];
            var address = null;
            var recording = ""
            if (invoice.car) {
                car = {
                    title: invoice.car.title,
                    _id: invoice.car._id,
                    id: invoice.car.id,
                    vin: invoice.car.vin,
                    engine_no: invoice.car.engine_no,
                    registration_no: invoice.car.registration_no,
                    ic_address: invoice.car.ic_address,
                    rc_address: invoice.car.rc_address,
                }
            }



            if (invoice.advisor) {
                var email = "";
                if (invoice.advisor.email) {
                    email = invoice.advisor.email;
                }
                advisor = {
                    name: invoice.advisor.name,
                    _id: invoice.advisor._id,
                    id: invoice.advisor.id,
                    contact_no: invoice.advisor.contact_no,
                    email: email,
                }
            }

            if (invoice.customer_requirements) {
                customer_requirements = invoice.customer_requirements;
            }

            if (invoice.address) {
                var address = await Address.findOne({ _id: invoice.address }).exec();
            }

            var show = {
                _id: invoice._id,
                id: invoice._id,
                car: car,
                user: {
                    name: invoice.user.name,
                    _id: invoice.user._id,
                    id: invoice.user.id,
                    contact_no: invoice.user.contact_no,
                    email: invoice.user.email,
                    business_info: invoice.user.business_info
                },
                business: {
                    name: invoice.business.name,
                    _id: invoice.business._id,
                    id: invoice.business.id,
                    contact_no: invoice.business.contact_no,
                    email: invoice.business.email,
                    business_info: invoice.business.business_info
                },
                advisor: advisor,
                services: invoice.services,
                status: _.startCase(invoice.status),
                invoice_no: invoice.invoice_no,
                job_no: invoice.job_no,
                booking: invoice.booking,
                booking_no: invoice.booking_no,
                address: address,
                payment: invoice.payment,
                due: invoice.due,
                odometer: invoice.odometer,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                delivery_date: moment(invoice.delivery_date).tz(req.headers['tz']).format('ll'),
                delivery_time: invoice.delivery_time,
                started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
                created_at: moment(invoice.created_at).tz(req.headers['tz']).format('lll'),
                updated_at: moment(invoice.updated_at).tz(req.headers['tz']).format('lll'),
            };

            res.status(200).json({
                responseCode: 200,
                responseMessage: 'Success',
                responseData: show,
            });
        }

        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Unauthorized",
                responseData: {}
            });
        }
    }
});

router.get('/order/invoice/get', xAccessToken.token, async function (req, res, next) {
    console.time('looper')
    var rules = {
        invoice: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Invoice is required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);

        var p = await OrderInvoice.findById(req.query.invoice)
            .populate({
                path: 'order',
                populate: [
                    { path: 'user', select: 'name contact_no username email account_info business_info' },
                    { path: 'business', select: 'name contact_no username email account_info business_info bank_details' },
                    { path: 'car', select: 'variant value' },
                    { path: 'address' }
                ]
            })
            .exec();
        if (p) {
            var transactions = await q.all(fun.getOrderTransaction(p.order._id, business))
            var business_info = await User.findById(p.business).select('name contact_no username email account_info business_info bank_details address').exec();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "success",
                responseData: {
                    _id: p._id,
                    id: p._id,
                    items: await q.all(fun.getBusinessOrderItems(p.order._id, business, req.headers['tz'])),
                    user: p.order.user,
                    car: p.order.car,
                    due_date: moment(p.due_date).tz(req.headers['tz']).format('lll'),
                    delivery_date: moment(p.delivery_date).tz(req.headers['tz']).format('lll'),
                    time_slot: p.time_slot,
                    convenience: p.convenience,
                    order_no: p.order_no,
                    _order: p._order,
                    invoice_no: p.invoice_no,
                    address: p.order.address,
                    payment: p.payment,
                    status: p.status,
                    business: business_info,
                    due: p.due,
                    note: p.note,
                    log: p.log,
                    transactions: transactions.transactions,
                    created_at: moment(p.created_at).tz(req.headers['tz']).format('lll'),
                    updated_at: moment(p.updated_at).tz(req.headers['tz']).format('lll'),
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Invoice not found",
                responseData: {}
            });
        }
    }
    console.timeEnd('looper')
});

router.put('/job/status/update', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var loggedInDetails = await User.findById(decoded.user).exec();
    var booking = await Booking.findById(req.body.booking).exec();
    if (booking) {
        var status = req.body.status;
        if (status == "CompleteWork") {
            status = "QC"
        }

        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, updated_at: new Date() } }, { new: false }, async function (err, doc) {
            if (err) {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Error",
                    responseData: err
                });
            }
            else {

                var activity = {
                    user: loggedInDetails._id,
                    name: loggedInDetails.name,
                    stage: req.body.stage,
                    activity: req.body.status,
                };

                event.zohoLead(booking._id)

                fun.bookingLog(booking._id, activity);

                if (req.body.back != "enable") {
                    var notify = {
                        receiver: [booking.user],
                        activity: "jobcard",
                        tag: req.body.status,
                        source: booking._id,
                        sender: booking.business,
                        points: 0
                    }



                    fun.newNotification(notify);
                    //event.jobSms(notify);

                }
                let bookingUser = await User.findOne({ _id: mongoose.Types.ObjectId(booking.user) }).exec()

                //sumit...
                if (req.body.status == 'In-Process') {
                    // console.log("hllo");
                    await whatsAppEvent.workStart(bookingUser.contact_no, booking.car, business)
                }

                // if (req.body.status == 'QC') {
                //     //await whatsAppEvent.workStart(bookingUser.contact_no, booking.car)
                //     await whatsAppEvent.qcUpdate(bookingUser.contact_no);
                // }

                if (status == 'Ready') {
                    whatsAppEvent.serviceComplete(bookingUser.contact_no, business);
                    //whatsAppEvent.carReady(bookingUser.contact_no, booking.car)
                }
                var update = await Booking.findById(booking.id).exec();

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "Status has been updated",
                    responseData: update
                });
            }
        });

    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.put('/job/snaps/add', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var loggedInDetails = await User.findById(decoded.user).exec();

    var file_type = "";

    var upload = multer({
        storage: multerS3({
            s3: s3,
            bucket: config.BUCKET_NAME + '/inspection',
            acl: 'public-read',
            contentType: multerS3.AUTO_CONTENT_TYPE,
            // contentDisposition: 'attachment',
            key: function (req, file, cb) {
                let extArray = file.mimetype.split("/");
                let extension = extArray[extArray.length - 1];

                var filename = uuidv1() + '.' + extension;
                if (extension == 'png' || extension == 'jpg' || extension == 'jpeg' || extension == 'gif') {
                    cb(null, filename);
                }
                else {
                    var params = {
                        Bucket: config.BUCKET_NAME + "/inspection",
                        Key: filename
                    };
                    s3.deleteObject(params, async function (err, data) {
                        var json = ({
                            responseCode: 422,
                            responseMessage: "Invalid extension",
                            responseData: {}
                        });
                        res.status(422).json(json)
                    });
                }
            }
        })
    }).array('media', 1);

    upload(req, res, async function (error) {
        if (error) {
            var json = ({
                responseCode: 400,
                responseMessage: "Error occured",
                responseData: {}
            });
            res.status(400).json(json)
        }

        if (req.files.length == 0) {
            var json = ({
                responseCode: 400,
                responseMessage: "Media is required",
                responseData: {}
            });
            res.status(400).json(json)
        } else {

            var rules = {
                booking: 'required'
            };

            var validation = new Validator(req.body, rules);

            if (validation.fails()) {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "Error",
                    responseData: {
                        res: validation.errors.all()
                    }
                })
            }
            else {
                var data = {
                    booking: req.body.booking,
                    index: req.body.index,
                    file: req.files[0].key,
                    type: file_type,
                    stage: "Additional",
                    created_at: new Date(),
                    updated_at: new Date(),
                };

                var jobInspection = new JobInspection(data);
                jobInspection.save();

                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "File has been uploaded",
                    responseData: jobInspection
                })
            }
        }
    });
});

router.put('/job/inspection/add', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var loggedInDetails = await User.findById(decoded.user).exec();

    var file_type = "";

    var upload = multer({
        storage: multerS3({
            s3: s3,
            bucket: config.BUCKET_NAME + '/inspection',
            acl: 'public-read',
            contentType: multerS3.AUTO_CONTENT_TYPE,
            // contentDisposition: 'attachment',
            key: function (req, file, cb) {
                let extArray = file.mimetype.split("/");
                let extension = extArray[extArray.length - 1];

                var filename = uuidv1() + '.' + extension;
                if (extension == 'png' || extension == 'jpg' || extension == 'jpeg' || extension == 'gif') {
                    cb(null, filename);
                }
                else {
                    var params = {
                        Bucket: config.BUCKET_NAME + "/inspection",
                        Key: filename
                    };
                    s3.deleteObject(params, async function (err, data) {
                        var json = ({
                            responseCode: 422,
                            responseMessage: "Invalid extension",
                            responseData: {}
                        });
                        res.status(422).json(json)
                    });
                }
            }
        })
    }).array('media', 1);

    upload(req, res, async function (error) {
        if (error) {
            var json = ({
                responseCode: 400,
                responseMessage: "Error occured",
                responseData: {}
            });
            res.status(400).json(json)
        }

        if (req.files.length == 0) {
            var json = ({
                responseCode: 400,
                responseMessage: "Media is required",
                responseData: {}
            });
            res.status(400).json(json)
        } else {

            var rules = {
                booking: 'required'
            };

            var validation = new Validator(req.body, rules);

            if (validation.fails()) {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "Error",
                    responseData: {
                        res: validation.errors.all()
                    }
                })
            }
            else {
                JobInspection.create({
                    booking: req.body.booking,
                    index: req.body.index,
                    file: req.files[0].key,
                    type: file_type,
                    stage: "Job",
                    created_at: new Date(),
                    updated_at: new Date(),
                }).then(async function (jobInspection) {

                    var count = await JobInspection.find({ booking: req.body.booking }).count().exec();

                    if (count >= 13) {
                        Booking.findOneAndUpdate({ _id: req.body.booking }, { $set: { sub_status: "Inspection" }, updated_at: new Date() }, { new: true }, async function (err, doc) {

                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "NewJob",
                                activity: "Inspection",
                            };
                            fun.bookingLog(req.body.booking, activity);
                        });
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "File has been uploaded",
                            responseData: jobInspection

                        })
                    }
                    else {
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "File has been uploaded",
                            responseData: jobInspection

                        })
                    }
                });
            }
        }
    });
});

router.put('/booking/remarks/edit', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var booking = await Booking.findOne({ _id: req.body.booking, business: business }).exec();
        var loggedInDetails = await User.findById(decoded.user).exec();
        if (booking) {
            var remarks = [];
            if (booking.remarks) {
                remarks = booking.remarks;
            }

            remarks.push({
                remark: req.body.remark,
                added_by: loggedInDetails._id,
                date: moment().format('YYYY-MM-DD'),
                created_at: new Date(),
                updated_at: new Date()
            });

            var service_reminder = null;
            if (req.body.date) {
                service_reminder = new Date(req.body.date).toISOString();
            }

            var data = {
                remarks: remarks,
                service_reminder: service_reminder,
                updated_at: new Date()
            }


            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: true }, async function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err
                    });
                }
                else {
                    var updated = await Booking.findOne({ _id: req.body.booking }).exec();
                    // console.log("Booking Service Reminder  ")
                    var leadAdded = await q.all(businessFunctions.outboundLeadAdd(updated, 'ServiceReminder'));
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Remark has been added",
                        responseData: updated
                    });
                }
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.post('/job/payment/receive', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        amount: 'required',
        date: "required",
    };
    var validation = new Validator(req.body, rules);
    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Amount and date are mandatory",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var business = req.headers['business'];
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var data = [];
        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            let user = booking.user
            if (req.body.paid_by == 'Insurance') {
                const insurance_companyDetails = await InsuranceCompany.findOne({ company: booking.insurance_info.insurance_company }).lean();
                user = insurance_companyDetails.user;
            }
            var data = {
                user: user,
                business: business,
                status: "Job Payment-In",
                type: 'Payment-In',
                paid_by: req.body.paid_by,
                activity: req.body.type,
                // source: req.body.user,
                // source: user,
                source: booking._id,
                bill_id: 'N/A',
                bill_amount: parseFloat(req.body.amount),
                transaction_amount: parseFloat(req.body.amount),
                balance: parseFloat(req.body.amount),
                total: parseFloat(req.body.amount),
                paid_total: 0,
                due: 0,
                payment_status: "Success",
                payment_mode: req.body.payment_mode,
                received_by: loggedInDetails.name,
                transaction_id: req.body.transaction_id,
                transaction_date: new Date(req.body.date),
                transaction_status: 'Success',
                transaction_response: 'Success',
                transaction_type: 'Payment-In',
                remark: req.body.remark
            }
            var valid = q.all(businessFunctions.addTransaction(data));

            await TransactionLog.create({
                user: booking.user,
                activity: "Booking",
                source: booking._id,
                status: 'Payment-In',
                type: 'Payment-In',
                payment_in: req.body.amount,
                paid_by: req.body.paid_by,
                paid_total: req.body.amount,
                total: booking.payment.total,
                payment_mode: req.body.payment_mode,
                payment_status: "Success",
                order_id: null,
                transaction_id: req.body.transaction_id,
                transaction_date: new Date(req.body.date).toISOString(),
                transaction_status: "Success",
                transaction_response: "Success",
                created_at: booking.updated_at,
                updated_at: booking.updated_at,
            }).then(async function (transaction) {
                await User.findByIdAndUpdate(data.user), { $push: { transactions: transaction._id } }, { new: true }, async function (err, doc) { }

                var claim = false;
                if (booking.insurance_info) {
                    if (booking.insurance_info.claim == true) {
                        claim = true
                    }
                }

                var transactions = await TransactionLog.find({ source: booking._id, payment_status: { $ne: "Failure" } }).exec();

                var insurance_log = _.filter(transactions, paid_by => paid_by.paid_by == "Insurance");
                var insurance_payment = parseFloat(_.sumBy(insurance_log, x => x.paid_total));

                var customer_log = _.filter(transactions, paid_by => paid_by.paid_by != "Insurance");
                var customer_payment = parseFloat(_.sumBy(customer_log, x => x.paid_total));

                var paid_total = insurance_payment + customer_payment;


                var insurance_invoice = await Invoice.findOne({ booking: booking._id, invoice_type: "Insurance", status: "Active" }).exec();

                if (insurance_invoice) {
                    var bookingService = insurance_invoice.services;
                    var discount_total = 0;
                    var policy_clause = 0;
                    var salvage = 0;
                    var pick_up_charges = 0;
                    var careager_cash = 0;

                    var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (insurance_payment + careager_cash);


                    await Invoice.findOneAndUpdate({ _id: insurance_invoice._id }, { $set: { "due.due": due_amount, "payment.paid_total": insurance_payment } }, { new: true }, async function (err, doc) {
                        if (err) {
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                    });
                }

                var customer_invoice = await Invoice.findOne({ booking: booking._id, invoice_type: "Booking", status: "Active" }).exec();

                if (customer_invoice) {
                    // console.log(customer_invoice._id)
                    var bookingService = customer_invoice.services;

                    var policy_clause = customer_invoice.payment.policy_clause;

                    var salvage = customer_invoice.payment.salvage;

                    var pick_up_charges = customer_invoice.payment.pick_up_charges;
                    var additionalDiscount = customer_invoice.payment.additionalDiscount;

                    var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                    var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (customer_payment + careager_cash + additionalDiscount);


                    await Invoice.findOneAndUpdate({ _id: customer_invoice._id }, { $set: { "due.due": due_amount, "payment.paid_total": customer_payment } }, { new: false }, async function (err, doc) {
                        if (err) {
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                    });
                }


                var bookingService = booking.services;
                var policy_clause = booking.payment.policy_clause;

                var salvage = booking.payment.salvage;

                var pick_up_charges = booking.payment.pick_up_charges;

                var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (customer_payment + insurance_payment + careager_cash);

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { "payment.paid_total": customer_payment + insurance_payment, "due.due": due_amount, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Server Error",
                            responseData: err
                        });
                    }
                    else {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Payment",
                            activity: "Payment Recieved " + req.body.amount,
                        };
                        await whatsAppEvent.paymentDone(booking._id, req.body.amount, business)
                        fun.bookingLog(booking._id, activity);

                        var updated = await Booking.findById(booking._id).exec();
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "",
                            responseData: updated
                        });
                    }
                });
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});

router.delete('/job/payment/remove', xAccessToken.token, async function (req, res, next) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];
    var loggedInDetails = await User.findById(decoded.user).exec();

    var transaction = await TransactionLog.findById(req.query.id).exec();
    if (transaction) {
        var booking = await Booking.findById(transaction.source).exec();

        await TransactionLog.remove({ _id: transaction._id }, async function (err) {
            if (err) {
                res.status(422).json({
                    responseCode: 422,
                    responseMessage: "Server Error",
                    responseData: err
                });
            }
            else {

                // console.log("transaction= " + transaction.paid_by);
                let user = booking.user
                if (transaction.paid_by == 'Insurance') {
                    const insurance_companyDetails = await InsuranceCompany.findOne({ company: booking.insurance_info.insurance_company }).lean();
                    user = insurance_companyDetails.user;
                }
                var data = {
                    user: user,
                    business: business,
                    status: "Job Payment-Out",
                    type: 'Payment-Out',
                    paid_by: "N/A",
                    activity: "Job Payment Removed",
                    source: booking._id,
                    bill_id: 'N/A',
                    bill_amount: parseFloat(transaction.paid_total),
                    transaction_amount: parseFloat(transaction.paid_total),
                    balance: parseFloat(transaction.paid_total),
                    total: parseFloat(transaction.paid_total),
                    paid_total: 0,
                    due: 0,
                    payment_status: "Success",
                    payment_mode: 'N/A',
                    received_by: loggedInDetails.name,
                    transaction_id: 'N/A',
                    transaction_date: new Date(),
                    transaction_status: 'Success',
                    transaction_response: 'Success',
                    transaction_type: 'Payment-Out',
                    remark: req.body.remark
                }
                var valid = q.all(businessFunctions.addTransaction(data));

                var transactions = await TransactionLog.find({ source: booking._id, payment_status: { $ne: "Failure" } }).exec();
                var insurance_log = _.filter(transactions, paid_by => paid_by.paid_by == "Insurance");
                var insurance_payment = parseFloat(_.sumBy(insurance_log, x => x.paid_total));

                var customer_log = _.filter(transactions, paid_by => paid_by.paid_by != "Insurance");
                var customer_payment = parseFloat(_.sumBy(customer_log, x => x.paid_total));

                var paid_total = insurance_payment + customer_payment;

                var claim = false;
                if (booking.insurance_info) {
                    if (booking.insurance_info.claim == true) {
                        claim == true
                    }
                }

                if (claim == true) {
                    var insurance_invoice = await Invoice.findOne({ booking: booking._id, invoice_type: "Insurance", status: "Active" }).exec();

                    if (insurance_invoice) {
                        var bookingService = insurance_invoice.services;
                        var discount_total = 0;
                        var policy_clause = 0;
                        var salvage = 0;
                        var pick_up_charges = 0;
                        var careager_cash = 0;

                        var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (insurance_payment + careager_cash);


                        Invoice.findOneAndUpdate({ _id: insurance_invoice._id }, { $set: { "due.due": due_amount, "payment.paid_total": insurance_payment } }, { new: false }, async function (err, doc) {
                            if (err) {
                                return res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: err
                                });
                            }
                        });
                    }
                }
                else {
                    var customer_invoice = await Invoice.findOne({ booking: booking._id, invoice_type: "Booking", status: "Active" }).exec();

                    if (customer_invoice) {
                        var bookingService = customer_invoice.services;

                        var policy_clause = customer_invoice.payment.policy_clause;

                        var salvage = customer_invoice.payment.salvage;

                        var pick_up_charges = customer_invoice.payment.pick_up_charges;

                        var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                        var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (customer_payment + careager_cash);


                        Invoice.findOneAndUpdate({ _id: customer_invoice._id }, { $set: { "due.due": due_amount, "payment.paid_total": customer_payment } }, { new: false }, async function (err, doc) {
                            if (err) {
                                return res.status(422).json({
                                    responseCode: 422,
                                    responseMessage: "Server Error",
                                    responseData: err
                                });
                            }
                        });
                    }
                }


                var bookingService = booking.services;

                var policy_clause = booking.payment.policy_clause;

                var salvage = booking.payment.salvage;

                var pick_up_charges = booking.payment.pick_up_charges;

                var careager_cash = await q.all(fun.getBookingCarEagerCash(booking._id));

                var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (customer_payment + insurance_payment + careager_cash);

                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { "payment.paid_total": customer_payment + insurance_payment, "due.due": due_amount, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Server Error",
                            responseData: err
                        });
                    }
                    else {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Payment",
                            activity: "Payment Removed " + transaction.paid_total,
                        };

                        fun.bookingLog(booking._id, activity);

                        var updated = await Booking.findById(booking._id).exec();
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "",
                            responseData: updated
                        });
                    }
                });
            }
        });
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Transaction not found",
            responseData: {}
        });
    }
});

router.get('/booking/invoice/generate', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();
        var discount = 0;
        var code = "";
        var discount_type = "";
        var bookingService = [];

        var booking = await Booking.findOne({ '_id': req.query.booking }).populate('address').populate('car').populate('business').populate('user').exec();
        var loggedInDetails = await User.findOne({ _id: user }).exec();
        var invoices_count = await Invoice.findOne({ business: business }).count().exec();
        var limit = await q.all(businessFunctions.businessPlanLimit(business, req.headers['tz']));
        // console.log(limit.invoices)
        if (limit.invoices > invoices_count) {
            if (booking) {
                var invoice = await Invoice.findOne({ booking: booking._id, invoice_type: "Booking", status: "Active" }).exec();

                if (invoice) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: 'Booking already generated #Invoice No' + invoice.invoice_no,
                        responseData: {},
                    });
                }
                else {
                    var tax_type = "GST";

                    if (booking.address != null) {
                        if (booking.address.state == booking.business.address.state) {
                            tax_type = "GST";
                        }
                        else {
                            tax_type = "IGST";
                        }
                    }
                    else {
                        return res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Select an address",
                            responseData: {},
                        });
                    }


                    var services = _.filter(booking.services, customer_approval => customer_approval.customer_approval == true);

                    for (var i = 0; i < services.length; i++) {
                        var part = [];
                        var labours = [];
                        var opening_fitting = [];

                        var part_list = services[i].parts;
                        var labour_list = services[i].labour;
                        var of_list = services[i].opening_fitting;

                        if (part_list) {
                            for (var p = 0; p < part_list.length; p++) {
                                var total = 0;
                                var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                                var tax = [];
                                var rate = part_list[p].rate;
                                var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                                var tax_rate = tax_info.detail;
                                var discount_total = 0;
                                var base = amount;

                                if (parseFloat(part_list[p].customer_dep) != null && parseFloat(part_list[p].insurance_dep) != null) {
                                    var customer_dep = parseFloat(part_list[p].customer_dep);
                                    var insurance_dep = parseFloat(part_list[p].insurance_dep)
                                }
                                else {
                                    var customer_dep = 100;
                                    var insurance_dep = 0;

                                    part_list[p].customer_dep = 100;
                                    part_list[p].insurance_dep = 0;
                                }

                                var dep = 0;

                                if (services[i].claim == true) {
                                    if (parseFloat(part_list[p].insurance_dep) <= 0 && parseFloat(part_list[p].customer_dep) <= 0) {
                                        dep = 0
                                    }
                                    else {
                                        if (parseFloat(part_list[p].customer_dep) <= 0 && parseFloat(part_list[p].insurance_dep <= 100)) {
                                            dep = 100
                                        }
                                        else {
                                            dep = 100 - parseFloat(part_list[p].customer_dep);
                                        }
                                    }

                                    amount = amount - (amount * dep / 100);
                                    dep = base - amount;
                                }

                                if (part_list[p].discount) {
                                    discount_total = part_list[p].discount;
                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                }


                                if (part_list[p].amount_is_tax == "exclusive") {
                                    var tax_on_amount = amount;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t; parseFloat
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    total = total + amount;
                                }

                                if (part_list[p].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    base = base - dep;
                                    total = total + amount;
                                }

                                var tax_amount = total - parseFloat(base.toFixed(2));

                                var tax_details = {
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }

                                part.push({
                                    item: part_list[p].item,
                                    source: part_list[p].source,
                                    hsn_sac: part_list[p].hsn_sac,
                                    part_no: part_list[p].part_no,
                                    rate: parseFloat(part_list[p].rate),
                                    quantity: parseFloat(part_list[p].quantity),
                                    base: parseFloat(base.toFixed(2)),
                                    amount: total,
                                    discount: part_list[p].discount,
                                    issued: part_list[p].issued,
                                    customer_dep: parseFloat(part_list[p].customer_dep),
                                    insurance_dep: parseFloat(part_list[p].insurance_dep),
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: part_list[p].amount_is_tax,
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (labour_list) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var total = 0;
                                var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                                var tax_rate = tax_info.detail;
                                var discount_total = 0;
                                var base = amount;

                                if (parseFloat(labour_list[l].customer_dep) != null && parseFloat(labour_list[l].insurance_dep) != null) {
                                    var customer_dep = parseFloat(labour_list[l].customer_dep);
                                    var insurance_dep = parseFloat(labour_list[l].insurance_dep)
                                }
                                else {
                                    var customer_dep = 100;
                                    var insurance_dep = 0;

                                    labour_list[l].customer_dep = 100;
                                    labour_list[l].insurance_dep = 0;
                                }


                                var dep = 0;

                                if (services[i].claim == true) {
                                    if (parseFloat(labour_list[l].insurance_dep) <= 0 && parseFloat(labour_list[l].customer_dep) <= 0) {
                                        dep = 0
                                    }
                                    else {
                                        if (parseFloat(labour_list[l].customer_dep) <= 0 && parseFloat(labour_list[l].insurance_dep <= 100)) {
                                            dep = 100
                                        }
                                        else {
                                            dep = 100 - parseFloat(labour_list[l].customer_dep);
                                        }
                                    }

                                    amount = amount - (amount * dep / 100);
                                    dep = base - amount;
                                }

                                if (labour_list[l].discount) {
                                    discount_total = labour_list[l].discount;
                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                }

                                if (labour_list[l].amount_is_tax == "exclusive") {
                                    var tax_on_amount = amount;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t; parseFloat
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    //total = total+amount;
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    base = base - dep;
                                    total = total + amount;
                                }

                                var tax_amount = total - parseFloat(base.toFixed(2));

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                };

                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: parseFloat(labour_list[l].quantity),
                                    base: parseFloat(base.toFixed(2)),
                                    amount: amount,
                                    discount: labour_list[l].discount,
                                    customer_dep: parseFloat(labour_list[l].customer_dep),
                                    insurance_dep: parseFloat(labour_list[l].insurance_dep),
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax,
                                    tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        if (of_list) {
                            for (var o = 0; o < of_list.length; o++) {
                                var total = 0;
                                var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                                var tax = [];
                                var rate = of_list[o].rate;
                                var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (parseFloat(of_list[o].customer_dep) != null && parseFloat(of_list[o].insurance_dep) != null) {
                                    var customer_dep = parseFloat(of_list[o].customer_dep);
                                    var insurance_dep = parseFloat(of_list[o].insurance_dep)
                                }
                                else {
                                    var customer_dep = 100;
                                    var insurance_dep = 0;

                                    of_list[o].customer_dep = 100;
                                    of_list[o].insurance_dep = 0;
                                }

                                var dep = 0;

                                if (services[i].claim == true) {
                                    if (parseFloat(of_list[o].insurance_dep) <= 0 && parseFloat(of_list[o].customer_dep) <= 0) {
                                        dep = 0
                                    }
                                    else {
                                        if (parseFloat(of_list[o].customer_dep) <= 0 && parseFloat(of_list[o].insurance_dep <= 100)) {
                                            dep = 100
                                        }
                                        else {
                                            dep = 100 - parseFloat(of_list[o].customer_dep);
                                        }
                                    }

                                    amount = amount - (amount * dep / 100);

                                    dep = base - amount;
                                }

                                if (of_list[o].discount) {
                                    discount_total = of_list[o].discount;
                                    amount = amount - parseFloat(discount_total.toFixed(2))
                                }


                                if (of_list[o].amount_is_tax == "exclusive") {
                                    var tax_on_amount = amount;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t; parseFloat
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                amount = amount + t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }
                                    total = total + amount;
                                }

                                if (of_list[o].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }
                                    }

                                    base = base - dep;
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }

                                var tax_amount = total - parseFloat(base.toFixed(2));

                                opening_fitting.push({
                                    item: of_list[o].item,
                                    source: of_list[o].source,
                                    rate: parseFloat(of_list[o].rate),
                                    quantity: parseFloat(of_list[o].quantity),
                                    base: parseFloat(base.toFixed(2)),
                                    amount: total,
                                    discount: parseFloat(of_list[o].discount),
                                    customer_dep: parseFloat(of_list[o].customer_dep),
                                    insurance_dep: parseFloat(of_list[o].insurance_dep),
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: of_list[o].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        var parts_visible = true;

                        // console.log("Labour cost:- ", _.sumBy(labours, x => x.amount))

                        bookingService.push({
                            source: services[i].source,
                            service: services[i].service,
                            mileage: services[i].mileage,
                            parts: part,
                            labour: labours,
                            opening_fitting: opening_fitting,
                            hours: services[i].hours,
                            parts_visible: parts_visible,
                            quantity: services[i].quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                            description: services[i].description,
                            cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            of_cost: _.sumBy(opening_fitting, x => x.amount),
                            part_cost: _.sumBy(part, x => x.amount),
                            exceeded_cost: parseFloat(services[i].exceeded_cost),
                            part_cost_editable: services[i].part_cost_editable,
                            labour_cost_editable: services[i].labour_cost_editable,
                            of_cost_editable: services[i].of_cost_editable,
                            type: services[i].type,
                            customer_approval: services[i].customer_approval,
                            surveyor_approval: services[i].surveyor_approval,
                            claim: services[i].claim,
                            custom: services[i].custom,
                        });
                    }


                    var policy_clause = 0
                    if (booking.payment.policy_clause) {
                        policy_clause = booking.payment.policy_clause;
                    }
                    var salvage = 0
                    if (booking.payment.salvage) {
                        salvage = booking.payment.salvage;
                    }
                    // console.log("booking.payment.additionalDiscount = " + booking.payment.additionalDiscount)
                    var paid_total = booking.payment.paid_total;
                    var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
                    var part_cost = _.sumBy(bookingService, x => x.part_cost);
                    var of_cost = _.sumBy(bookingService, x => x.of_cost);
                    var discount_total = _.sumBy(bookingService, x => x.discount)
                    var additionalDiscount = booking.payment.additionalDiscount;
                    var pick_up_charges = booking.payment.pick_up_charges;
                    var careager_cash = booking.payment.careager_cash;
                    var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

                    var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - careager_cash;

                    var due_amount = _.sumBy(bookingService, x => x.labour_cost) + _.sumBy(bookingService, x => x.part_cost) + _.sumBy(bookingService, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash + additionalDiscount);

                    var due = {
                        due: Math.ceil(due_amount.toFixed(2))
                    }




                    var payment = {
                        estimate_cost: estimate_cost,
                        total: payment_total,
                        additionalDiscount: additionalDiscount,
                        careager_cash: careager_cash,
                        of_cost: of_cost,
                        labour_cost: labour_cost,
                        part_cost: part_cost,
                        payment_mode: booking.payment.payment_mode,
                        payment_status: booking.payment.payment_status,
                        coupon: booking.payment.coupon,
                        coupon_type: booking.payment.coupon_type,
                        discount_by: booking.payment.discount_by,
                        discount_type: booking.payment.discount_type,
                        discount: booking.payment.discount,
                        discount_total: discount_total,
                        policy_clause: policy_clause,
                        salvage: salvage,
                        terms: booking.payment.terms,
                        pick_up_limit: booking.payment.pick_up_limit,
                        pick_up_charges: pick_up_charges,
                        paid_total: parseFloat(booking.payment.paid_total),
                        discount_applied: booking.payment.discount_applied,
                        transaction_id: booking.payment.transaction_id,
                        transaction_date: booking.payment.transaction_date,
                        transaction_status: booking.payment.transaction_status,
                        transaction_response: booking.payment.transaction_response
                    };

                    var data = {
                        booking: booking._id,
                        user: booking.user,
                        car: booking.car._id,
                        business: booking.business,
                        advisor: booking.advisor,
                        technician: booking.technician,
                        // advisor: booking.advisor,
                        address: booking.address,
                        job_no: booking.job_no,
                        booking_no: booking.booking_no,
                        delivery_date: booking.delivery_date,
                        delivery_date: booking.delivery_date,
                        delivery_time: booking.delivery_time,
                        with_tax: booking.with_tax,
                        odometer: booking.odometer,
                        note: booking.note,
                        insurance_info: booking.insurance_info,
                        due: due,
                        services: bookingService,
                        payment: payment,
                        invoice_type: "Booking",
                        status: "Active",
                        started_at: booking.started_at,
                        created_at: new Date(),
                        updated_at: new Date()
                    };

                    await Invoice.create(data).then(async function (inv) {
                        let status = "Completed";
                        let InsuranceInvoice = await Invoice.findOne({ booking: req.query.booking, invoice_type: "Insurance", status: "Active" }).exec()

                        if (booking.insurance_info && !InsuranceInvoice) {
                            if (booking.insurance_info.claim == true) {
                                status = booking.status;
                            }
                        }

                        await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                            if (err) {
                                res.status(400).json({
                                    responseCode: 400,
                                    responseMessage: "Error",
                                    responseData: err
                                });
                            }
                            else {

                                //Abhinav Tyagi Sprint 5
                                var activity = {
                                    user: loggedInDetails._id,
                                    name: loggedInDetails.name,
                                    stage: "Invoice",
                                    activity: "Job ", status,
                                };

                                fun.bookingLog(booking._id, activity);
                                //End

                                //Abhinav Careager Cash
                                // console.log("user= " + booking.user._id, "Business =" + business)
                                var pack = await UserPackage.findOne({ user: booking.user._id, business: business }).exec();
                                // console.log("USERS Pakge" + pack.service_cashback)
                                if (pack) {
                                    if (pack.service_cashback) {
                                        // console.log("Cashback Percentage " + pack.service_cashback)
                                        ser_cashback = pack.service_cashback * booking.payment.labour_cost / 100

                                        // ser_cashback = 1 * labour_cost / 100  //Test Witout Package
                                        // console.log("Car eager Cash abck is " + ser_cashback)

                                        await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { "payment.careager_cash": ser_cashback } }, { new: false }, async function (err, doc) { });
                                        var data = {
                                            user: booking.user,
                                            activity: "coin",
                                            tag: "Services",
                                            status: true,
                                            points: ser_cashback,
                                            source: booking._id,
                                            title: "",
                                            body: "",
                                            sender: null
                                        }
                                        fun.addServicePoints(data)

                                    }
                                }
                                //End Abhinav

                                event.zohoLead(booking._id);
                                if (booking.package) {
                                    packageDeduction(booking._id)
                                }


                                var count = await Invoice.find({ _id: { $lt: inv._id }, invoice_type: "Booking", with_tax: inv.with_tax, business: business }).count();

                                if (count == 0) {
                                    var last_invoice = "";
                                    var position = 1;
                                }
                                else {
                                    var lv = await Invoice.findOne({ _id: { $lt: inv._id }, invoice_type: "Booking", with_tax: inv.with_tax, business: business }).sort({ _id: -1 }).exec();

                                    var last_invoice = lv.invoice_no;
                                    position = count + 1
                                }

                                var fy = {
                                    with_tax: inv.with_tax,
                                    last_invoice: last_invoice,
                                    position: position,
                                };

                                var assigned_invoice_no = await q.all(fun.fiscalyear(fy));

                                if (assigned_invoice_no) {
                                    if (assigned_invoice_no.invoice) {
                                        await Invoice.findOneAndUpdate({ _id: inv._id }, { $set: { invoice_no: assigned_invoice_no.invoice } }, { new: true }, async function (err, doc) {
                                            if (err) {
                                                res.status(422).json({
                                                    responseCode: 422,
                                                    responseMessage: 'Server Error',
                                                    responseData: err,
                                                });
                                            }
                                            else {
                                                var updated = await q.all(fun.invoice(inv._id, req.headers['tz']));
                                                let invoiceUser = await User.findOne({ _id: mongoose.Types.ObjectId(doc.user) }).exec()

                                                var updated = await Booking.findOne({ _id: inv.booking }).exec();
                                                console.log("Booking Service Reminder  ")
                                                var leadAdded = await q.all(businessFunctions.outboundLeadAdd(updated, 'ServiceReminder'));

                                                var transactionData = {
                                                    user: inv.user,
                                                    business: inv.business,
                                                    status: 'Sale Created',
                                                    type: 'Sale',
                                                    paid_by: '-',
                                                    activity: "Invoice",
                                                    source: inv._id,
                                                    bill_id: assigned_invoice_no.invoice,
                                                    // (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2)
                                                    bill_amount: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                                    transaction_amount: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                                    balance: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                                    total: inv.payment.total.toFixed(2) - (inv.payment.discount_total + inv.payment.additionalDiscount).toFixed(2),
                                                    paid_total: 0,
                                                    due: 0,
                                                    payment_status: "Pending",
                                                    payment_mode: '-',
                                                    received_by: loggedInDetails.name,
                                                    transaction_id: '-',
                                                    transaction_date: new Date(),
                                                    transaction_status: 'Success',
                                                    transaction_response: '-',
                                                    transaction_type: "Sale",
                                                }
                                                q.all(businessFunctions.addTransaction(transactionData));

                                                fun.invoicePdf(booking._id, doc, business)
                                                // console.log("Line 24395")
                                                if (booking.business.isCarEager == true) {
                                                    var partner = await q.all(fun.partnerCommission(booking._id));
                                                    // console.log(partner)
                                                }
                                                res.status(200).json({
                                                    responseCode: 200,
                                                    responseMessage: 'Success',
                                                    responseData: updated,
                                                });
                                            }
                                        })
                                    }
                                    else {
                                        res.status(422).json({
                                            responseCode: 422,
                                            responseMessage: "Server Error",
                                            responseData: {}
                                        });
                                    }
                                }
                                else {
                                    res.status(422).json({
                                        responseCode: 422,
                                        responseMessage: "Server Error",
                                        responseData: {}
                                    });
                                }
                            }
                        });
                    })

                }
            }
            else {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Booking not found",
                    responseData: {}
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: 'Invoices Limit Exceeded. Upgrade Your Plan',
                responseData: {}
            });
        }
    }
});
router.delete('/booking/invoice/cancel', xAccessToken.token, async function (req, res, next) {
    var rules = {
        invoice: 'required',
        // remark: 'required'
    };


    // remarks = [];
    var remark = "";
    remark = req.body.remark;
    // console.log("invoice=" + invoice + "remark=" + remark)
    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Invoice is required",
            responseData: {
                res: validation.errors.all()
            }
        });
    }
    else {
        var token = req.headers['x-access-token'];
        var business = req.headers['business'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var data = new Object();

        var loggedInDetails = await User.findById(user).exec();

        var invoice = await Invoice.findOne({ _id: req.body.invoice, status: "Active" }).exec();
        if (invoice) {
            await Invoice.findOneAndUpdate({ _id: invoice._id }, { $set: { status: "Cancelled" } }, { new: true }, async function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err,
                    });
                }
                else {
                    // remarks.push({
                    //     reamrks: remark
                    // })
                    await Booking.findOneAndUpdate({ _id: invoice.booking }, { $set: { status: "Ready" } }, { new: true }, async function (err, doc) {
                        if (err) {
                            res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err,
                            });
                        }
                        else {
                            var activity = {
                                user: loggedInDetails._id,
                                name: loggedInDetails.name,
                                stage: "Invoice",
                                activity: "Invoice Cancelled #(" + invoice.invoice_no + ") @Reason : " + remark,
                            }
                            // console.log("Invoice Cancelled #(" + invoice.invoice_no + ") due to" + remark,)

                            var remark_ex = {
                                added_by: loggedInDetails._id,
                                remark: remark,
                            }
                            //Abhinav Sprint 5
                            fun.bookingCancleLog(invoice.booking, activity, remark_ex);

                            //Abhinav Careager Cash Deduction Sprint 4
                            var ser_cashback = invoice.payment.careager_cash
                            var data = {
                                user: invoice.user,
                                activity: "coin",
                                tag: "debit",
                                status: true,
                                points: ser_cashback,
                                source: invoice.booking,
                                title: "",
                                body: "",
                                sender: null
                            }
                            fun.deductPoints(data)
                            //End Abhinav
                            // markTransactionFaiure
                            if (invoice.invoice_type == 'Insurance') {

                                //           if (invoice.insurance_info) {
                                // let insuranceCompanyDetails = await InsuranceCompany.findOne({ company: invoice.insurance_info.insurance_company }).populate({ path: 'user', select: 'contact_no' }).lean();
                                // if (insuranceCompanyDetails) {
                                //     insurance_info.contact_no = insuranceCompanyDetails.user.contact_no;
                                //     insurance_info.ins_company_id =insuranceCompanyDetails.user._id
                                // }
                                // }
                                invoice.user = invoice.insurance_info.ins_company_id
                            }
                            var transactionData = {
                                user: invoice.user,
                                business: invoice.business,
                                status: "Sale Cancelled",
                                type: "Sale Cancelled",
                                paid_by: "-",
                                activity: "Invoice",
                                source: invoice._id,
                                bill_id: invoice.invoice_no,
                                bill_amount:
                                    parseFloat(invoice.payment.total) -
                                    (parseFloat(invoice.payment.discount_total) +
                                        parseFloat(invoice.payment.additionalDiscount)),
                                transaction_amount:
                                    parseFloat(invoice.payment.total) -
                                    (parseFloat(invoice.payment.discount_total) +
                                        parseFloat(invoice.payment.additionalDiscount)),
                                balance:
                                    parseFloat(invoice.payment.total) -
                                    (parseFloat(invoice.payment.discount_total) +
                                        parseFloat(invoice.payment.additionalDiscount)),
                                total:
                                    parseFloat(invoice.payment.total) -
                                    (parseFloat(invoice.payment.discount_total) +
                                        parseFloat(invoice.payment.additionalDiscount)),
                                paid_total: 0,
                                due: 0,
                                payment_status: "Cancelled",
                                payment_mode: "-",
                                received_by: loggedInDetails.name,
                                transaction_id: "-",
                                transaction_date: new Date(),
                                transaction_status: "Success",
                                transaction_response: "-",
                                transaction_type: "Sale Cancelled",
                            };
                            q.all(businessFunctions.addTransaction(transactionData));
                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Invoice Cancelled",
                                responseData: {},
                            });
                        }
                    }
                    );
                }
            }
            );
        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Invoice not found",
                responseData: {},
            });
        }
    }
}
);

router.delete('/job/snaps/delete', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var loggedInDetails = await User.findById(decoded.user).exec();

    var image_id = req.body.id;
    const media = await JobInspection.findById(image_id).exec();

    if (media) {
        var params = {
            Bucket: config.BUCKET_NAME + "/inspection",
            Key: media.file
        };

        s3.deleteObject(params, async function (err, data) {
            if (err) {
                res.status(400).json({
                    responseCode: 400,
                    responseMessage: "Error occured",
                    responseData: {}
                });
            }
            else {
                await JobInspection.findByIdAndRemove(image_id).exec();
                res.status(200).json({
                    responseCode: 200,
                    responseMessage: "File has been deleted",
                    responseData: {},
                })
            }
        });
    } else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Wrong image",
            responseData: {},
        })
    }
});

router.put('/job/requirements/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Booking required",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = req.headers['business'];
        var driver = null;
        var booking = await Booking.findById(req.body.booking).populate('user').exec();
        // var lead = await Lead.findOneAndUpdate({ contact_no: booking.user.contact_no, 'remark.status': { $in: ['Open', 'Follow-up'] } }, { $sort: { updated_at: -1 } }, {
        //     $set: {
        //         'remark.status': 'Converted',
        //         updated_at: new Date()
        //     }
        // }, { new: true }, function (err, doc) { });

        if (booking) {
            if (req.body.is_driver) {
                if (req.body.driver) {
                    var checkDriver = await User.findById(req.body.driver).exec();
                    driver = checkDriver._id;
                    await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { driver: driver } }, { new: true }, function (err, doc) { });
                }
                else {
                    var data = {};
                    var country = await Country.findOne({ timezone: req.headers['tz'] }).exec();
                    data.address = {
                        country: country.countryName,
                        timezone: req.headers['tz'],
                        location: data.location,
                    };

                    data.account_info = {
                        type: "user",
                        added_by: null,
                        status: "Complete",
                    };

                    var expired_at = new Date();
                    expired_at.setDate(expired_at.getDate() + 365);

                    data.agent = {
                        agent: true,
                        commission: 10,
                        started_at: new Date(),
                        expired_at: expired_at,
                    };

                    var name = req.body.name;
                    name = name.substring(0, 3);
                    var rand = Math.floor((Math.random() * 100000) + 1);

                    data.username = name + "" + shortid.generate();
                    data.contact_no = req.body.contact_no;
                    data.email = "";
                    data.name = req.body.name;

                    var firstPart = (Math.random() * 46656) | 0;
                    var secondPart = (Math.random() * 46656) | 0;
                    firstPart = ("000" + firstPart.toString(36)).slice(-3);
                    secondPart = ("000" + secondPart.toString(36)).slice(-3);
                    data.referral_code = firstPart.toUpperCase() + secondPart.toUpperCase();

                    data.geometry = [0, 0];
                    data.device = [];
                    data.otp = Math.floor(Math.random() * 90000) + 10000;

                    data.careager_cash = 0;
                    data.socialite = "";
                    data.optional_info = "";
                    data.business_info = "";
                    req.body.uuid = uuidv1();

                    await User.create(data).then(async function (user) {
                        event.signupSMS(user);
                        //event.otpSms(user);
                        driver = user._id;
                        Booking.findOneAndUpdate({ _id: booking._id }, { $set: { driver: driver } }, { new: true }, function (err, doc) { });
                    });

                }
            }

            var technician = null;
            if (req.body.technician) {
                var checkTechnician = await Management.findOne({ business: business, user: req.body.technician }).exec();
                if (checkTechnician) {
                    technician = checkTechnician.user;
                }
            }

            Car.findOneAndUpdate({ _id: booking.car }, { $set: { manufacture_year: req.body.manufacture_year } }, { $new: false }, function (err, doc) { });

            var claim = false;
            if (req.body.claim == "yes") {
                claim = true
            }

            var cashless = false;
            if (req.body.cashless == "yes") {
                cashless = true
            }

            if (!req.body.accident_date) {
                req.body.accident_date = null
            }

            var insurance_info = {
                policy_holder: booking.insurance_info.policy_holder,
                insurance_company: booking.insurance_info.insurance_company,
                branch: booking.insurance_info.branch,
                gstin: booking.insurance_info.gstin,
                policy_no: booking.insurance_info.policy_no,
                premium: booking.insurance_info.premium,
                expire: booking.insurance_info.expire,
                claim: claim,
                cashless: cashless,
                policy_type: booking.insurance_info.policy_type,
                claim_no: booking.insurance_info.claim_no,
                driver_accident: req.body.driver_accident,
                accident_place: req.body.accident_place,
                accident_date: new Date(req.body.accident_date).toISOString(),
                accident_time: req.body.accident_time,
                accident_cause: req.body.accident_cause,
                spot_survey: req.body.spot_survey,
                fir: req.body.fir,
                manufacture_year: req.body.manufacture_year
            };

            var customer_requirements = req.body.demands;
            if (customer_requirements.length <= 0) {
                customer_requirements = booking.customer_requirements;
            }

            var data = {
                customer_requirements: customer_requirements,
                technician: technician,
                delivery_date: new Date(req.body.delivery_date).toISOString(),
                delivery_time: req.body.delivery_time,
                status: "JobOpen",
                sub_status: "JobOpen",
                // lead: lead._id,
                insurance_info: insurance_info,
                updated_at: new Date()
            }


            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: data }, { new: true }, function (err, doc) { });
            if (claim == true) {
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { "payment.policy_clause": 1000 } }, { new: true }, function (err, doc) { });
            }

            var activity = {
                user: loggedInDetails._id,
                name: loggedInDetails.name,
                stage: "NewJob",
                activity: "JobOpen",
            };

            fun.bookingLog(booking._id, activity);

            var updated = await Booking.findById(booking._id).exec();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Asset",
                responseData: updated,
            })
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.put('/booking/tax-preference/update', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
        with_tax: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var loggedInDetails = await User.findById(decoded.user).exec();
        var business = await User.findById(req.headers['business']).exec();

        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {

            Booking.findOneAndUpdate({ _id: booking._id }, { $set: { with_tax: req.body.with_tax, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                if (err) {
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Error",
                        responseData: {}
                    })
                }
                else {
                    var update = await Booking.findById(booking._id).exec();
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Updated Successfully",
                        responseData: update
                    })
                }
            });

        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            })
        }
    }
});

router.post('/note/add', xAccessToken.token, async function (req, res, next) {
    businessFunctions.logs("INFO: /note/add Api Called from booking.js," + " " + "Request Headers:" + JSON.stringify(req.headers) + ", " + "Request Body:" + JSON.stringify(req.body));

    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var date = new Date();
    var loggedInDetails = decoded.user;
    var items = [];
    var data = [];

    var item_total = 0;
    var discount = 0;
    var item_total = 0;
    var total = 0;

    var data = {
        updated_at: new Date(),
        note: req.body.note
    }
    // console.log("Notes Data " + JSON.stringify(data))
    var loggedInDetails = await User.findById(decoded.user).exec();
    if (req.body.type == "booking") {
        var source = await Booking.findById(req.body.source).exec();
        if (source) {
            Booking.findOneAndUpdate({ _id: source._id }, { $set: data }, { new: false }, async function (err, doc) {
                if (err) {
                    if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                        businessFunctions.logs("ERROR: Error Occured while add note for the booking, bookingId:" + source._id + ", " + "User:" + loggedInDetails.name);
                    }
                    return res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err
                    });
                }
                else {
                    Invoice.update({ booking: source._id }, { $set: { note: req.body.note } }, { multi: true }, async function (err, doc) {
                        if (err) {
                            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                                businessFunctions.logs("ERROR: Error Occured while Update note in the invoice for the booking, bookingId:" + source._id + ", " + "User:" + loggedInDetails.name);
                            }
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                        else {
                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Note has been updated",
                                responseData: {}
                            });
                            if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                                businessFunctions.logs("INFO: Note has been updated Successfully for the booking, BookingId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
                            }
                        }
                    });
                }
            });
        }
        else {
            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                businessFunctions.logs("ERROR: Booking not found for the given booking, BookingId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
    else if (req.body.type == "order") {
        // console.log("Sorce = " + req.body.source)
        var source = await BusinessOrder.findOne({ order: req.body.source }).exec();
        if (source) {
            await BusinessOrder.findOneAndUpdate({ order: req.body.source }, { $set: data }, { new: false }, async function (err, doc) {
                if (err) {
                    if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                        businessFunctions.logs("ERROR: Error Occured while add note for the order, orderId:" + source + ", " + "User:" + loggedInDetails.name);
                    }
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err
                    });
                }
                else {
                    await OrderInvoice.update({ order: req.body.source }, { $set: { note: req.body.note } }, { multi: true }, async function (err, doc) {
                        if (err) {
                            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                                businessFunctions.logs("ERROR: Error Occured while Update note in the invoice for the order, orderId:" + source._id + ", " + "User:" + loggedInDetails.name);
                            }
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                        else {

                            var activity = {
                                business: business,
                                activity_by: loggedInDetails.name,
                                activity: "New Note : '" + req.body.note + "'",
                                remark: "New Notes Added",
                                created_at: new Date(),
                            }
                            businessFunctions.salesOrderLogs(source.order, activity);
                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Note has been updated",
                                responseData: {}
                            });
                            if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                                businessFunctions.logs("INFO: Note has been updated Successfully for the order, orderId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
                            }
                        }
                    });
                }
            });
        }
        else {
            if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
                businessFunctions.logs("WARNING: Order not found, orderId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Order not found",
                responseData: {}
            });
        }
    }
    else if (req.body.type == "sale") {
        // console.log("Sorce = " + req.body.source + " = " + req.body.type)
        var source = await Sales.findOne({ _id: req.body.source }).exec();
        if (source) {
            await Sales.findOneAndUpdate({ _id: req.body.source }, { $set: data }, { new: true }, async function (err, doc) {
                if (err) {
                    if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                        businessFunctions.logs("ERROR: Error Occured while add note for the Sale, SaleId:" + source + ", " + "User:" + loggedInDetails.name);
                    }
                    res.status(422).json({
                        responseCode: 422,
                        responseMessage: "Server Error",
                        responseData: err
                    });
                }
                else {
                    await OrderInvoice.update({ sale: req.body.source }, { $set: { note: req.body.note } }, { multi: true }, async function (err, doc) {
                        if (err) {
                            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                                businessFunctions.logs("ERROR: Error Occured while Update note in the invoice for the Sale, SaleId:" + source._id + ", " + "User:" + loggedInDetails.name);
                            }
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                        else {

                            var activity = {
                                business: business,
                                activity_by: loggedInDetails.name,
                                activity: "New Note : '" + req.body.note + "'",
                                remark: "New Notes Added",
                                created_at: new Date(),
                            }
                            businessFunctions.salesLogs(source._id, activity);
                            res.status(200).json({
                                responseCode: 200,
                                responseMessage: "Note has been updated",
                                responseData: {}
                            });
                            if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                                businessFunctions.logs("INFO: Note has been updated Successfully for the Sale, SaleId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
                            }
                        }
                    });
                }
            });
        }
        else {
            if (Log_Level == 2 || Log_Level == 5 || Log_Level == 8 || Log_Level == 9 || Log_Level == 0) {
                businessFunctions.logs("WARNING: Order not found, SaleId:" + req.body.source + ", " + "User:" + loggedInDetails.name);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Order not found",
                responseData: {}
            });
        }
    }
});

router.get('/booking/category/get', xAccessToken.token, async function (req, res, next) {
    var data = [];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;


    if (req.headers['business']) {
        user = req.headers['business'];
    }

    await BookingCategory.find({ tag: { $ne: "package" } })
        .sort({ position: 1 })
        .cursor().eachAsync(async (d) => {

            var enable = true;


            data.push({
                _id: d._id,
                id: d._id,
                tag: d.tag,
                position: d.position,
                icon: d.icon,
                title: d.title,
                image: d.image,
                video: d.video,
                home_visibility: d.home_visibility,
                id: d._id,
                nested: d.nested,
                enable: enable,
                features: d.features
            })
        });


    res.status(200).json({
        responseCode: 200,
        responseMessage: "",
        responseData: data
    });
});

router.get('/services/category/details/get', xAccessToken.token, async function (req, res, next) {
    var category = [];
    if (req.query.type == "service") {
        var sub_cat = [
            "Brakes & Suspension",
            "General",
            "Roadside Assistance",
            "Periodic Service",
            "AC",
            "Engine",
            "General"
        ]
        var segments = [
            'Sports',
            'Luxury XL',
            'Luxury',
            'Premium XL',
            'Premium',
            'Medium',
            'Small',
        ]
        category.push({
            type: req.query.type,
            sub_categorys: sub_cat,
            segments: segments

        })
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Services Sub-Categories",
            responseData: category
        });

    } else if (req.query.type == "collision") {
        var sub_cat = [
            "Front Side",
            "Right Side",
            "Left Side",
            "Rear Side",
            "General"


        ]
        var segments = [
            'Sports',
            'Luxury XL',
            'Luxury',
            'Premium XL',
            'Premium',
            'Medium',
            'Small',
        ]
        category.push({
            type: req.query.type,
            sub_categorys: sub_cat,
            segments: segments
        })
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Services Sub-Categories",
            responseData: category
        });

    } else if (req.query.type == "customization") {
        var sub_cat = [
            "Wheels",
            "Package",
            "Graphics",
        ]
        var segments = [
            'Sports',
            'Luxury XL',
            'Luxury',
            'Premium XL',
            'Premium',
            'Medium',
            'Small',
        ]
        category.push({
            type: req.query.type,
            sub_categorys: sub_cat,
            segments: segments
        })
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Services Sub-Categories",
            responseData: category
        });

    }
    else if (req.query.type == "detailing") {
        var sub_cat = [
            "Washing",
            "Interior Detailing",
            "Exterior Detailing",
            "Protection Coatings",
        ]
        var segments = [
            'Sports',
            'Luxury XL',
            'Luxury',
            'Premium XL',
            'Premium',
            'Medium',
            'Small',
        ]
        category.push({
            type: req.query.type,
            sub_categorys: sub_cat,
            segments: segments
        })
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Services Sub-Categories",
            responseData: category
        });

    }
    // var status = await LeadStatus.findOne({ stage: req.query.stage }).exec();
    // if (status) {
    //     res.status(200).json({
    //         responseCode: 200,
    //         responseMessage: "success",
    //         responseData: status.status
    //     });
    // }
    else {
        res.status(200).json({
            responseCode: 200,
            responseMessage: "Service not Matched",
            responseData: []
        });
    }
});

router.put('/services/sub_category/set', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var business = req.headers['business'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var booking = await Booking.findOne({ _id: req.body.booking }).exec(); //.select('sub_category').
    // return res.json(booking)
    if (booking) {
        if (booking.services[parseInt(req.body.service_index)].length != 0) {
            // console.log(" = Type of filed " + req.body.field)
            if (req.body.field == 'type') {
                // console.log("Data 21 =" + booking.services[parseInt(req.body.service_index)].type + "   = " + req.body.category)
                booking.services[parseInt(req.body.service_index)].type = req.body.category
            } else if (req.body.field == 'sub_category') {
                booking.services[parseInt(req.body.service_index)].sub_category = req.body.sub_category
            } else { }
            await booking.markModified('services');
            await booking.save()
                .then(res => {
                    // console.log("Data saved...")

                })
                .catch(err => {
                    // console.log("Error...", err)
                })
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Sub Category added successfully",
                responseData: {}
            });

        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Service not found",
                responseData: {}
            });
        }
    } else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.put('/services/claim/change', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var business = req.headers['business'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var booking = await Booking.findOne({ _id: req.body.booking }).exec(); //.select('sub_category').
    // return res.json(booking)
    if (booking) {

        if (booking.services[parseInt(req.body.service_index)].length != 0) {
            booking.services[parseInt(req.body.service_index)].claim = req.body.claim
            // console.log("Data = " + req.body.claim + " = " + booking.services[parseInt(req.body.service_index)].claim)
            await booking.markModified('services');
            await booking.save()
                .then(res => {
                    // console.log("Data saved...")

                })
                .catch(err => {
                    // console.log("Error...", err)
                })
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Claim changed successfully",
                responseData: {}
            });

        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Service not found",
                responseData: {}
            });
        }
    } else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Booking not found",
            responseData: {}
        });
    }
});

router.post('/services/rate', xAccessToken.token, async function (req, res, next) {
    var rules = {
        car: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];

        var totalResult = 0;

        var quantity = 1
        var car = await Variant.findById(req.query.car).populate('model').exec();
        if (car) {
            var packages = [];

            if (req.query.type == "services") {
                await Service.find({ segment: car.model.segment, part_cost: 0, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {

                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            discount: _.sumBy(labours, x => x.discount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Service.find({ model: car.model._id, part_cost: { $gt: 0 }, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }
                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            id: service.id,
                            _id: service._id
                        });
                    });
            }

            else if (req.query.type == "collision") {
                // console.log("Working.....")
                await Collision.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

            }

            else if (req.query.type == "customization") {
                await Customization.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                /*var quantity = 1;*/
                                /*if(labour_list[l].quantity)
                                {
                                    quantity = labour_list[l].quantity;
                                }*/

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            else if (req.query.type == "detailing") {
                await Detailing.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }


                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            packages = _(packages).groupBy(x => x.package).map((value, key) => ({ package: key, services: value })).value();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: packages
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Car not found",
                responseData: {}
            });
        }

    }
});

router.post('/services/rate/xpr', async function (req, res, next) {
    var rules = {
        car: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        // var user = decoded.user;
        var business = req.headers['business'];

        var totalResult = 0;

        var quantity = 1
        var car = await Variant.findById(req.query.car).populate('model').exec();
        if (car) {
            var packages = [];

            if (req.query.type == "services") {
                await Service.find({ segment: car.model.segment, part_cost: 0, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {

                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            discount: _.sumBy(labours, x => x.discount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            profile: service.profile,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Service.find({ model: car.model._id, part_cost: { $gt: 0 }, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }
                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            profile: service.profile,
                            id: service.id,
                            _id: service._id
                        });
                    });
            }

            else if (req.query.type == "collision") {
                // console.log("Working.....")
                await Collision.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            profile: service.profile,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

            }

            else if (req.query.type == "customization") {
                await Customization.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                /*var quantity = 1;*/
                                /*if(labour_list[l].quantity)
                                {
                                    quantity = labour_list[l].quantity;
                                }*/

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            profile: service.profile,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            else if (req.query.type == "detailing") {
                await Detailing.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }


                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            profile: service.profile,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            packages = _(packages).groupBy(x => x.package).map((value, key) => ({ package: key, services: value })).value();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: packages
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Car not found",
                responseData: {}
            });
        }

    }
});

router.post('/services/rate/xpr/old', async function (req, res, next) {
    var rules = {
        car: 'required',
    };

    var validation = new Validator(req.query, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        // var user = decoded.user;
        var business = req.headers['business'];

        var totalResult = 0;

        var quantity = 1
        var car = await Variant.findById(req.query.car).populate('model').exec();
        if (car) {
            var packages = [];

            if (req.query.type == "services") {
                await Service.find({ segment: car.model.segment, part_cost: 0, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {

                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            discount: _.sumBy(labours, x => x.discount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            profile: service.profile,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

                await Service.find({ model: car.model._id, part_cost: { $gt: 0 }, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var labels = [];

                        labels.push(service.type)
                        labels.push(service.service)
                        var coupons = await Coupon.find({ label: { $in: labels }, expired_at: { "$gte": new Date() }, physical: false }).exec();

                        var gallery = service.gallery;
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var quantity = 1;
                                if (labour_list[l].quantity) {
                                    quantity = labour_list[l].quantity;
                                }

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount);
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: 1,
                                    base: parseFloat(total.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }
                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: Math.ceil(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: Math.ceil(service.of_cost),
                            exceeded_cost: 0,
                            mrp: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + (_.sumBy(labours, x => x.amount) * (40 / 100)),
                            cost: Math.ceil(service.part_cost) + _.sumBy(labours, x => x.amount) + service.of_cost,
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: service.quantity,
                            discount: _.sumBy(labours, x => x.discount) + _.sumBy(service.opening_fitting, x => x.discount) + _.sumBy(service.parts, x => x.discount),
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            gallery: gallery.length,
                            description: service.description,
                            coupons: coupons,
                            profile: service.profile,
                            id: service.id,
                            _id: service._id
                        });
                    });
            }

            else if (req.query.type == "collision") {
                // console.log("Working.....")
                await Collision.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };

                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            discount: _.sumBy(labours, x => x.discount),
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            profile: service.profile,
                            description: service.description,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });

            }

            else if (req.query.type == "customization") {
                await Customization.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));
                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                /*var quantity = 1;*/
                                /*if(labour_list[l].quantity)
                                {
                                    quantity = labour_list[l].quantity;
                                }*/

                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }

                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });

                                // console.log(base.toFixed(2))
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            profile: service.profile,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            else if (req.query.type == "detailing") {
                await Detailing.find({ segment: car.model.segment, publish: true, business: business })
                    .cursor().eachAsync(async (service) => {
                        var getDiscount = {
                            booking: null,
                            package: null,
                            car: null,
                            category: service.type,
                            service: service.service,
                            claim: false,
                            tz: req.headers['tz'],
                        };
                        var package = await q.all(businessFunctions.getPackageDiscount(getDiscount));

                        var labour_list = service.labour;
                        var labours = [];

                        var discount_eligible_labour_cost = _.sumBy(labour_list, x => x.amount);
                        if (labour_list.length > 0) {
                            for (var l = 0; l < labour_list.length; l++) {
                                var discount_total = 0;
                                var total = 0;
                                var tax_info = await Tax.findOne({ tax: labour_list[l].tax }).exec();

                                var tax = [];
                                var rate = labour_list[l].rate;
                                var amount = parseFloat(labour_list[l].amount) * quantity;
                                var tax_rate = tax_info.detail;
                                var base = amount;

                                if (Object.keys(package).length > 0) {
                                    if (package.discount_type == "percent") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = amount * (discount / 100);
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else if (package.discount_type == "fixed") {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = parseFloat(discount_total.toFixed(2))
                                            discount = amount - discount_total;
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                    else {
                                        discount = parseFloat(package.discount);
                                        if (!isNaN(discount) && discount > 0) {
                                            var discount_total = (amount / discount_eligible_labour_cost) * discount;
                                            amount = amount - parseFloat(discount_total.toFixed(2))
                                            if (amount < 0) {
                                                amount = 0
                                            }
                                        }
                                    }
                                }


                                if (labour_list[l].amount_is_tax == "inclusive") {
                                    var x = (100 + tax_info.rate) / 100;
                                    var tax_on_amount = amount / x;
                                    if (tax_rate.length > 0) {
                                        for (var r = 0; r < tax_rate.length; r++) {
                                            if (tax_rate[r].rate != tax_info.rate) {
                                                var t = tax_on_amount * (tax_rate[r].rate / 100);
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_rate[r].tax,
                                                    rate: tax_rate[r].rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                            else {
                                                var t = amount - tax_on_amount;
                                                base = base - t;
                                                tax.push({
                                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                                    rate: tax_info.rate,
                                                    amount: parseFloat(t.toFixed(2))
                                                });
                                            }
                                        }

                                        //base = base - discount_total;
                                    }
                                    total = total + amount;
                                }

                                var tax_details = {
                                    tax: tax_info.tax,
                                    rate: tax_info.rate,
                                    amount: total,
                                    detail: tax
                                }


                                labours.push({
                                    item: labour_list[l].item,
                                    source: labour_list[l].source,
                                    rate: parseFloat(labour_list[l].rate),
                                    quantity: quantity,
                                    base: parseFloat(base.toFixed(2)),
                                    discount: parseFloat(discount_total.toFixed(2)),
                                    amount: total,
                                    tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                                    amount_is_tax: labour_list[l].amount_is_tax,
                                    tax: tax_info.tax, tax_rate: tax_info.rate,
                                    tax_info: tax_details
                                });
                            }
                        }

                        packages.push({
                            package: service.package,
                            service: service.service,
                            labour: labours,
                            discount: _.sumBy(labours, x => x.discount),
                            labour_cost: _.sumBy(labours, x => x.amount),
                            parts: service.parts,
                            part_cost: parseFloat(service.part_cost),
                            opening_fitting: service.opening_fitting,
                            of_cost: parseFloat(service.of_cost),
                            exceeded_cost: 0,
                            mrp: parseFloat(service.mrp),
                            cost: parseFloat(service.part_cost) + _.sumBy(labours, x => x.amount),
                            doorstep: service.doorstep,
                            unit: service.unit,
                            quantity: quantity,
                            part_cost_editable: service.part_cost_editable,
                            labour_cost_editable: service.labour_cost_editable,
                            of_cost_editable: service.of_cost_editable,
                            type: service.type,
                            source: service.id,
                            description: service.description,
                            profile: service.profile,
                            id: service.id,
                            _id: service._id
                        });

                        packageDiscountOn = []
                    });
            }

            packages = _(packages).groupBy(x => x.package).map((value, key) => ({ package: key, services: value })).value();

            res.status(200).json({
                responseCode: 200,
                responseMessage: "",
                responseData: packages
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Car not found",
                responseData: {}
            });
        }

    }
});

router.get('/tax-report/get', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var filters = [];

    var to = new Date();
    if (req.query.to) {
        to = new Date(req.query.to);
        to.setDate(to.getDate() + 1);
    }

    var from = new Date();
    if (req.query.from) {
        from = new Date(req.query.from);
    }

    var queries = new Object();
    var sortBy = new Object();


    var specification = {};
    specification['$match'] = {
        status: "Active",
        business: mongoose.Types.ObjectId(business),
        updated_at: { $lte: to, $gte: from }
    };
    filters.push(specification);

    var total_sales = 0;
    var unFlattenedArray = [];

    var business_info = await User.findById(business).select('name email contact_no business_info account_info').exec();

    await OrderInvoice.aggregate(filters)
        .allowDiskUse(true)
        .cursor({ batchSize: 10 })
        .exec()
        .eachAsync(async function (invoice) {
            if (invoice) {
                var services = await q.all(fun.getBusinessOrderItems(invoice.order, business, req.headers['tz']));
                var amount = _.sumBy(services, x => x.amount) + invoice.payment.convenience_charges;

                total_sales = amount + total_sales;
                if (services.length > 0) {
                    for (var i = 0; i < services.length; i++) {
                        unFlattenedArray.push(services[i].tax_info.detail)
                    }
                }
            }
        });



    await Invoice.aggregate(filters)
        .allowDiskUse(true)
        .cursor({ batchSize: 10 })
        .exec()
        .eachAsync(async function (invoice) {
            var services = invoice.services;

            var paid_total = invoice.payment.paid_total;
            var labour_cost = _.sumBy(services, x => x.labour_cost);
            var part_cost = _.sumBy(services, x => x.part_cost);
            var of_cost = _.sumBy(services, x => x.of_cost);


            var pick_up_charges = 0;
            if (invoice.payment.pick_up_charges) {
                pick_up_charges = invoice.payment.pick_up_charges;
            }

            var policy_clause = 0;
            if (invoice.payment.policy_clause) {
                policy_clause = invoice.payment.policy_clause;
            }

            var salvage = 0;
            if (invoice.payment.salvage) {
                salvage = invoice.payment.salvage;
            }

            var careager_cash = 0;
            if (invoice.payment.careager_cash) {
                careager_cash = invoice.payment.careager_cash;
            }

            var estimate_cost = parseFloat(labour_cost) + parseFloat(part_cost) + parseFloat(of_cost) + parseFloat(policy_clause) + parseFloat(salvage) + parseFloat(pick_up_charges) - parseFloat(careager_cash);

            total_sales = total_sales + estimate_cost;

            if (services.length > 0) {
                for (var i = 0; i < services.length; i++) {
                    var part = [];
                    var labours = [];
                    var opening_fitting = [];

                    var part_list = services[i].parts;
                    var labour_list = services[i].labour;
                    var of_list = services[i].opening_fitting;

                    if (part_list) {
                        for (var p = 0; p < part_list.length; p++) {
                            unFlattenedArray.push(part_list[p].tax_info.detail)
                        }
                    }

                    if (labour_list) {
                        for (var l = 0; l < labour_list.length; l++) {
                            unFlattenedArray.push(labour_list[l].tax_info.detail)
                        }
                    }

                    if (of_list) {
                        for (var o = 0; o < of_list.length; o++) {
                            unFlattenedArray.push(of_list[0].tax_info.detail)
                        }
                    }
                }
            }
        });

    const flattenedArray = [].concat(...unFlattenedArray);
    var taxes = [
        {
            tax: "0% CGST",
            type: "CGST",
            rate: 0,
            amount: 0
        }, {
            tax: "0% SGST",
            type: "SGST",
            rate: 0,
            amount: 0
        },
        {
            tax: "0% IGST",
            type: "IGST",
            rate: 0,
            amount: 0
        },
    ];

    for (i = 0; i < flattenedArray.length; i++) {
        if (flattenedArray[i]) {
            if (flattenedArray[i].rate > 0) {
                var type = flattenedArray[i].tax.split("% ");
                taxes.push({
                    tax: flattenedArray[i].tax,
                    type: type[1],
                    rate: flattenedArray[i].rate,
                    amount: flattenedArray[i].amount,
                })
            }
        }
    }

    var sales_tax_total = parseFloat(_.sumBy(taxes, 'amount').toFixed(2));
    var sales_report = _(taxes).groupBy('type').map((objs, key) => ({ type: key, /*tax: objs,*/amount: _.sumBy(objs, 'amount') })).value();



    var filters = [];

    var specification = {};
    specification['$match'] = {
        status: "Completed",
        items: { $exists: true },
        business: mongoose.Types.ObjectId(business),
        updated_at: { $lte: to, $gte: from }
    };
    filters.push(specification);


    var total_purchase = 0;
    var pUnFlattenedArray = [];
    var pflattenedArray = [];

    await Purchase.aggregate(filters)
        .allowDiskUse(true)
        .cursor({ batchSize: 10 })
        .exec()
        .eachAsync(async function (purchase) {
            var services = purchase.items;
            total_purchase = total_purchase + purchase.total;
            if (services.length > 0) {
                for (var i = 0; i < services.length; i++) {
                    pUnFlattenedArray.push(services[i].tax_info)
                }
            }
        });

    pflattenedArray = [].concat(...pUnFlattenedArray);
    var ptaxes = [{
        tax: "0% CGST",
        type: "CGST",
        rate: 0,
        amount: 0
    }, {
        tax: "0% SGST",
        type: "SGST",
        rate: 0,
        amount: 0
    },
    {
        tax: "0% IGST",
        type: "IGST",
        rate: 0,
        amount: 0
    }];

    for (i = 0; i < pflattenedArray.length; i++) {
        if (pflattenedArray[i]) {
            if (pflattenedArray[i].rate > 0) {
                var type = pflattenedArray[i].tax.split("% ");
                ptaxes.push({
                    tax: pflattenedArray[i].tax,
                    type: type[1],
                    rate: pflattenedArray[i].rate,
                    amount: pflattenedArray[i].amount,
                })
            }
        }
    }

    var purchase_tax_total = parseFloat(_.sumBy(ptaxes, 'amount').toFixed(2));
    var purchase_report = _(ptaxes).groupBy('type').map((objs, key) => ({ type: key, /*tax: objs,*/amount: _.sumBy(objs, 'amount') })).value();

    res.status(200).json({
        responseCode: 200,
        responseMessage: "",
        responseData: {
            business: business_info,
            from: req.query.from,
            to: req.query.to,
            sales_total: parseFloat(total_sales.toFixed(2)),
            sales_tax_total: sales_tax_total,
            sales_report: sales_report,
            total_purchase: parseFloat(total_purchase.toFixed(2)),
            purchase_tax_total: purchase_tax_total,
            purchase_report: purchase_report
        }
    });
});

router.post('/estimation/service/add', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var services_added = "";
        var logged_remark = "";
        var lst = "";
        var labour_log = "";
        var parts_log = "";
        var others_log = "";
        var total_labour_cost = 0;
        var total_part_cost = 0;


        var others_log = "";

        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findById(req.body.booking).exec();
        if (booking) {
            labour_cost = booking.payment.labour_cost;
            part_cost = booking.payment.part_cost;
            if (booking.payment.of_cost) {
                var of_cost = booking.payment.of_cost;
            }
            var services = req.body.services;

            for (var i = 0; i < services.length; i++) {
                var total_labour_cost = 0;
                var total_part_cost = 0;
                others_log = "Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                var parts_visible = true;
                var part_tax = [];
                var labour_tax = [];
                var fitting_tax = [];
                var tax_detail = {};
                if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                    var quantity = 1
                }
                else {
                    var quantity = parseInt(services[i].quantity)
                }
                var parts = services[i].parts;
                var part = [];

                if (parts.length > 0) {
                    parts_log = parts_log + " \n Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                    part = parts
                    for (j = 0; j < part.length; j++) {
                        total_part_cost += part[j].amount;
                        parts_log = parts_log + "\n" + "Part Name :" + part[j].item + " ( " + part[j].rate + " * " + part[j].quantity + " = " + part[j].amount + " )";
                        // console.log("Labour cost Inside" + labour_log)
                    }
                }
                else {
                    if (services[i].part_cost > 0) {
                        parts_visible = false;
                        var tax_info = await Tax.findOne({ tax: "0% GST" }).exec();

                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].part_cost) * quantity;
                        var base = amount;
                        var part_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;

                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    // console.log(t)
                                    if (t > 0) {
                                        base = base - t;
                                    }
                                    else {
                                        base = base;
                                    }

                                    part_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    /*if(tax_info.rate>0)
                                    {
                                        tax_on_amount = parseFloat(tax_on_amount.toFixed(2))
                                    }
                                    else
                                    {
                                        tax_on_amount = 0;
                                    }
                                    part_tax.push({
                                        tax: tax_info.tax,tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: 
                                    });*/

                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    part_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });

                                }
                            }
                        }

                        tax_detail = {
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            base: parseFloat(base.toFixed(2)),
                            detail: part_tax
                        }

                        part.push({
                            item: services[i].service,
                            source: null,
                            quantity: quantity,
                            hsn_sac: "",
                            part_no: "",
                            rate: parseFloat(services[i].part_cost),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            tax_amount: _.sumBy(part_tax, x => x.amount),
                            amount_is_tax: "inclusive",
                            discount: 0,
                            issued: false,
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: tax_detail
                        })
                    }
                    else {
                        part = []
                    }
                }

                var labour = services[i].labour;
                var labours = [];

                if (labour.length > 0) {
                    labour_log = labour_log + " \n Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                    labours = labour
                    //ABHINAV

                    for (j = 0; j < labours.length; j++) {

                        total_labour_cost += labours[j].amount;
                        labour_log = labour_log + "\n" + "Labour Name :" + labours[j].item + " ( " + labours[j].rate + " * " + labours[j].quantity + " = " + labours[j].amount + " )";
                        // console.log("Labour cost Inside" + labour_log)
                    }
                    // lst = labours.slice(-1).pop();
                    // console.log("Labour cost Outside" + labour_log)

                }
                else {
                    if (services[i].labour_cost > 0) {
                        var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].labour_cost) * quantity;
                        var base = amount;
                        var labour_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    labour_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                        amount: parseFloat(t.toFixed(2))
                                    })
                                }
                                else {
                                    base = base - t
                                    labour_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: parseFloat(tax_info.rate.toFixed(2)),
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    })
                                }
                            }
                        }

                        labours.push({
                            item: services[i].service,
                            quantity: quantity,
                            rate: parseFloat(services[i].labour_cost),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            discount: 0,
                            amount_is_tax: "inclusive",
                            tax_amount: _.sumBy(labour_tax, x => x.amount),
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: {
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                base: parseFloat(base.toFixed(2)),
                                detail: labour_tax
                            }
                        })
                    }
                }

                var opening_fittings = services[i].opening_fitting;
                var opening_fitting = [];

                if (opening_fittings.length > 0) {
                    opening_fitting = opening_fittings
                }
                else {
                    if (services[i].of_cost != 0) {
                        var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].of_cost) * quantity;
                        var base = amount;
                        var fitting_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    })
                                }
                                else {
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    })
                                }
                            }
                        }

                        opening_fitting.push({
                            item: services[i].service,
                            quantity: quantity,
                            rate: parseFloat(services[i].of_cost),
                            base: parseFloat(base.toFixed(2)),
                            discount: 0,
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            amount_is_tax: "inclusive",
                            tax_amount: _.sumBy(fitting_tax, x => x.amount),
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: {
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                base: parseFloat(base.toFixed(2)),
                                detail: fitting_tax
                            }
                        })
                    }
                }
                // console.log("Openning Fitting = " + _.sumBy(opening_fitting, x => x.amount))
                var cost = _.sumBy(part, x => x.amount) + _.sumBy(labour, x => x.amount) + _.sumBy(opening_fitting, x => x.amount);
                if (services[i].customer_approval == true) {
                    logged_remark = logged_remark + " |--> " + services[i].service + " Rs/-" + cost + " \n ";
                }

                services_added = services_added + " |--> " + services[i].service + " Rs/- " + cost + " \n |----> Labour Charges" + total_labour_cost + " \n |----> Parts Charges" + total_part_cost + ") \n |----> Other Charges" + _.sumBy(opening_fitting, x => x.amount) + " \n ";

                bookingService.push({
                    source: services[i].source,
                    service: services[i].service,
                    mileage: services[i].mileage,
                    parts: part,
                    labour: labours,
                    opening_fitting: opening_fitting,
                    hours: services[i].hours,
                    parts_visible: parts_visible,
                    quantity: quantity,
                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                    description: services[i].description,
                    cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                    labour_cost: parseFloat(services[i].labour_cost),
                    of_cost: parseFloat(services[i].of_cost),
                    part_cost: parseFloat(services[i].part_cost),
                    exceeded_cost: parseFloat(services[i].exceeded_cost),
                    part_cost_editable: services[i].part_cost_editable,
                    labour_cost_editable: services[i].labour_cost_editable,
                    of_cost_editable: services[i].of_cost_editable,
                    type: services[i].type,
                    sub_category: services[i].sub_category,
                    customer_approval: services[i].customer_approval,
                    surveyor_approval: services[i].surveyor_approval,
                    claim: services[i].claim,
                    custom: services[i].custom,
                });
                // console.log("Sub Category inside Array  = " + services[i].sub_category)
            }


            // serviceAdd(bookingService, booking._id);
            var policy_clause = booking.payment.policy_clause;
            if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
                policy_clause = req.body.policy_clause;
            }

            var salvage = booking.payment.salvage;
            if (req.body.salvage >= 0 && req.body.salvage != null) {
                salvage = req.body.salvage;
            }

            var pick_up_charges = booking.payment.pick_up_charges;
            if (req.body.pick_up_charge >= 0) {
                pick_up_charges = req.body.pick_up_charge;
            }
            var additionalDiscount = booking.payment.additionalDiscount
            if (req.body.additionalDiscount) {
                additionalDiscount = req.body.additionalDiscount
            }
            // console.log('Additional Desc . ' + additionalDiscount)
            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

            var paid_total = booking.payment.paid_total;
            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
            var part_cost = _.sumBy(bookingService, x => x.part_cost);
            var of_cost = _.sumBy(bookingService, x => x.of_cost);
            var discount_total = _.sumBy(bookingService, x => x.discount);

            var careager_cash = booking.payment.careager_cash;

            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges;

            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - (careager_cash + additionalDiscount);

            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash);

            var due = {
                due: Math.ceil(due_amount.toFixed(2))
            }
            // console.log('Additional Desc . ' + additionalDiscount)

            var payment = {
                total: parseFloat(payment_total.toFixed(2)),
                estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                careager_cash: careager_cash,
                of_cost: of_cost,
                labour_cost: labour_cost,
                part_cost: part_cost,
                payment_mode: booking.payment.payment_mode,
                payment_status: booking.payment.payment_status,
                discount_type: booking.payment.discount_type,
                coupon: booking.payment.coupon,
                coupon_type: booking.payment.coupon_type,
                discount_by: booking.payment.discount_by,
                discount: booking.payment.discount,
                discount_total: discount_total,
                policy_clause: policy_clause,
                salvage: salvage,
                additionalDiscount: additionalDiscount,
                terms: booking.payment.terms,
                pick_up_limit: booking.payment.pick_up_limit,
                pick_up_charges: pick_up_charges,
                paid_total: parseFloat(booking.payment.paid_total),
                discount_applied: booking.payment.discount_applied,
                transaction_id: booking.payment.transaction_id,
                transaction_date: booking.payment.transaction_date,
                transaction_status: booking.payment.transaction_status,
                transaction_response: booking.payment.transaction_response
            };

            var date = new Date();
            // serviceAdd(bookingService, booking._id);
            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { services: bookingService, convenience: req.body.convenience, payment: payment, due: due, advance: req.body.advance, updated_at: date } }, { new: false }, async function (err, doc) {
                if (err) {
                    // console.log(err)
                }
                else {

                    // serviceAdd(bookingService, booking._id);
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: "Estimation",
                        activity: services_added,
                    }

                    fun.bookingLog(booking._id, activity);

                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: "Estimation",
                        activity: labour_log,
                    }
                    fun.bookingLog(booking._id, activity);
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: "Estimation",
                        activity: parts_log,
                    }

                    fun.bookingLog(booking._id, activity);


                    if (logged_remark) {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: "Approval",
                            activity: logged_remark,
                        }

                        fun.bookingLog(booking._id, activity);
                    }

                    event.zohoLead(booking._id);

                    var updated = await Booking.findById(booking.id).exec();
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Service has been added...",
                        responseData: updated,
                    });
                }
            }
            );
        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            });
        }
    }
}
);
router.post('/lead/booking/checkout/edit', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var labour_cost = 0;
        var part_cost = 0;
        var of_cost = 0;
        var due_amount = 0;
        var totalResult = 0;
        var bookingService = [];
        var services_added = "";
        var logged_remark = "";
        var lst = "";
        var labour_log = "";
        var parts_log = "";
        var others_log = "";
        var total_labour_cost = 0;
        var total_part_cost = 0;


        var others_log = "";

        var loggedInDetails = await User.findById(decoded.user).exec();
        var booking = await Booking.findById(req.body.booking)
            .populate({ path: 'user', select: 'name contact_no address _id' })
            .populate({ path: 'manager', populate: { path: 'user', select: "_id id name contact_no email" } })
            .populate({ path: 'car', select: 'registration_no title' })
            .exec();
        // var booking = await Booking.findOne({ car: car._id, user: user, status: { $nin: ["Completed", "CompleteWork", "QC", "Closed", "Ready", "Rejected", "Cancelled", "Inactive"] }, is_services: true }).exec();
        if (booking) {
            var manager = null;
            if (booking.manager) {
                // console.log('in manager 28392');

                manager = {
                    name: booking.manager.name,
                    _id: booking.manager._id,
                    id: booking.manager.id,
                    contact_no: booking.manager.contact_no,
                    email: booking.manager.email
                }

            }
            // console.log(" Man" + manager);
            labour_cost = booking.payment.labour_cost;
            part_cost = booking.payment.part_cost;
            if (booking.payment.of_cost) {
                var of_cost = booking.payment.of_cost;
            }
            var services = req.body.services;

            for (var i = 0; i < services.length; i++) {
                var total_labour_cost = 0;
                var total_part_cost = 0;
                others_log = "Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                var parts_visible = true;
                var part_tax = [];
                var labour_tax = [];
                var fitting_tax = [];
                var tax_detail = {};
                if (typeof services[i].quantity != "number" || parseInt(services[i].quantity) <= 0) {
                    var quantity = 1
                }
                else {
                    var quantity = parseInt(services[i].quantity)
                }
                var parts = services[i].parts;
                var part = [];

                if (parts.length > 0) {
                    parts_log = parts_log + " \n Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                    part = parts
                    for (j = 0; j < part.length; j++) {
                        total_part_cost += part[j].amount;
                        parts_log = parts_log + "\n" + "Part Name :" + part[j].item + " ( " + part[j].rate + " * " + part[j].quantity + " = " + part[j].amount + " )";
                        // console.log("Labour cost Inside" + labour_log)
                    }
                }
                else {
                    if (services[i].part_cost > 0) {
                        parts_visible = false;
                        var tax_info = await Tax.findOne({ tax: "0% GST" }).exec();

                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].part_cost) * quantity;
                        var base = amount;
                        var part_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;

                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    // console.log(t)
                                    if (t > 0) {
                                        base = base - t;
                                    }
                                    else {
                                        base = base;
                                    }

                                    part_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });
                                }
                                else {
                                    /*if(tax_info.rate>0)
                                    {
                                        tax_on_amount = parseFloat(tax_on_amount.toFixed(2))
                                    }
                                    else
                                    {
                                        tax_on_amount = 0;
                                    }
                                    part_tax.push({
                                        tax: tax_info.tax,tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: 
                                    });*/

                                    var t = amount - tax_on_amount;
                                    base = base - t;
                                    part_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(t.toFixed(2))
                                    });

                                }
                            }
                        }

                        tax_detail = {
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            base: parseFloat(base.toFixed(2)),
                            detail: part_tax
                        }

                        part.push({
                            item: services[i].service,
                            source: null,
                            quantity: quantity,
                            hsn_sac: "",
                            part_no: "",
                            rate: parseFloat(services[i].part_cost),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            tax_amount: _.sumBy(part_tax, x => x.amount),
                            amount_is_tax: "inclusive",
                            discount: 0,
                            issued: false,
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: tax_detail
                        })
                    }
                    else {
                        part = []
                    }
                }

                var labour = services[i].labour;
                var labours = [];

                if (labour.length > 0) {
                    labour_log = labour_log + " \n Service Name : " + services[i].service + "( Rate * Quantity = Amount )";
                    labours = labour
                    //ABHINAV

                    for (j = 0; j < labours.length; j++) {

                        total_labour_cost += labours[j].amount;
                        labour_log = labour_log + "\n" + "Labour Name :" + labours[j].item + " ( " + labours[j].rate + " * " + labours[j].quantity + " = " + labours[j].amount + " )";
                        // console.log("Labour cost Inside" + labour_log)
                    }
                    // lst = labours.slice(-1).pop();
                    // console.log("Labour cost Outside" + labour_log)

                }
                else {
                    if (services[i].labour_cost > 0) {
                        var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].labour_cost) * quantity;
                        var base = amount;
                        var labour_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    labour_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: parseFloat(tax_rate[r].rate.toFixed(2)),
                                        amount: parseFloat(t.toFixed(2))
                                    })
                                }
                                else {
                                    base = base - t
                                    labour_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: parseFloat(tax_info.rate.toFixed(2)),
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    })
                                }
                            }
                        }

                        labours.push({
                            item: services[i].service,
                            quantity: quantity,
                            rate: parseFloat(services[i].labour_cost),
                            base: parseFloat(base.toFixed(2)),
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            discount: 0,
                            amount_is_tax: "inclusive",
                            tax_amount: _.sumBy(labour_tax, x => x.amount),
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: {
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                base: parseFloat(base.toFixed(2)),
                                detail: labour_tax
                            }
                        })
                    }
                }

                var opening_fittings = services[i].opening_fitting;
                var opening_fitting = [];

                if (opening_fittings.length > 0) {
                    opening_fitting = opening_fittings
                }
                else {
                    if (services[i].of_cost != 0) {
                        var tax_info = await Tax.findOne({ tax: "18.0% GST" }).exec();
                        var tax_rate = tax_info.detail;
                        var service = services[i].service;
                        var amount = parseFloat(services[i].of_cost) * quantity;
                        var base = amount;
                        var fitting_tax = [];

                        var x = (100 + tax_info.rate) / 100;
                        var tax_on_amount = amount / x;
                        if (tax_rate.length > 0) {
                            for (var r = 0; r < tax_rate.length; r++) {
                                if (tax_rate[r].rate != tax_info.rate) {
                                    var t = tax_on_amount * (tax_rate[r].rate / 100);
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_rate[r].tax,
                                        rate: tax_rate[r].rate,
                                        amount: parseFloat(t.toFixed(2))
                                    })
                                }
                                else {
                                    base = base - t
                                    fitting_tax.push({
                                        tax: tax_info.tax, tax_rate: tax_info.rate,
                                        rate: tax_info.rate,
                                        amount: parseFloat(tax_on_amount.toFixed(2))
                                    })
                                }
                            }
                        }

                        opening_fitting.push({
                            item: services[i].service,
                            quantity: quantity,
                            rate: parseFloat(services[i].of_cost),
                            base: parseFloat(base.toFixed(2)),
                            discount: 0,
                            amount: parseFloat(amount),
                            customer_dep: 100,
                            insurance_dep: 0,
                            amount_is_tax: "inclusive",
                            tax_amount: _.sumBy(fitting_tax, x => x.amount),
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: {
                                tax: tax_info.tax, tax_rate: tax_info.rate,
                                rate: tax_info.rate,
                                base: parseFloat(base.toFixed(2)),
                                detail: fitting_tax
                            }
                        })
                    }
                }
                // console.log("Openning Fitting = " + _.sumBy(opening_fitting, x => x.amount))
                var cost = _.sumBy(part, x => x.amount) + _.sumBy(labour, x => x.amount) + _.sumBy(opening_fitting, x => x.amount);
                if (services[i].customer_approval == true) {
                    logged_remark = logged_remark + " |--> " + services[i].service + " Rs/-" + cost + " \n ";
                }

                services_added = services_added + " |--> " + services[i].service + " Rs/- " + cost + " \n |----> Labour Charges" + total_labour_cost + " \n |----> Parts Charges" + total_part_cost + ") \n |----> Other Charges" + _.sumBy(opening_fitting, x => x.amount) + " \n ";

                bookingService.push({
                    source: services[i].source,
                    service: services[i].service,
                    mileage: services[i].mileage,
                    parts: part,
                    labour: labours,
                    opening_fitting: opening_fitting,
                    hours: services[i].hours,
                    parts_visible: parts_visible,
                    quantity: quantity,
                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                    description: services[i].description,
                    cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                    labour_cost: parseFloat(services[i].labour_cost),
                    of_cost: parseFloat(services[i].of_cost),
                    part_cost: parseFloat(services[i].part_cost),
                    exceeded_cost: parseFloat(services[i].exceeded_cost),
                    part_cost_editable: services[i].part_cost_editable,
                    labour_cost_editable: services[i].labour_cost_editable,
                    of_cost_editable: services[i].of_cost_editable,
                    type: services[i].type,
                    sub_category: services[i].sub_category,
                    customer_approval: true,
                    surveyor_approval: true,
                    claim: services[i].claim,
                    custom: services[i].custom,
                });
                // console.log("Sub Category inside Array  = " + services[i].sub_category)
            }


            // serviceAdd(bookingService, booking._id);
            var policy_clause = booking.payment.policy_clause;
            if (req.body.policy_clause >= 0 && req.body.policy_clause != null) {
                policy_clause = req.body.policy_clause;
            }

            var salvage = booking.payment.salvage;
            if (req.body.salvage >= 0 && req.body.salvage != null) {
                salvage = req.body.salvage;
            }

            var pick_up_charges = booking.payment.pick_up_charges;
            if (req.body.pick_up_charge >= 0) {
                pick_up_charges = req.body.pick_up_charge;
            }
            var convenience = booking.convenience;
            if (req.body.convenience) {
                convenience = req.body.convenience
            }
            var status = booking.status
            // if (req.body.booking_date) {
            //     // status = "Confirmed";
            //     date = new Date(req.body.booking_date).toISOString();
            //     console.log("29738  = " + date)
            //     
            // }
            if (req.body.status) {
                status = req.body.status;
            }
            var additionalDiscount = 0
            if (req.body.additionalDiscount) {
                additionalDiscount = parseFloat(req.body.additionalDiscount);
            }
            var time_slot = booking.time_slot;
            if (req.body.time_slot) {
                time_slot = req.body.time_slot;
            }
            var address = null;
            if (req.body.address) {
                address = req.body.address;
            }

            var approved = _.filter(bookingService, customer_approval => customer_approval.customer_approval == true);

            var paid_total = booking.payment.paid_total;
            var labour_cost = _.sumBy(bookingService, x => x.labour_cost);
            var part_cost = _.sumBy(bookingService, x => x.part_cost);
            var of_cost = _.sumBy(bookingService, x => x.of_cost);
            var discount_total = _.sumBy(bookingService, x => x.discount);

            // var careager_cash =fun ;deductCarEagerCash


            var careager_cash = booking.payment.careager_cash
            if (req.body.careager_cash && status == 'Confirmed') {
                var deducted = await q.all(fun.deductCarEagerCashManual(parseFloat(req.body.careager_cash), booking._id))
                // console.log("deducted = " + deducted)
                if (deducted) {
                    careager_cash = parseFloat(req.body.careager_cash)
                } else {
                    // console.log("Already deducted max")
                    careager_cash = booking.payment.careager_cash
                }

            }
            // + discount_total;
            var servicesCost = labour_cost + part_cost + of_cost
            // console.log("28471 = servicesCost = " + servicesCost)
            // console.log("28472 = discount_total = " + discount_total)
            // console.log("28473 = pick_up_charges = " + pick_up_charges)
            // console.log("28471 = additionalDiscount = " + additionalDiscount)
            // console.log("28471 = careager_cash = " + careager_cash)
            var payment_total = labour_cost + part_cost + of_cost + discount_total + policy_clause + salvage + pick_up_charges + additionalDiscount;

            var estimate_cost = labour_cost + part_cost + of_cost + policy_clause + salvage + pick_up_charges - (careager_cash + additionalDiscount);

            var due_amount = _.sumBy(approved, x => x.labour_cost) + _.sumBy(approved, x => x.part_cost) + _.sumBy(approved, x => x.of_cost) + policy_clause + salvage + pick_up_charges - (paid_total + careager_cash + additionalDiscount);

            var due = {
                due: Math.ceil(due_amount.toFixed(2))
            }

            var payment = {
                total: parseFloat(payment_total.toFixed(2)),
                estimate_cost: parseFloat(estimate_cost.toFixed(2)),
                careager_cash: careager_cash,
                of_cost: of_cost,
                labour_cost: labour_cost,
                part_cost: part_cost,
                payment_mode: booking.payment.payment_mode,
                payment_status: booking.payment.payment_status,
                discount_type: booking.payment.discount_type,
                coupon: booking.payment.coupon,
                coupon_type: booking.payment.coupon_type,
                discount_by: booking.payment.discount_by,
                discount: booking.payment.discount,
                discount_total: discount_total,
                additionalDiscount: additionalDiscount,
                policy_clause: policy_clause,
                salvage: salvage,
                servicesCost: servicesCost,
                terms: booking.payment.terms,
                due: Math.ceil(due_amount.toFixed(2)),
                pick_up_limit: booking.payment.pick_up_limit,
                pick_up_charges: pick_up_charges,
                paid_total: parseFloat(booking.payment.paid_total),
                discount_applied: booking.payment.discount_applied,
                transaction_id: booking.payment.transaction_id,
                transaction_date: booking.payment.transaction_date,
                transaction_status: booking.payment.transaction_status,
                transaction_response: booking.payment.transaction_response
            };

            var date = new Date(req.body.booking_date)
            // console.log("Date = " + date)
            // console.log("time_slot = " + time_slot)
            date.setUTCHours(15)
            if (req.body.time_slot == "10:30 AM - 12:30 PM") {
                date.setUTCHours(06, 30, 00)   //12:30
                date.setUTCHours(07)   //12:30
                // date.setUTCMinutes(30)
            }
            else if (req.body.time_slot == "12:30 PM - 2:30 PM") {
                // date.setUTCHours(08, 30, 00)
                date.setUTCHours(09)
                // date.setUTCMinutes(30)
            }
            else if (req.body.time_slot == "2:30 PM - 4:30 PM") {
                // date.setUTCHours(10, 30, 00)
                date.setUTCHours(11)
                // date.setUTCMinutes(30)
            }
            else if (req.body.time_slot == "4:30 PM - 6:30 PM") {
                // date.setUTCHours(12, 30, 00)
                date.setUTCHours(13)
                // date.setUTCMinutes(30)
            }
            // console.log("Date = " + date)
            date.setDate(date.getDate() + 1);
            await Booking.findOneAndUpdate({ _id: booking._id }, { $set: { status: status, time_slot: time_slot, date: date, services: bookingService, convenience: req.body.convenience, payment: payment, due: due, advance: req.body.advance, address: address, updated_at: new Date() } }, { new: false }, async function (err, doc) {
                if (err) {
                    // console.log(err)
                }
                else {
                    event.zohoLead(booking._id);
                    // serviceAdd(bookingService, booking._id);
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: status,
                        activity: services_added,
                    }

                    fun.bookingLog(booking._id, activity);

                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: status,
                        activity: labour_log,
                    }
                    fun.bookingLog(booking._id, activity);
                    var activity = {
                        user: loggedInDetails._id,
                        name: loggedInDetails.name,
                        stage: status,
                        activity: parts_log,
                    }

                    fun.bookingLog(booking._id, activity);


                    if (logged_remark) {
                        var activity = {
                            user: loggedInDetails._id,
                            name: loggedInDetails.name,
                            stage: status,
                            activity: logged_remark,
                        }

                        fun.bookingLog(booking._id, activity);
                    }

                    // event.zohoLead(booking._id);

                    var updated = await Booking.findById(booking.id).populate({ path: 'business', select: 'name avatar avatar_address contact_no isCarEager uuid business_info whatsAppChannelId' })
                        .populate({ path: 'user', select: 'name contact_no address _id' })
                        .populate({ path: 'car', select: 'registration_no title' })
                        .exec();


                    if (status == "Confirmed") {
                        // console.log("Sumit Booking vfdgd");
                        await whatsAppEvent.bookingWhatsApp(updated._id)
                        var activity = "Booking";
                        fun.webNotification(activity, updated);

                        await whatsAppEvent.newBookingAdvisor(booking._id);
                        event.bookingStatusMail(booking.user, booking._id, business)

                    }
                    res.status(200).json({
                        responseCode: 200,
                        responseMessage: "Booking Saved...",
                        responseData: updated,
                    });
                }
            }
            );
        } else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {},
            });
        }
    }
}
);
// vinay  code  SALE & PURCHASE
router.get('/get-all-vendor', async (req, res, next) => {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    let search = req.query.search
    let list = []
    let query = {}

    if (search == "undefined") {
        // console.log("if Search query..", req.query.search);

        query = {
            $or: [{ "_id": { $in: list } }]

        }
    } else {
        // console.log("else Search query..", req.query.search);

        query = {
            $or: [
                {
                    "name": { $regex: req.query.search, $options: 'i' }
                },
                {
                    "contact_no": { $regex: req.query.search, $options: 'i' }
                },
                {
                    "business_info.gstin": { $regex: req.query.search, $options: 'i' }
                }
            ]
        }
    }




    let vendors = await BusinessVendor.find({ business: mongoose.Types.ObjectId(business) }).cursor()
        .eachAsync(async (v) => {
            list.push(mongoose.Types.ObjectId(v.vendor))
        })

    // console.log("Vendors....", list, business)

    let getVendors = await User.find(query)
        .limit(20)
        .populate({ path: "vendor" })
        .exec()

    res.json({
        suppliers: getVendors,
        message: "Suppliers Found"
    })

});

router.put("/add/supplier", async (req, res, next) => {
    let quotation = req.body.quotation._id
    let vendor = req.body.vendorId
    let shop_name = req.body.vendorName
    let business = req.headers['business']
    let car = req.body.car
    // console.log("CAr...", car, quotation)


    let getVendor = await VendorOrders.find({ quotation: mongoose.Types.ObjectId(quotation) }).exec()
    let user = await User.findOne({ _id: mongoose.Types.ObjectId(vendor) }).exec()

    let orders = await VendorOrders.find({}).exec()
    let parts = req.body.parts

    for (let i = 0; i < parts.length; i++) {
        parts[i].partsStatus = 'Requested'
        parts[i].amount = ''
    }

    let data = {
        vendor: mongoose.Types.ObjectId(req.body.vendorId),
        business: mongoose.Types.ObjectId(business),
        quotation: mongoose.Types.ObjectId(quotation),
        parts: req.body.parts,
        isQuotationSubmitted: false,
        created_at: new Date(),
        updated_at: new Date(),
        order_link: "",
        booking: req.body.booking,
        shop_name: req.body.vendorName,
        contact: user.contact_no,
        email: user.email,
        status: "Requested",
        order_no: orders.length
    }
    if (car) {

        this.data['car'] = car._id
    }


    let orderSave = await VendorOrders.create(data)
    //let vendorOrder = await VendorOrders.findOneAndUpdate({_id: orderSave._id}, 
    //  {})
    orderSave.order_link = "http://localhost:4200/vendors/orders?id=" + orderSave._id
    await orderSave.save()
    // console.log("Saved order..", orderSave)

    let quotationOrders = await QuotationOrders.findOne({ _id: mongoose.Types.ObjectId(quotation) }).exec()
    quotationOrders.vendors.push(vendor)
    await quotationOrders.save()


    res.json({
        responseMessage: "Supplier added"
    })
});

//sumit for sending invoice..





router.post('/send/invoice/pdf', xAccessToken.token, async function (req, res, next) {
    // console.log(req.body);
    var rules = {
        invoice: 'required',
    };
    var validation = new Validator(req.body, rules);
    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var userLogged = decoded.user;
        var business = req.headers['business'];
        var type = req.body.type
        // console.log(business);
        var invoice = await Invoice.findById(req.body.invoice).exec();

        var invoiceId = invoice._id;
        var loggedInDetails = await User.findById(decoded.user).exec();
        let userDetail = await User.findOne({ _id: invoice.user }).exec();
        if (invoiceId) {
            if (type == "email") {
                event.invoiceMail(userDetail._id, invoice, business);
            } if (type == "whatsapp") {
                whatsAppEvent.invoiceSend(userDetail._id, invoice, business)
            }
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Sent success",
                responseData: {}
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Invoice  not found",
                responseData: {}
            });
        }

    }
})


router.post('/send/performa/pdf', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var type = req.body.type;
        var booking = await Booking.findById(req.body.booking).exec();
        var loggedInDetails = await User.findById(decoded.user).exec();
        if (booking) {
            if (type == 'email') {

                event.sendPerformaMail(booking._id, business);

            }
            if (type == 'whatsapp') {
                whatsAppEvent.performaSendWhatsapp(booking._id, business);
            }
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Peroforma has been sent",
                responseData: {}
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
})
//send payment link by Sumit..
router.post('/send/paymentLink', xAccessToken.token, async function (req, res, next) {
    var rules = {
        booking: 'required',
    };

    var validation = new Validator(req.body, rules);

    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        // console.log(business);
        var booking = await Booking.findById(req.body.booking).exec();
        var loggedInDetails = await User.findById(decoded.user).exec();
        if (booking) {
            if (booking.sub_status == "") {
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { updated_at: new Date() } }, { new: false }, async function (err, doc) {
                    if (err) {
                        res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error Occurred",
                            responseData: err
                        });
                    }
                    else {
                        let userBooking = await User.findOne({ _id: mongoose.Types.ObjectId(booking.user) }).exec()
                        var activity = req.body.activity;
                        if (activity == "email") {
                            // console.log("innn");
                            await event.paymentLink(userBooking, business);
                        } else if (activity == "whatsapp") {
                            // console.log("hlo");
                            whatsAppEvent.qrCodeWhatsApp(userBooking, business);
                        }

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Link has been sent",
                            responseData: {}
                        });
                    }
                });
            }
            else {
                Booking.findOneAndUpdate({ _id: booking._id }, { $set: { updated_at: new Date() } }, { new: false }, async function (err, doc) {

                    if (err) {
                        return res.status(400).json({
                            responseCode: 400,
                            responseMessage: "Error",
                            responseData: err
                        });
                    }
                    else {
                        let userBooking = await User.findOne({ _id: mongoose.Types.ObjectId(booking.user) }).exec()
                        var activity = req.body.activity;
                        if (activity == "email") {
                            // console.log("innn");
                            await event.paymentLink(userBooking, business);
                        }
                        else if (activity == "whatsapp") {
                            // console.log("hlo");
                            whatsAppEvent.qrCodeWhatsApp(userBooking, business);

                        }
                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Link has been sent",
                            responseData: {}
                        });
                    }
                });
            }
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Booking not found",
                responseData: {}
            });
        }
    }
});
router.post('/send/salesInvoice/pdf', xAccessToken.token, async function (req, res, next) {
    var rules = {
        invoice: 'required',
    };
    var validation = new Validator(req.body, rules);
    if (validation.fails()) {
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Validation Error",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var user = decoded.user;
        var business = req.headers['business'];
        var type = req.body.type;
        var stage = req.body.stage;
        var loggedInDetails = await User.findById(user).exec();
        if (stage == 'order') {
            // console.log("ord");
            var invoice = await OrderInvoice.findOne({ 'order': req.body.invoice, 'status': 'Active' }).exec();
        }

        else if (stage == 'sale') {
            // console.log('sle');

            var invoice = await OrderInvoice.findOne({ 'sale': req.body.invoice, 'status': 'Active' }).exec();

        }

        if (invoice.invoice_url !== '') {
            if (type == 'email') {

                event.sendSalesInvoice(invoice);

            }
            if (type == 'whatsapp') {

                whatsAppEvent.SalesInvoiceWhatsapp(invoice);
            }
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Sales Invoice has been sent",
                responseData: {}
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Invoice not found Please Generate Invoice",
                responseData: {}
            });
        }
    }
})
router.put('/booking/outbound/keysAdd', async function (req, res, next) {
    var data = await Booking.updateMany({}, { $set: { outbound_lead: null, isOutbound: false } }).exec();
    console.log("Data = " + JSON.stringify(data, null, '\t'))
    res.status(200).json({
        responseCode: 200,
        responseMessage: "Sales Invoice has been sent",
        responseData: data
    });

})

//sumit...
router.post('/send/eParchi/pdf', xAccessToken.token, async function (req, res, next) {
    // var rules = {
    //     business: 'required',
    // };

    //var validation = new Validator(req.body, rules);

    // if (validation.fails()) {
    //     res.status(422).json({
    //         responseCode: 422,
    //         responseMessage: "Validation Error",
    //         responseData: {
    //             res: validation.errors.all()
    //         }
    //     })
    // }
    // else {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var type = req.body.type;
    var parchi = await Parchi.findOne({ _id: mongoose.Types.ObjectId(req.body.parchi), status: 'Open' }).exec();
    var loggedInDetails = await User.findById(decoded.user).exec();
    if (parchi) {
        if (parchi.parchi_url) {

            if (type == 'email') {

                event.sendParchiMail(parchi._id, business);

            }
            if (type == 'whatsapp') {

                //console.log("doneeee");
                whatsAppEvent.parchiSendWhatsapp(parchi._id, business);

            }
            res.status(200).json({
                responseCode: 200,
                responseMessage: "Parchi has been sent",
                responseData: {}
            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: " Parchi not found",
                responseData: {}
            });

        }
    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Business not found",
            responseData: {}
        });
    }
    // }
})
router.post('/gstr3b/report', xAccessToken.token, async function (req, res, next) {
    console.time('time');
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    // var business = '5bfec47ef651033d1c99fbca'
    var business = req.headers['business'];
    console.log("vvv" + business);
    var from = req.body.from;
    var to = req.body.to
    let date = new Date();
    //from = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    //to = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    var loggedInDetails = await User.findById(decoded.user).exec();
    console.log("log-------" + JSON.stringify(from));
    console.log("log--------" + JSON.stringify(to));
    console.log('date' + date.toString());
    console.log("lenght" + Object.keys(from).length);

    var purchase_amount_total = 0;
    var taxArr = [];
    var invoiceTaxesParts = [];
    var invoiceTaxesLabour = [];
    var invoiceTaxesFitting = [];
    var data = [];
    var purchaseTotal = []
    var sum_of_invoice = 0;
    var sum_of_sales = 0;
    var sumIGST = 0;
    var taxTotalGST = 0;
    var taxTotalIGST = 0;
    var taxTotalGSTLabour = 0;
    var taxTotalIGSTLabour = 0;
    var taxTotalIGSTFitting = 0;
    var taxTotalGSTFitting = 0;
    var purchaseTaxGst = 0;
    var purchaseTaxIgst = 0;
    var totalPurchase = 0;
    var sale_tax_gst = 0;
    var sale_tax_igst = 0;
    var sale_amount = 0;
    //sumit date 17dec
    var totalPartsAmount = 0;
    var totalIgstAmount = 0;
    // totalPartsAmount  = 0;
    var baseAmount = 0;
    var totalTax = 0;
    var totalAmountLabour = 0;
    var totalAmountOpenFitting = 0;
    //orderline
    order_line_total = 0;
    orderline_tax_gst = 0;
    orderline_tax_igst = 0;


    if (loggedInDetails) {
        if (Object.keys(from).length !== 0) {
            var countInvoice = await Invoice.find({ business: mongoose.Types.ObjectId(business), status: 'Active' }).count().exec()

            var countOrderLine = await OrderLine.find({ business: mongoose.Types.ObjectId(business), issued: true }).count().exec()


            await OrderLine.find({ business: mongoose.Types.ObjectId(business), issued: true, date: { $gte: from, $lte: to } }).cursor().eachAsync((order) => {
                order_line_total += order.amount
                var tax_type = order.tax



                const [taxvalue, type] = tax_type.split(' ');

                if (type == 'GST') {
                    orderline_tax_gst += order.tax_amount;

                }
                if (type == 'IGST') {

                    orderline_tax_igst += order.tax_amount;
                }


            });

            var countSale = await Sales.find({ business: mongoose.Types.ObjectId(business), status: 'Open' }).count().exec()
            await Sales.find({ business: mongoose.Types.ObjectId(business), status: 'Open', date: { $gte: from, $lte: to } }).cursor().eachAsync((sales) => {

                for (var x = 0; x < sales.parts.length; x++) {
                    // console.log("ssss");
                    // console.log("igst",sales.parts[x].tax_amount);
                    // if(sales.parts.length !== 0){
                    sale_amount += sales.parts[x].amount

                    var tax_type = sales.parts[x].tax
                    // console.log(sales.parts[x].tax_amount);
                    const [taxvalue, type] = tax_type.split(' ');
                    if (type == 'GST') {
                        sale_tax_gst += sales.parts[x].tax_amount;
                        //console.log("gst",sales.parts[x].tax_amount);
                    }
                    if (type == 'IGST') {
                        sale_tax_igst += sales.parts[x].tax_amount;
                        // console.log("igst",sales.parts[x].tax_amount);
                    }
                    // }
                }

            });
            //  var businessDetail= await User.findOne({_id:mongoose.Types.ObjectId(business)}).exec();,date: { $gte: from, $lte: to }
            await Invoice.find({ business: mongoose.Types.ObjectId(business), status: 'Active', date: { $gte: from, $lte: to } }).cursor().eachAsync((i) => {
                sum_of_invoice += i.due.due;

                for (var a = 0; a < i.services.length; a++) {

                    for (var b = 0; b < i.services[a].parts.length; b++) {
                        if (i.services[a].parts.length !== 0) {
                            var igst = i.services[a].parts[b].tax
                            // totalPartsAmount += i.services[a].parts[b].amount
                            //taxTotalGST +=i.services[a].parts[b].tax_amount
                            totalPartsAmount += i.services[a].parts[b].amount
                            baseAmount += i.services[a].parts[b].base

                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].parts[b].tax_amount
                            if (type == 'GST') {
                                //console.log(type);
                                taxTotalGST += i.services[a].parts[b].tax_amount
                                //totalGstAmount += i.services[a].parts[b].amount
                                // baseAmount+= i.services[a].parts[b].base
                            }
                            if (type == 'IGST') {
                                taxTotalIGST += i.services[a].parts[b].tax_amount
                                //totalIgstAmount += i.services[a].parts[b].amount

                            }
                        }
                    }
                    for (var b = 0; b < i.services[a].labour.length; b++) {
                        if (i.services[a].labour.length !== 0) {
                            var igst = i.services[a].labour[b].tax
                            totalAmountLabour += i.services[a].labour[b].amount
                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].labour[b].tax_amount
                            if (type == 'GST') {

                                //console.log(type);

                                taxTotalGSTLabour += i.services[a].labour[b].tax_amount

                            }
                            if (type == 'IGST') {
                                taxTotalIGSTLabour += i.services[a].labour[b].tax_amount

                            }
                        }

                    }

                    for (var b = 0; b < i.services[a].opening_fitting.length; b++) {
                        if (i.services[a].opening_fitting.length !== 0) {
                            var igst = i.services[a].opening_fitting[b].tax
                            totalAmountOpenFitting += i.services[a].opening_fitting[b].amount
                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].opening_fitting[b].tax_amount
                            if (type == 'GST') {
                                //console.log(type);
                                taxTotalGSTFitting += i.services[a].opening_fitting[b].tax_amount

                            }
                            if (type == 'IGST') {
                                taxTotalIGSTFitting += i.services[a].opening_fitting[b].tax_amount

                            }
                        }

                    }
                }


            });

            var total_of_invoice_amount = 0;
            var gst_of_invoice = 0;
            var igst_of_invoice = 0;

            //   smtotal+=baseAmount+taxTotalGST
            total_of_invoice_amount += totalPartsAmount + totalAmountLabour + totalAmountOpenFitting
            gst_of_invoice += taxTotalGST + taxTotalGSTLabour + taxTotalGSTFitting
            igst_of_invoice += taxTotalIGST + taxTotalIGSTLabour + taxTotalIGSTFitting


            //console.log('vale'+  sum_of_invoice);
            console.log('tax_valuegst ' + gst_of_invoice.toFixed(2));

            console.log('total_amount ' + total_of_invoice_amount.toFixed(2));

            console.log('vale_igst ' + igst_of_invoice.toFixed(2));
            console.log('salesAmont ', sale_amount.toFixed(2));
            console.log('gstamount ' + sale_tax_gst);
            console.log('igstamnt ' + sale_tax_igst);
            console.log("order_lineTotal ", order_line_total.toFixed(2));
            console.log('orderigst ' + orderline_tax_igst);
            console.log('ordergsr ' + orderline_tax_gst);
            // console.log('vale'+ taxTotalGSTLabour);
            // console.log(taxTotalIGSTFitting);
            // console.log(taxTotalGSTFitting);

            //console.log(totalTax);
            // console.log(allt);
            var countPurchase = await Purchase.find({ business: mongoose.Types.ObjectId(business), status: 'Completed' }).count().exec()
            await Purchase.find({ business: mongoose.Types.ObjectId(business), status: 'Completed', date: { $gte: from, $lte: to } }).cursor().eachAsync((p) => {
                //console.log('pp'+p.total);


                for (var i = 0; i < p.items.length; i++) {
                    if (p.items.length !== 0) {
                        purchase_amount_total += p.items[i].amount
                        if (p.items[i].tax_amount == undefined) {
                            p.items[i].tax_amount = 0
                        }
                        else {
                            //totalPurchase += p.items[i].tax_amount
                            var tax_type = p.items[i].tax

                            const [taxvalue, type] = tax_type.split(' ');
                            if (type == 'GST') {
                                purchaseTaxGst += p.items[i].tax_amount
                            }
                            if (type == 'IGST') {
                                purchaseTaxIgst += p.items[i].tax_amount;

                            }
                        }
                    }
                }
            });

            var exportTotal = 0;
            var exportGst = 0;
            var exportIgst = 0;

            exportTotal += order_line_total + total_of_invoice_amount + sale_amount;
            exportGst += gst_of_invoice + orderline_tax_gst + sale_tax_gst;
            exportIgst += orderline_tax_igst + igst_of_invoice + sale_tax_igst;

            half_value_gst = exportGst / 2;

            data.push({
                // tax_parts_gst:taxTotalGST.toFixed(2),
                // tax_parts_igst:taxTotalIGST.toFixed(2),
                // tax_labour_gst:taxTotalGSTLabour.toFixed(2),
                // tax_labour_igst:taxTotalIGSTLabour.toFixed(2), 
                // tax_fittng_gst:taxTotalGSTFitting.toFixed(2),
                // tax_fittng_igst:taxTotalIGSTFitting.toFixed(2),
                sales_total: sale_amount.toFixed(2),
                purchase_total: purchase_amount_total.toFixed(2),
                purchase_tax_gstTotal: purchaseTaxGst.toFixed(2),
                purchase_tax_igstTotal: purchaseTaxIgst.toFixed(2),
                sale_tax_gst: sale_tax_gst.toFixed(2),
                sale_tax_igst: sale_tax_igst.toFixed(2),
                exportTotal: exportTotal.toFixed(2),
                exportGst: half_value_gst.toFixed(2),
                exportIgst: exportIgst.toFixed(2),


            });
            // console.log( totalPurchase);
            //  console.log('pur'+purchaseTaxGst);
            // console.log('pur'+ purchaseTaxIgst);
            //  console.log( purchaseTaxIgst +purchaseTaxGst);
            //console.log('sale'+sale_tax_igst);


            res.status(200).json({
                responseCode: 200,
                responseMessage: 'GSTR3B Report Generated ',
                responseInfo: {
                    totalResult: {
                        invoice_count: countInvoice,
                        orderlie: countOrderLine,
                        purchase: countPurchase,
                        sales: countSale
                    }
                },
                responseData: data,

            });
        }

        else {
            // console.log('sssssin');
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Dates are Required",
                responseData: {}
            });
        }

    }

    else {

        res.status(400).json({
            responseCode: 400,
            responseMessage: "Business not found",
            responseData: {}
        });
    }

    console.timeEnd('time');
});

router.post('/gstr2/report', xAccessToken.token, async function (req, res, next) {

    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    var purchaseSum = 0;
    var purchaseTaxGst = 0;
    var purchaseTaxIgst = 0;
    var data = []
    var pData = []
    var purchaseData = []
    var duration = {}
    var totalPurchaseAmount = 0;
    var baseTotal = 0;
    var gstData = []
    var igstData = []
    // let startDate = req.query.from
    // let endDate = req.query.to
    // let brand = req.query.brand

    // console.l.log("Total Result  = " + totalResult)
    var from = req.body.from;
    var to = req.body.to
    let date = new Date();

    // if (req.query.date) {
    //     var date = new Date();

    //     //from 10-05-21to13-07-21
    //     if (req.query.dateType == "range") {
    //         var query = req.query.date;
    //         var ret = query.split("to");
    //         var from = new Date(ret[0]);
    //         var to = new Date(ret[1]);
    //     }

    // }

    //console.log("vvv"+business);
    var loggedInDetails = await User.findById(decoded.user).exec();

    if (loggedInDetails) {
        if (Object.keys(from).length !== 0) {
            await Purchase.find({ business: mongoose.Types.ObjectId(business), status: 'Completed', date: { $gte: from, $lte: to } }).cursor().eachAsync((p) => {
                //console.log('pp'+p.total);
                purchaseSum += p.total

                for (var i = 0; i < p.items.length; i++) {
                    if (p.items.length !== 0) {
                        if (p.items[i].tax_amount == undefined) {
                            p.items[i].tax_amount = 0
                        }
                        else {
                            totalPurchaseAmount += p.items[i].amount;
                            baseTotal += p.items[i].base;
                            purchaseData.push({
                                tax_amount: p.items[i].tax_amount,
                                date: p.date,
                                due: p.due,
                                tax_rate: p.items[i].tax_rate,
                                tax: p.items[i].tax,
                                rate: p.items[i].rate
                            })

                            var tax_type = p.items[i].tax

                            const [taxvalue, type] = tax_type.split(' ');
                            if (type == 'GST') {
                                purchaseTaxGst += p.items[i].tax_amount
                                gstData.push({
                                    tax_amount: parseFloat(p.items[i].tax_amount / 2).toFixed(2),
                                    amount: parseFloat(p.items[i].amount).toFixed(2),
                                    base: parseFloat(p.items[i].base).toFixed(2),
                                    date: moment(p.date).format('DD-MM-YYYY'),

                                    //due: p.due.toFixed(2),
                                    tax_rate: p.items[i].tax_rate,
                                    tax: p.items[i].tax,
                                    // total: p.total
                                })

                            }

                            if (type == 'IGST') {
                                purchaseTaxIgst += p.items[i].tax_amount;
                                igstData.push({
                                    tax_amount: parseFloat(p.items[i].tax_amount).toFixed(2),
                                    amount: parseFloat(p.items[i].amount).toFixed(2),
                                    base: parseFloat(p.items[i].base).toFixed(2),
                                    date: moment(p.date).format('MM-DD-YYYY'),

                                    //due: p.due.toFixed(2),
                                    tax_rate: p.items[i].tax_rate,
                                    tax: p.items[i].tax,
                                    // total: p.total
                                })

                            }

                        }
                    }
                }

            });


            var duration = {
                from: from,
                to: to
            };
            data.push({
                // purcahseTotal: purchaseSum.toFixed(),
                purchase_tax_gst: parseFloat(purchaseTaxGst / 2).toFixed(),
                purchase_tax_igst: purchaseTaxIgst.toFixed(2),
                base_total: baseTotal.toFixed(2),
                total_amount: totalPurchaseAmount.toFixed(2)

            })


            res.status(200).json({
                responseCode: 200,
                responseMessage: 'GSTR2 Report Generated ',
                responseInfo: {
                    totalResult: ''
                },
                responseData: { igstData, gstData, data, loggedInDetails }

            });
        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: 'Dates are Required',
                responseInfo: {
                },


            });

        }

    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: 'Business not Found',
            responseInfo: {
            },


        });

    }

});

router.post('/report/gstr1', async (req, res, next) => {
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];
    //var business = '5bfec47ef651033d1c99fbca'
    var order_line_total = 0;
    var invoiceArrGst = []
    var orderlineArrGst = []
    var orderlineArrIgst = []
    var saleArrGst = []
    var saleArrIgst = []
    var invoiceArrIgst = []
    var partsArrGst = []
    var partsArrIgst = []
    var labourArrGst = []
    var labourArrIgst = []
    var fittingArrGst = []
    var fittingArrIgst = []


    var from = req.body.from;
    var to = req.body.to
    let date = new Date();
    //from = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    //to = new Date(date.getFullYear(), date.getMonth(), date.getDate())
    var loggedInDetails = await User.findById(decoded.user).exec();
    console.log("log-------" + from);
    console.log("log--------" + to);
    if (loggedInDetails) {
        if (Object.keys(from).length !== 0) {

            await OrderLine.find({ business: mongoose.Types.ObjectId(business), status: 'Active', date: { $gte: from, $lte: to } }).cursor().eachAsync((o) => {
                order_line_total += o.amount

                var tax_type = order.tax

                const [taxvalue, type] = tax_type.split(' ');

                if (type == 'GST') {
                    orderlineArrGst.push({
                        date: moment(o.date).format('MM-DD-YYYY'),
                        tax_rate: o.tax_rate,
                        base: o.base,
                        amount: o.amount,
                        tax_amount: o.tax_amount
                    })


                }
                if (type == 'IGST') {

                    orderlineArrIgst.push({
                        date: moment(o.date).format('MM-DD-YYYY'),
                        tax_rate: o.tax_rate,
                        base: o.base,
                        amount: o.amount,
                        tax_amount: o.tax_amount


                    })
                }


            });
            await Invoice.find({ business: mongoose.Types.ObjectId(business), status: 'Active', date: { $gte: from, $lte: to } }).cursor().eachAsync((i) => {



                for (var a = 0; a < i.services.length; a++) {

                    for (var b = 0; b < i.services[a].parts.length; b++) {
                        if (i.services[a].parts.length !== 0) {
                            var igst = i.services[a].parts[b].tax
                            // totalPartsAmount += i.services[a].parts[b].amount
                            //taxTotalGST +=i.services[a].parts[b].tax_amount

                            // baseAmount+=i.services[a].parts[b].base
                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].parts[b].tax_amount
                            if (type == 'GST') {

                                //console.log(type);
                                partsArrGst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].parts[b].tax_rate,
                                    base: i.services[a].parts[b].base,
                                    amount: i.services[a].parts[b].amount,
                                    tax_amount: i.services[a].parts[b].tax_amount


                                })
                                //taxTotalGST += i.services[a].parts[b].tax_amount
                                //totalGstAmount += i.services[a].parts[b].amount
                                // baseAmount+= i.services[a].parts[b].base
                            }
                            if (type == 'IGST') {
                                // taxTotalIGST += i.services[a].parts[b].tax_amount
                                //totalIgstAmount += i.services[a].parts[b].amount
                                partsArrIgst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].parts[b].tax_rate,
                                    base: i.services[a].parts[b].base,
                                    amount: i.services[a].parts[b].amount,
                                    tax_amount: i.services[a].parts[b].tax_amount

                                })
                            }
                        }
                    }
                    for (var b = 0; b < i.services[a].labour.length; b++) {
                        if (i.services[a].labour.length !== 0) {
                            var igst = i.services[a].labour[b].tax
                            //totalAmountLabour += i.services[a].labour[b].amount
                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].labour[b].tax_amount
                            if (type == 'GST') {
                                // invoice_total_labour +=i.services[a].labour[b].amount
                                labourArrGst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].labour[b].tax_rate,
                                    base: i.services[a].labour[b].base,
                                    amount: i.services[a].labour[b].amount,
                                    tax_amount: i.services[a].labour[b].tax_amount

                                })

                            }
                            if (type == 'IGST') {
                                //taxTotalIGSTLabour += i.services[a].labour[b].tax_amount
                                labourArrIgst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].labour[b].tax_rate,
                                    base: i.services[a].labour[b].base,
                                    amount: i.services[a].labour[b].amount,
                                    tax_amount: i.services[a].labour[b].tax_amount
                                })

                            }
                        }

                    }

                    for (var b = 0; b < i.services[a].opening_fitting.length; b++) {
                        if (i.services[a].opening_fitting.length !== 0) {

                            var igst = i.services[a].opening_fitting[b].tax
                            //totalAmountOpenFitting += i.services[a].opening_fitting[b].amount
                            const [taxvalue, type] = igst.split(' ');
                            //console.log( type);
                            //totalTax += i.services[a].opening_fitting[b].tax_amount
                            if (type == 'GST') {
                                // invoice_total_labour +=i.services[a].labour[b].amount
                                //console.log(type);
                                //taxTotalGSTFitting += i.services[a].opening_fitting[b].tax_amount
                                fittingArrGst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].opening_fitting[b].tax_rate,
                                    base: i.services[a].opening_fitting[b].base,
                                    amount: i.services[a].opening_fitting[b].amount,
                                    tax_amount: i.services[a].opening_fitting[b].tax_amount

                                })

                            }
                            if (type == 'IGST') {
                                //taxTotalIGSTFitting += i.services[a].opening_fitting[b].tax_amount
                                fittingArrIgst.push({
                                    date: moment(i.date).format('MM-DD-YYYY'),
                                    tax_rate: i.services[a].opening_fitting[b].tax_rate,
                                    base: i.services[a].opening_fitting[b].base,
                                    amount: i.services[a].opening_fitting[b].amount,
                                    tax_amount: i.services[a].opening_fitting[b].tax_amount
                                })

                            }
                        }

                    }
                }


            });





            await Sales.find({ business: mongoose.Types.ObjectId(business), status: 'Active', date: { $gte: from, $lte: to } }).cursor().eachAsync((sales) => {

                for (var x = 0; x < sales.parts.length; x++) {
                    // console.log("ssss");
                    // console.log("igst",sales.parts[x].tax_amount);
                    // if(sales.parts.length !== 0){
                    sale_amount += sales.parts[x].amount

                    var tax_type = sales.parts[x].tax
                    // console.log(sales.parts[x].tax_amount);
                    const [taxvalue, type] = tax_type.split(' ');
                    if (type == 'GST') {
                        saleArrGst.push({
                            date: moment(sales.date).format('MM-DD-YYYY'),
                            tax_rate: sales.parts[x].tax_rate,
                            base: sales.parts[x].base,
                            tax: sales.parts[x].tax,
                            amount: sales.parts[x].amount,
                            tax_amount: sales.parts[x].tax_amount
                        })

                    }
                    if (type == 'IGST') {
                        saleArrIgst.push({
                            date: moment(sales.date).format('MM-DD-YYYY'),
                            tax_rate: sales.parts[x].tax_rate,
                            base: sales.parts[x].base,
                            tax: sales.parts[x].tax,
                            amount: sales.parts[x].amount,
                            tax_amount: sales.parts[x].tax_amount
                        })

                    }
                    // }
                }

            });

            invoiceArrGst = [...partsArrGst, ...labourArrGst, ...fittingArrGst, ...saleArrGst, ...orderlineArrGst]
            invoiceArrIgst = [...partsArrIgst, ...labourArrIgst, ...fittingArrIgst, ...orderlineArrIgst, ...saleArrIgst]
            var invoice_arrgst_amount = 0;
            var invoice_arrigst_amount = 0;
            var invoice_arrgst_taxtotal = 0;
            var invoice_arrigst_taxtotal = 0;
            var invoice_arrgst_base = 0;
            var invoice_arrigst_base = 0;
            var totalResults = []

            for (i = 0; i < invoiceArrGst.length; i++) {
                invoice_arrgst_amount += invoiceArrGst[i].amount
                invoice_arrgst_taxtotal += invoiceArrGst[i].tax_amount
                invoice_arrgst_base += invoiceArrGst[i].base

            }
            for (i = 0; i < invoiceArrIgst.length; i++) {
                invoice_arrigst_amount += invoiceArrIgst[i].amount
                invoice_arrigst_taxtotal += invoiceArrIgst[i].tax_amount
                invoice_arrigst_base += invoiceArrIgst[i].base

            }
            amountTotalArr = 0;
            baseTotalArr = 0;
            amountTotalArr += invoice_arrgst_amount + invoice_arrigst_amount
            baseTotalArr += invoice_arrgst_base + invoice_arrigst_base


            totalResults.push({
                amount_total: amountTotalArr.toFixed(2),
                base_total: baseTotalArr.toFixed(2),
                gst_total: invoice_arrgst_taxtotal.toFixed(2),
                igst_total: invoice_arrigst_taxtotal.toFixed(2)
            })
            // var all_amount_total= 0;

            //  all_amount_total+=  invoice_total_amount +

            res.status(200).json({
                responseCode: 200,
                responseMessage: "Business not found",
                responseData: { loggedInDetails, invoiceArrGst, invoiceArrIgst, totalResults }
            });
        }
        else {

            res.status(400).json({
                responseCode: 400,
                responseMessage: "Dates are Required",
                responseData: {}
            });

        }


    }

    else {


        res.status(400).json({
            responseCode: 400,
            responseMessage: "Business not found",
            responseData: {}
        });
    }

});

router.post('/generate/payment-receipt', xAccessToken.token, async function (req, res, next) {
    var token = req.headers['x-access-token'];
    var business = req.headers['business'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;

    // var userData = req.body.userData
    var transactionId = req.body.transactionId;
    var id = req.body.id;
    // var business = '5bfec47ef651033d1c99fbca'



    //  // console.log(business);
    // // var userInfo = await User.findOne({ _id: mongoose.Types.ObjectId(req.body.user) })
    // // .populate({ path: 'user', select: 'name contact_no address _id' })
    //  //.exec();
    //  var loggedInDetails = await User.findById(decoded.user).exec();

    //var data = req.body.data

    //console.log(JSON.stringify( userData));
    var userDetails = await User.findOne({ _id: mongoose.Types.ObjectId(id) }).exec();
    var paymentDetails = await TransactionLog.findOne({ _id: mongoose.Types.ObjectId(transactionId) }).exec();


    if (userDetails) {
        if (paymentDetails) {
            await fun.paymentPdf(userDetails, paymentDetails, business)


            res.status(200).json({
                responseCode: 200,
                responseMessage: "File generated Successfully",
                responseData: { userDetails, paymentDetails }
            });

        }
        else {
            res.status(400).json({
                responseCode: 400,
                responseMessage: " Transaction not found",
                responseData: {}
            });
        }

    }
    else {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Business not found",
            responseData: {}
        });
    }

});



router.post('/send/whatsapp-payment-reciept', xAccessToken.token, async function (req, res, next) {

    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var user = decoded.user;
    var business = req.headers['business'];


    var id = req.body.id
    console.log("iddd" + id);
    var transactionId = req.body.transactionId
    var user = await User.findOne({ _id: mongoose.Types.ObjectId(id) }).exec();
    var paymentDetails = await TransactionLog.findOne({ _id: mongoose.Types.ObjectId(transactionId) }).exec();
    if (user) {
        if (paymentDetails.transaction_url) {
            //console.log('done');

            whatsAppEvent.paymentRecieptWhatsApp(user, paymentDetails);

            res.status(200).json({
                responseCode: 200,
                responseMessage: "File has been sent",
                responseData: { paymentDetails }
            });


        }
        res.status(400).json({
            responseCode: 400,
            responseMessage: "File not Found, File can't share",
            responseData: {}
        });

    }
    else {

        res.status(400).json({
            responseCode: 400,
            responseMessage: "User not found, File can't share",
            responseData: {}
        });
    }







})
router.post('/booking/payment/add', xAccessToken.token, async function (req, res, next) {
    businessFunctions.logs("INFO: /sale/payment/add Api Called from sales.js," + " " + "Request Headers:" + JSON.stringify(req.headers) + ", " + "Request Body:" + JSON.stringify(req.body));
    var rules = {
        booking: 'required',
        amount: 'required',
        date: 'required',
    };
    var validation = new Validator(req.body, rules);
    if (validation.fails()) {
        if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
            businessFunctions.logs("ERROR: Validation failed, Amount & Date are mandatory.");
        }
        res.status(422).json({
            responseCode: 422,
            responseMessage: "Amount & Date are mandatory",
            responseData: {
                res: validation.errors.all()
            }
        })
    }
    else {
        var business = req.headers['business'];
        var token = req.headers['x-access-token'];
        var secret = config.secret;
        var decoded = jwt.verify(token, secret);
        var data = [];
        var loggedInDetails = await User.findById(decoded.user).exec();

        if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
            businessFunctions.logs("DEBUG: Validated successfully and Fatching Sale details, SaleId:" + req.body.sale);
        }
        var sale = await Booking.findOne({ _id: req.body.sale }).exec();
        if (sale) {
            var recieved = parseFloat(req.body.amount);
            var date = new Date();
            var payment_mode = req.body.payment_mode;
            var transaction_id = req.body.transaction_id;
            var due_amount = 0;
            if (sale.due) {
                if (sale.due.due) {
                    due_amount = sale.due.due;
                }
            }
            if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                businessFunctions.logs("DEBUG: Creating Transaction logs, SaleId:" + sale._id);
            }
            await TransactionLog.create({
                user: sale.user,
                activity: "Sales",
                business: business,
                source: sale._id,
                paid_total: recieved,
                total: sale.payment.total,
                due: due_amount,
                payment_status: "Success",
                payment_mode: payment_mode,
                transaction_id: transaction_id,
                transaction_date: new Date(req.body.date).toISOString(),
                transaction_status: "Success",
                transaction_response: "Success",
                created_at: new Date(),
                updated_at: new Date(),
            }).then(async function (transaction) {

                var data = {
                    user: sale.user,
                    business: business,
                    status: 'Payment-In',
                    type: 'Payment-In',
                    paid_by: 'Customer',
                    activity: 'Payment-In',
                    source: sale.user,
                    bill_id: 'N/A',
                    bill_amount: recieved,
                    transaction_amount: recieved,
                    balance: recieved,
                    total: recieved,
                    paid_total: 0,
                    due: 0,
                    payment_status: "Success",
                    payment_mode: payment_mode,
                    received_by: loggedInDetails.name,
                    transaction_id: transaction_id,
                    transaction_date: new Date(req.body.date),
                    transaction_status: 'Success',
                    transaction_response: 'Success',
                    transaction_type: 'Payment-In',
                    remark: req.body.remark
                }
                if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                    businessFunctions.logs("DEBUG: businessFunctions.addTransaction(data) function called from businessFunction.js.");
                }
                var valid = q.all(businessFunctions.addTransaction(data));

                var convenience_charges = 0;
                if (sale.payment.convenience_charges) {
                    convenience_charges = Math.ceil(sale.payment.convenience_charges)
                }

                // var items = await OrderLine.find({ order: order._id, business: business, status: { $nin: ['Cancelled'] } }).exec();
                var amount = _.sumBy(sale.parts, x => x.amount);
                var discount = _.sumBy(sale.parts, x => x.discount_total);
                var total = amount + discount + convenience_charges;

                var transaction_log = await TransactionLog.find({ source: sale._id, payment_status: "Success", }).exec();

                var paid_total = _.sumBy(transaction_log, x => x.paid_total);

                var due = Math.ceil(amount.toFixed(2)) + Math.ceil(convenience_charges) - paid_total;

                var data = {
                    updated_at: date,
                    "payment.paid_total": paid_total,
                    "payment.amount": parseFloat(amount.toFixed(2)),
                    "payment.discount_total": parseFloat(discount.toFixed(2)),
                    "payment.total": parseFloat(total.toFixed(2)),
                    "payment.order_discount": parseFloat(sale.payment.order_discount),
                    due: {
                        due: Math.ceil(amount) + convenience_charges - paid_total - (parseFloat(sale.payment.order_discount))
                    }
                }

                var orderInvoice = await OrderInvoice.findOne({ sale: sale._id, business: business }).exec();
                if (orderInvoice) {
                    OrderInvoice.findOneAndUpdate({ sale: sale._id, business: business }, { $set: data }, { new: false }, async function (err, doc) {
                        if (err) {
                            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                                businessFunctions.logs("ERROR: Error Occured while updating invoice details for the sale, SaleId:" + sale._id + ", " + "User:" + loggedInDetails.name);
                            }
                            return res.status(422).json({
                                responseCode: 422,
                                responseMessage: "Server Error",
                                responseData: err
                            });
                        }
                    })
                }

                if (Log_Level == 4 || Log_Level == 6 || Log_Level == 8 || Log_Level == 10 || Log_Level == 0) {
                    businessFunctions.logs("DEBUG: Updating sale details for the sale order, SaleId:" + sale._id);
                }
                await Sales.findOneAndUpdate({ _id: sale._id }, { $set: data }, { new: false }, async function (err, doc) {
                    if (err) {
                        if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                            businessFunctions.logs("ERROR: Error Occured while updating sale details for the sale, SaleId:" + sale._id + ", " + "User:" + loggedInDetails.name);
                        }
                        res.status(422).json({
                            responseCode: 422,
                            responseMessage: "Server Error",
                            responseData: err
                        });
                    }
                    else {

                        var updated = await Sales.findOne({ _id: sale._id, business: business }).exec();
                        var activity = {
                            business: business,
                            activity_by: loggedInDetails.name,
                            activity: "Payment Recieved: " + recieved,
                            remark: "Payment Recieved",
                            created_at: new Date(),
                        }
                        businessFunctions.salesLogs(sale._id, activity);

                        res.status(200).json({
                            responseCode: 200,
                            responseMessage: "Payment Recieved",
                            responseData: {
                                item: {},
                                payment: transaction,
                                due: updated.due,
                            }
                        });
                        if (Log_Level == 3 || Log_Level == 7 || Log_Level == 9 || Log_Level == 10 || Log_Level == 0) {
                            businessFunctions.logs("INFO: Payment Received Successfully for the sale order, SaleId:" + sale._id + ", " + "Amount:" + req.body.amount + ", " + "User:" + loggedInDetails.name);
                        }
                    }
                });
            });
        }
        else {
            if (Log_Level == 1 || Log_Level == 5 || Log_Level == 6 || Log_Level == 7 || Log_Level == 0) {
                businessFunctions.logs("ERROR: Order not found for the given saleId, SaleId:" + req.body.sale + ", " + "User:" + loggedInDetails.name);
            }
            res.status(400).json({
                responseCode: 400,
                responseMessage: "Order not found",
                responseData: {}
            });
        }
    }
});

router.get('/services/history', xAccessToken.token, async function (req, res) {
    var business = req.headers['business'];
    var token = req.headers['x-access-token'];
    var secret = config.secret;
    var decoded = jwt.verify(token, secret);
    var data = [];

    let bookingService = [];
    const tax_type = "GST";
    let invoice = await Invoice.find({ user: req.query.user, car: req.query.car, business: business, status: "Active" })
        .cursor().eachAsync(async (invoice) => {
            let services = invoice.services;
            for (var i = 0; i < services.length; i++) {
                var part = [];
                var labours = [];
                var opening_fitting = [];

                var part_list = services[i].parts;
                var labour_list = services[i].labour;
                var of_list = services[i].opening_fitting;

                if (part_list) {
                    for (var p = 0; p < part_list.length; p++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ rate: part_list[p].tax_rate, type: tax_type }).exec();
                        var tax = [];
                        var rate = part_list[p].rate;
                        var amount = (parseFloat(part_list[p].rate) * parseFloat(part_list[p].quantity));
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;

                        var dep = 0;

                        if (part_list[p].discount) {
                            discount_total = part_list[p].discount;
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }


                        if (part_list[p].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t; parseFloat
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            total = total + amount;
                        }

                        if (part_list[p].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }

                            //base = base - discount_total - dep; 
                            total = total + amount;
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        var tax_details = {
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        }

                        if (parseFloat(part_list[p].customer_dep) == 0 && parseFloat(part_list[p].insurance_dep) == 0) {
                            var customer_dep = 100;
                            var insurance_dep = 0;
                        }
                        else {
                            var customer_dep = parseFloat(part_list[p].customer_dep);
                            var insurance_dep = parseFloat(part_list[p].insurance_dep);
                        }

                        part.push({
                            _id: part_list[p]._id,
                            item: part_list[p].item,
                            source: part_list[p].source,
                            hsn_sac: part_list[p].hsn_sac,
                            part_no: part_list[p].part_no,
                            rate: parseFloat(part_list[p].rate),
                            quantity: parseFloat(part_list[p].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: total,
                            discount: part_list[p].discount,
                            issued: part_list[p].issued,
                            customer_dep: customer_dep,
                            insurance_dep: insurance_dep,
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: part_list[p].amount_is_tax,
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });
                    }
                }

                if (labour_list) {
                    for (var l = 0; l < labour_list.length; l++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ rate: labour_list[l].tax_rate, type: tax_type }).exec();
                        var tax = [];
                        var rate = labour_list[l].rate;
                        var amount = parseFloat(labour_list[l].rate) * parseFloat(labour_list[l].quantity);
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;
                        var dep = 0;

                        if (labour_list[l].discount) {
                            discount_total = labour_list[l].discount;
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }


                        if (labour_list[l].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t; parseFloat
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            //total = total+amount;
                        }

                        if (labour_list[l].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax,
                                            tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }

                            //base = base - discount_total - dep; 


                            total = total + amount;
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        };

                        labours.push({
                            _id: labour_list[l]._id,
                            item: labour_list[l].item,
                            source: labour_list[l].source,
                            rate: parseFloat(labour_list[l].rate),
                            quantity: parseFloat(labour_list[l].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: amount,
                            discount: labour_list[l].discount,
                            customer_dep: parseFloat(labour_list[l].customer_dep),
                            insurance_dep: parseFloat(labour_list[l].insurance_dep),
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: labour_list[l].amount_is_tax,
                            tax: tax_info.tax,
                            tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });
                    }
                }

                if (of_list) {
                    for (var o = 0; o < of_list.length; o++) {
                        var total = 0;
                        var tax_info = await Tax.findOne({ rate: of_list[o].tax_rate, type: tax_type }).exec();
                        var tax = [];
                        var rate = of_list[o].rate;
                        var amount = (parseFloat(of_list[o].rate) * parseFloat(of_list[o].quantity));
                        var tax_rate = tax_info.detail;
                        var discount_total = 0;
                        var base = amount;
                        var dep = 0;



                        if (of_list[o].discount) {
                            var discount_total = of_list[o].discount;
                            amount = amount - parseFloat(discount_total.toFixed(2))
                        }



                        if (of_list[o].amount_is_tax == "exclusive") {
                            var tax_on_amount = amount;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t; parseFloat
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        amount = amount + t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }
                            total = total + amount;
                        }

                        if (of_list[o].amount_is_tax == "inclusive") {
                            var x = (100 + tax_info.rate) / 100;
                            var tax_on_amount = amount / x;
                            if (tax_rate.length > 0) {
                                for (var r = 0; r < tax_rate.length; r++) {
                                    if (tax_rate[r].rate != tax_info.rate) {
                                        var t = tax_on_amount * (tax_rate[r].rate / 100);
                                        base = base - t;
                                        tax.push({
                                            tax: tax_rate[r].tax,
                                            rate: tax_rate[r].rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                    else {
                                        var t = amount - tax_on_amount;
                                        base = base - t;
                                        tax.push({
                                            tax: tax_info.tax, tax_rate: tax_info.rate,
                                            rate: tax_info.rate,
                                            amount: parseFloat(t.toFixed(2))
                                        });
                                    }
                                }
                            }

                            //base = base - discount_total - dep; 

                            total = total + amount;
                        }

                        var tax_details = {
                            tax: tax_info.tax,
                            rate: tax_info.rate,
                            amount: total,
                            detail: tax
                        }

                        var tax_amount = total - parseFloat(base.toFixed(2));

                        opening_fitting.push({
                            _id: of_list[o]._id,
                            item: of_list[o].item,
                            source: of_list[o].source,
                            rate: parseFloat(of_list[o].rate),
                            quantity: parseFloat(of_list[o].quantity),
                            base: parseFloat(base.toFixed(2)),
                            amount: total,
                            discount: parseFloat(of_list[o].discount),
                            customer_dep: parseFloat(of_list[o].customer_dep),
                            insurance_dep: parseFloat(of_list[o].insurance_dep),
                            tax_amount: parseFloat(_.sumBy(tax, x => x.amount).toFixed(2)),
                            amount_is_tax: of_list[o].amount_is_tax,
                            tax: tax_info.tax, tax_rate: tax_info.rate,
                            tax_info: tax_details
                        });
                    }
                }

                var parts_visible = true;

                bookingService.push({
                    _id: services[i]._id,
                    source: services[i].source,
                    service: services[i].service,
                    mileage: services[i].mileage,
                    parts: part,
                    labour: labours,
                    opening_fitting: opening_fitting,
                    hours: services[i].hours,
                    parts_visible: parts_visible,
                    quantity: services[i].quantity,
                    discount: _.sumBy(labours, x => x.discount) + _.sumBy(part, x => x.discount) + _.sumBy(opening_fitting, x => x.discount),
                    description: services[i].description,
                    cost: _.sumBy(part, x => x.amount) + _.sumBy(labours, x => x.amount) + services[i].of_cost,
                    labour_cost: _.sumBy(labours, x => x.amount),
                    of_cost: _.sumBy(opening_fitting, x => x.amount),
                    part_cost: _.sumBy(part, x => x.amount),
                    exceeded_cost: parseFloat(services[i].exceeded_cost),
                    part_cost_editable: services[i].part_cost_editable,
                    labour_cost_editable: services[i].labour_cost_editable,
                    of_cost_editable: services[i].of_cost_editable,
                    type: services[i].type,
                    sub_category: services[i].sub_category,
                    customer_approval: services[i].customer_approval,
                    surveyor_approval: services[i].surveyor_approval,
                    claim: services[i].claim,
                    custom: services[i].custom,
                });
            }
        });

    res.status(200).json({
        responseCode: 200,
        responseMessage: 'Success',
        responseData: bookingService,
    });
});

//Sales + SalesOrder Invoices Export For Tally
// router.get('/tally/sales/invoices/export', xAccessToken.token, async function (req, res, next) {
//     try {
//         const business = req.user;
//         if (req.query.page == undefined) {
//             var page = 0;
//         }
//         else {
//             var page = req.query.page;
//         }
//         var page = Math.max(0, parseInt(page));
//         let sales = [];
//         // let sales = 
//         await OrderInvoice.find({ business: business, status: "Active" })
//             .populate({ path: 'sale', select: 'parts' })
//             .populate('user')
//             .cursor().eachAsync(async (invoice) => {
//                 if (!invoice.address) {
//                     invoice.address = await Address.findOne({ user: invoice.user._id }).sort({ _id: -1 }).lean();
//                 }
//                 if (!invoice.address) {
//                     invoice.address = invoice.user.address
//                 }
//                 if (invoice.sale && !invoice.order) {
//                     let data = {
//                         parts: invoice.sale.parts,
//                         invoice_no: invoice.invoice_no,
//                         note: invoice.note,
//                         address: invoice.address,
//                         user: invoice.user,
//                         created_at: invoice.created_at
//                     }
//                     sales.push(data);
//                 } else if (!invoice.sale && invoice.order) {
//                     var items = await OrderLine.find({ order: invoice.order, issued: true, business: business, status: { $nin: ["Cancelled"] } }).exec();
//                     let data = {
//                         parts: items,
//                         invoice_no: invoice.invoice_no,
//                         note: invoice.note,
//                         address: invoice.address,
//                         user: invoice.user,
//                         created_at: invoice.created_at
//                     }
//                     sales.push(data);
//                 }
//             })



//         res.status(200).json({
//             responseCode: 200,
//             responseMessage: "success",
//             responseData: {
//                 sales: sales,
//             }
//         })
//     }
//     catch (err) {
//         res.status(400).json({
//             responseCode: 400,
//             responseMessage: "Internal Server error",
//             responseData: {}
//         })
//     }

// });

//Sales Export For Tally
router.get('/tally/booking/invoices/export', xAccessToken.token, async function (req, res, next) {
    try {
        // console.log("ABHINAV ")
        const business = req.headers['business'];
        // const business = req.user;
        const { from, to } = req.query;
        if (req.query.page == undefined) {
            var page = 0;
        }
        else {
            var page = req.query.page;
        }
        var page = Math.max(0, parseInt(page));
        // let sales = [];
        // let sales = 
        let aggregate = [
            {
                $lookup: {
                    from: "User",
                    localField: "user",
                    foreignField: "_id",
                    as: "user",
                }
            },
            {
                $unwind: {
                    path: "$user",
                    preserveNullAndEmptyArrays: false
                }
            },
            {
                $lookup: {
                    from: "Booking",
                    localField: "booking",
                    foreignField: "_id",
                    as: "booking",
                }
            },
            {
                $unwind: {
                    path: "$booking",
                    preserveNullAndEmptyArrays: false
                }
            },
            {
                $lookup: {
                    from: "Address",
                    localField: "address",
                    foreignField: "_id",
                    as: "address",
                }
            },
            {
                $unwind: {
                    path: "$address",
                    preserveNullAndEmptyArrays: false
                }
            },

            {
                $match: {
                    business: mongoose.Types.ObjectId(business), status: { $nin: ["Cancelled"] }
                    // ,
                    // $or:{
                    // }

                }
            },
            // {
            //     $group: {
            //         _id: { _id: '$_id' },
            //         services: { $last: '$booking.services' },
            //         invoice_no: { $last: '$invoice_no' },
            //         note: { $last: '$note' },
            //         address: { $last: '$address' },
            //         user: { $last: '$user' },
            //         created_at: { $last: '$created_at' }
            //     },
            // },
            {
                $project: {
                    'invoice_no': 1,
                    'created_at': 1,
                    'user.name': 1,
                    'address.address': 1,
                    'address.state': 1,
                    'address.zip': 1,
                    'user.business_info.gstin': 1,
                    'services.parts.item': 1,
                    // 'services.parts.unit': 1,
                    'services.parts.quantity': 1,
                    'services.parts.rate': 1,
                    'services.parts.amount': 1,
                    'services.parts.tax': 1,
                    'services.parts.tax_rate': 1,
                    'services.parts.tax_amount': 1,
                    'services.parts.discount': 1,
                    'services.parts.hsn_sac': 1,
                    'services.labour.item': 1,
                    // 'services.labour.unit': 1,
                    'services.labour.quantity': 1,
                    'services.labour.rate': 1,
                    'services.labour.amount': 1,
                    'services.labour.tax': 1,
                    'services.labour.tax_rate': 1,
                    'services.labour.tax_amount': 1,
                    'services.labour.discount': 1,
                    'services.labour.hsn_sac': 1,
                    'services.opening_fitting.item': 1,
                    // 'services.opening_fitting.unit': 1,
                    'services.opening_fitting.quantity': 1,
                    'services.opening_fitting.rate': 1,
                    'services.opening_fitting.amount': 1,
                    'services.opening_fitting.tax': 1,
                    'services.opening_fitting.tax_rate': 1,
                    'services.labour.discount': 1,
                    'services.opening_fitting.tax_amount': 1,
                    'services.opening_fitting.discount': 1,
                    'services.opening_fitting.hsn_sac': 1,

                },
            },
            {
                $addFields: {
                    'services.parts.unit': 'Piece',
                    'services.labour.unit': 'Piece',
                    'services.opening_fitting.unit': 'Piece',
                    // 'created_at': moment('$created_at').format('YYYY-MM-DD')
                }
            },
            { $sort: { "created_at": 1 } },
        ]
        if (from && to) {
            aggregate.push({ $match: { created_at: { $gte: new Date(from), $lte: new Date(to) } } })
        }
        let sales = await Invoice.aggregate(aggregate)
        // console.log("Sales Length  = " + JSON.stringify(sales.length))
        res.status(200).json({
            responseCode: 200,
            responseMessage: "success",
            responseData: {
                sales: sales,
            }
        })
    }
    catch (err) {
        res.status(400).json({
            responseCode: 400,
            responseMessage: "Internal Server error",
            responseData: {}
        })
    }
});

router.get('/booking/invoices/get', xAccessToken.token, async function (req, res) {
    try {
        let business = req.headers['business'];
        let loggedInDetails = await User.findById(req.user).exec();
        let invoices = [];
        let totalResult = 0;
        let role = await Management.findOne({ user: req.user, business: business }).exec();
        if (req.query.page == undefined) {
            var page = 0;
        }
        else {
            var page = req.query.page;
        }
        var date = new Date();
        var to = new Date();
        to.setDate(date.getDate() - 1);
        to.setHours(23, 59, 58)
        var page = Math.max(0, parseInt(page));
        var queries = new Object();
        var sortBy = new Object();
        var thumbnail = [];
        let filters = [{
            $lookup: {
                from: "Booking",
                localField: "booking",
                foreignField: "_id",
                as: "booking",
            }
        },
        {
            $unwind: {
                path: "$booking",
                preserveNullAndEmptyArrays: false
            }
        },
        {
            $lookup: {
                from: "User",
                localField: "user",
                foreignField: "_id",
                as: "user",
            }
        },
        {
            $unwind: {
                path: "$user",
                preserveNullAndEmptyArrays: false
            }
        },
        {
            $lookup: {
                from: "Car",
                localField: "car",
                foreignField: "_id",
                as: "car",
            }
        },
        {
            $unwind: {
                path: "$car",
                preserveNullAndEmptyArrays: true
            }
        }
        ];
        if (role.role == "Service Advisor") {
            // console.log("Service Advisor = " + role.user)
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
		'advisor': mongoose.Types.ObjectId(role.user),
               // 'advisor._id': mongoose.Types.ObjectId(role.user),
            };
            filters.push(specification);

        } else {
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
            };
            filters.push(specification);
        }

        if (req.query.query) {
            req.query.query = req.query.query.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
            var specification = {};
            specification['$match'] = {
                business: mongoose.Types.ObjectId(business),
                $or: [
                    { 'status': { $regex: req.query.query, $options: 'i' } },
                    { 'booking_no': { $eq: req.query.query } },
                    { 'invoice_no': { $regex: req.query.query, $options: 'i' } },
                    { 'user.name': { $regex: req.query.query, $options: 'i' } },
                    { 'user.business_info.gstin': { $regex: req.query.query, $options: 'i' } },
                    { 'user.contact_no': { $regex: req.query.query, $options: 'i' } },
                    { 'car.title': { $regex: req.query.query, $options: 'i' } },
                    { 'car.registration_no': { $regex: req.query.query, $options: 'i' } },
                    { 'advisor.name': { $regex: req.query.query, $options: 'i' } },
                    { 'insurance_info.insurance_company': { $regex: req.query.query, $options: 'i' } },
                    { 'insurance_info.branch': { $regex: req.query.query, $options: 'i' } },
                    { 'advisor.contact_no': { $regex: req.query.query, $options: 'i' } },
                ]
            };
            filters.push(specification);
        }
        let due = 0;
        if (req.query.from && req.query.to) {
            var from = new Date(req.query.from)
            from = from.setDate(from.getDate() + 1);
            var to = new Date(req.query.to);
            to = to.setDate(to.getDate() + 1);
            var specification = {};
            specification["$match"] = { "created_at": { $gte: new Date(from), $lte: new Date(to) } };
            filters.push(specification);

            //Calculate Total Dues
            let invoiceDues = await Invoice.aggregate(filters);
            let all = _.filter(invoiceDues, x => x.status == "Active");
            let map_due = _.map(all, 'due');
            due = parseFloat(_.sumBy(map_due, x => x.due).toFixed(2));
            //Calculate Total Dues
        }
        filters.push(
            {
                $project: {
                    _id: '$_id',
                    id: '$_id',
                    car: {
                        _id: '$car._id',
                        id: '$car._id',
                        title: '$car.title',
                        registration_no: '$car.registration_no',
                    },
                    user: {
                        _id: '$user._id',
                        id: '$user._id',
                        name: '$user.name',
                        // contact_no: '$user.contact_no',
                        // email: '$user.email',
                        account_info: '$user.account_info',
                        business_info: '$user.business_info',
                    },
                    business: {
                        _id: '$business._id',
                        id: '$business._id',
                        name: '$business.name',
                        // contact_no: '$business.contact_no',
                        // email: '$business.email',
                        // account_info: '$business.account_info',
                        business_info: '$business.business_info',
                        address: '$business.address',
                    },
                    // advisor: '$advisor',
                    booking: '$booking._id',
                    // services: '$services',
                    status: '$status',
                    invoice_no: '$invoice_no',
                    // job_no: '$job_no',
                    // booking_no: '$booking_no',
                    // address: '$address',
                    payment: '$payment',
                    due: '$due',
                    // odometer: '$odometer',
                    insurance_info: '$booking.insurance_info',
                    invoice_type: '$invoice_type',
                    started_at: '$started_at',
                    // delivery_date: '$delivery_date',
                    // delivery_time: '$delivery_time',
                    status: '$status',
                    // started_at: '$started_at',
                    created_at: '$created_at',
                    // updated_at: '$updated_at',
                }
            },
            {
                $sort: { _id: -1 }
            },
            {
                $facet: {
                    totalResult: [{ $count: 'total' }],
                    data: [{ $skip: config.perPage * page }, { $limit: config.perPage }]
                }
            },
            {
                $project: {
                    data: 1,
                    total: { $arrayElemAt: ['$totalResult.total', 0] }
                }
            }
        )

        // var all = _.filter(totalResult, x => x.status == "Active");
        // var map_due = _.map(all, 'due');
        // var due = parseFloat(_.sumBy(map_due, x => x.due).toFixed(2));

        // var specification = {};
        // specification['$skip'] = config.perPage * page;
        // filters.push(specification);

        // var specification = {};
        // specification['$limit'] = config.perPage;
        // filters.push(specification);
        // console.log("Data = ")
        let data = await Invoice.aggregate(filters);

        // console.log("invoiceDues = " + due)
        // .cursor({ batchSize: 10 })
        // .exec()
        // .eachAsync(async function (invoice) {
        //     invoices.push({
        //         _id: invoice._id,
        //         id: invoice._id,
        //         car: {
        //             _id: invoice.car._id,
        //             id: invoice.car._id,
        //             title: invoice.car.title,
        //             registration_no: invoice.car.registration_no,
        //         },
        //         user: {
        //             _id: invoice.user._id,
        //             id: invoice.user._id,
        //             name: invoice.user.name,
        //             contact_no: invoice.user.contact_no,
        //             email: invoice.user.email,
        //             account_info: invoice.user.account_info,
        //             business_info: invoice.user.business_info,
        //         },
        //         business: {
        //             _id: invoice.business._id,
        //             id: invoice.business._id,
        //             name: invoice.business.name,
        //             contact_no: invoice.business.contact_no,
        //             email: invoice.business.email,
        //             account_info: invoice.business.account_info,
        //             business_info: invoice.business.business_info,
        //             address: invoice.business.address,
        //         },
        //         /*advisor: {
        //             _id: invoice.advisor._id,
        //             id: invoice.advisor._id,
        //             name: invoice.advisor.name,
        //             contact_no: invoice.advisor.contact_no,
        //             email: invoice.advisor.email
        //         },*/
        //         advisor: invoice.advisor,
        //         booking: invoice.booking._id,
        //         services: invoice.services,
        //         status: _.startCase(invoice.status),
        //         invoice_no: invoice.invoice_no,
        //         job_no: invoice.job_no,
        //         booking_no: invoice.booking_no,
        //         address: invoice.address,
        //         payment: invoice.payment,
        //         due: invoice.due,
        //         odometer: invoice.odometer,
        //         insurance_info: invoice.booking.insurance_info,
        //         invoice_type: invoice.invoice_type,
        //         started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
        //         delivery_date: moment(invoice.delivery_date).tz(req.headers['tz']).format('ll'),
        //         delivery_time: invoice.delivery_time,
        //         status: invoice.status,
        //         started_at: moment(invoice.started_at).tz(req.headers['tz']).format('lll'),
        //         created_at: moment(invoice.created_at).tz(req.headers['tz']).format('lll'),
        //         updated_at: moment(invoice.updated_at).tz(req.headers['tz']).format('lll'),
        //     });
        // });
        res.status(200).json({
            responseCode: 200,
            responseMessage: to,
            responseInfo: {
                due: due,
                totalResult: data[0].total
            },
            responseData: data[0].data
        });
    } catch (err) {
        res.status(422).json({
            responseCode: 200,
            responseMessage: 'Server Error',
            responseData: {}
        });
    }
});
module.exports = router;
